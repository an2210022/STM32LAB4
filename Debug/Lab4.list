
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003064  08003064  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08003064  08003064  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003064  08003064  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800306c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000058  080030c0  00020058  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080030c0  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009965  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8a  00000000  00000000  000299e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002b670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f73  00000000  00000000  0002cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c67d  00000000  00000000  00043a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008253b  00000000  00000000  000500d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a14  00000000  00000000  000d2668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08003028 	.word	0x08003028

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08003028 	.word	0x08003028

0800014c <IsModeButtonPressed>:
int KeyReg3[3] = {NORMAL_STATE};
int Time = 200;
int ButtonFlag[3] = {0};


int IsModeButtonPressed(int pos){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(ButtonFlag[pos] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <IsModeButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <IsModeButtonPressed+0x22>
		ButtonFlag[pos] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <IsModeButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <IsModeButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000074 	.word	0x20000074

08000180 <MODEProcess>:

void MODEProcess(int idx){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	ButtonFlag[idx] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <MODEProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000074 	.word	0x20000074

080001a0 <getKeyInput1>:
void getKeyInput1(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e073      	b.n	8000294 <getKeyInput1+0xf4>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3d      	ldr	r2, [pc, #244]	; (80002a4 <getKeyInput1+0x104>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493c      	ldr	r1, [pc, #240]	; (80002a8 <getKeyInput1+0x108>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a3b      	ldr	r2, [pc, #236]	; (80002ac <getKeyInput1+0x10c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4937      	ldr	r1, [pc, #220]	; (80002a4 <getKeyInput1+0x104>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = (i == 0) ? HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) :
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d106      	bne.n	80001e0 <getKeyInput1+0x40>
 80001d2:	2180      	movs	r1, #128	; 0x80
 80001d4:	4836      	ldr	r0, [pc, #216]	; (80002b0 <getKeyInput1+0x110>)
 80001d6:	f001 fefb 	bl	8001fd0 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	461a      	mov	r2, r3
 80001de:	e011      	b.n	8000204 <getKeyInput1+0x64>
		             (i == 1) ? HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) :
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d107      	bne.n	80001f6 <getKeyInput1+0x56>
 80001e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ea:	4831      	ldr	r0, [pc, #196]	; (80002b0 <getKeyInput1+0x110>)
 80001ec:	f001 fef0 	bl	8001fd0 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	461a      	mov	r2, r3
 80001f4:	e006      	b.n	8000204 <getKeyInput1+0x64>
		             HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 80001f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001fa:	482d      	ldr	r0, [pc, #180]	; (80002b0 <getKeyInput1+0x110>)
 80001fc:	f001 fee8 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000200:	4603      	mov	r3, r0
		             (i == 1) ? HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) :
 8000202:	461a      	mov	r2, r3
		KeyReg2[i] = (i == 0) ? HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) :
 8000204:	4929      	ldr	r1, [pc, #164]	; (80002ac <getKeyInput1+0x10c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 800020c:	4a26      	ldr	r2, [pc, #152]	; (80002a8 <getKeyInput1+0x108>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	4923      	ldr	r1, [pc, #140]	; (80002a4 <getKeyInput1+0x104>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800021c:	429a      	cmp	r2, r3
 800021e:	d136      	bne.n	800028e <getKeyInput1+0xee>
 8000220:	4a20      	ldr	r2, [pc, #128]	; (80002a4 <getKeyInput1+0x104>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000228:	4920      	ldr	r1, [pc, #128]	; (80002ac <getKeyInput1+0x10c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000230:	429a      	cmp	r2, r3
 8000232:	d12c      	bne.n	800028e <getKeyInput1+0xee>
			if(KeyReg3[i] != KeyReg2[i]){
 8000234:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <getKeyInput1+0x114>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	491b      	ldr	r1, [pc, #108]	; (80002ac <getKeyInput1+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000244:	429a      	cmp	r2, r3
 8000246:	d014      	beq.n	8000272 <getKeyInput1+0xd2>
				KeyReg3[i] = KeyReg2[i];
 8000248:	4a18      	ldr	r2, [pc, #96]	; (80002ac <getKeyInput1+0x10c>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000250:	4918      	ldr	r1, [pc, #96]	; (80002b4 <getKeyInput1+0x114>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 8000258:	4a14      	ldr	r2, [pc, #80]	; (80002ac <getKeyInput1+0x10c>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d114      	bne.n	800028e <getKeyInput1+0xee>
					MODEProcess(i);
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	f7ff ff8b 	bl	8000180 <MODEProcess>
					Time = 200;
 800026a:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <getKeyInput1+0x118>)
 800026c:	22c8      	movs	r2, #200	; 0xc8
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	e00d      	b.n	800028e <getKeyInput1+0xee>
				}
			}
			else{
				Time--;
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <getKeyInput1+0x118>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	3b01      	subs	r3, #1
 8000278:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <getKeyInput1+0x118>)
 800027a:	6013      	str	r3, [r2, #0]
				if(Time == 0){
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <getKeyInput1+0x118>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d104      	bne.n	800028e <getKeyInput1+0xee>
					KeyReg3[i] = NORMAL_STATE;
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <getKeyInput1+0x114>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2101      	movs	r1, #1
 800028a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++){
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	3301      	adds	r3, #1
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b02      	cmp	r3, #2
 8000298:	dd88      	ble.n	80001ac <getKeyInput1+0xc>
				}
			}
		}
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000000c 	.word	0x2000000c
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000018 	.word	0x20000018
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	20000024 	.word	0x20000024
 80002b8:	20000030 	.word	0x20000030

080002bc <fsm_auto_run>:
 *
 *  Created on: Oct 29, 2024
 *      Author: Admin
 */
#include "fsm_auto.h"
void fsm_auto_run(){
 80002bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80002c0:	b082      	sub	sp, #8
 80002c2:	af00      	add	r7, sp, #0
	switch (status) {
 80002c4:	4baa      	ldr	r3, [pc, #680]	; (8000570 <fsm_auto_run+0x2b4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	f200 81c8 	bhi.w	8000660 <fsm_auto_run+0x3a4>
 80002d0:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_auto_run+0x1c>)
 80002d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d6:	bf00      	nop
 80002d8:	08000341 	.word	0x08000341
 80002dc:	080003ff 	.word	0x080003ff
 80002e0:	080004b7 	.word	0x080004b7
 80002e4:	080005ad 	.word	0x080005ad
 80002e8:	080002ed 	.word	0x080002ed
	    case INIT:
	    	SCH_Init();
 80002ec:	f000 ffdc 	bl	80012a8 <SCH_Init>
	    	mode = 1;
 80002f0:	4ba0      	ldr	r3, [pc, #640]	; (8000574 <fsm_auto_run+0x2b8>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	601a      	str	r2, [r3, #0]
	        timeRed = TIME_RED;
 80002f6:	4ba0      	ldr	r3, [pc, #640]	; (8000578 <fsm_auto_run+0x2bc>)
 80002f8:	2205      	movs	r2, #5
 80002fa:	601a      	str	r2, [r3, #0]
	        timeAmber = TIME_AMBER;
 80002fc:	4b9f      	ldr	r3, [pc, #636]	; (800057c <fsm_auto_run+0x2c0>)
 80002fe:	2202      	movs	r2, #2
 8000300:	601a      	str	r2, [r3, #0]
	        timeGreen = TIME_GREEN;
 8000302:	4b9f      	ldr	r3, [pc, #636]	; (8000580 <fsm_auto_run+0x2c4>)
 8000304:	2203      	movs	r2, #3
 8000306:	601a      	str	r2, [r3, #0]
	        status = RED1_GREEN2;
 8000308:	4b99      	ldr	r3, [pc, #612]	; (8000570 <fsm_auto_run+0x2b4>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]
	        count = timeRed;
 800030e:	4b9a      	ldr	r3, [pc, #616]	; (8000578 <fsm_auto_run+0x2bc>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a9c      	ldr	r2, [pc, #624]	; (8000584 <fsm_auto_run+0x2c8>)
 8000314:	6013      	str	r3, [r2, #0]
	        wait = 0;
 8000316:	499c      	ldr	r1, [pc, #624]	; (8000588 <fsm_auto_run+0x2cc>)
 8000318:	f04f 0200 	mov.w	r2, #0
 800031c:	f04f 0300 	mov.w	r3, #0
 8000320:	e9c1 2300 	strd	r2, r3, [r1]
	        UpdateBuffer(mode, count);
 8000324:	4b93      	ldr	r3, [pc, #588]	; (8000574 <fsm_auto_run+0x2b8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a96      	ldr	r2, [pc, #600]	; (8000584 <fsm_auto_run+0x2c8>)
 800032a:	6812      	ldr	r2, [r2, #0]
 800032c:	4611      	mov	r1, r2
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fe5a 	bl	8000fe8 <UpdateBuffer>
	        SCH_Add_Task(LED7, 0, 250);
 8000334:	22fa      	movs	r2, #250	; 0xfa
 8000336:	2100      	movs	r1, #0
 8000338:	4894      	ldr	r0, [pc, #592]	; (800058c <fsm_auto_run+0x2d0>)
 800033a:	f000 fff5 	bl	8001328 <SCH_Add_Task>
	        break;
 800033e:	e198      	b.n	8000672 <fsm_auto_run+0x3b6>

	    case RED1_GREEN2:
	        SCH_Add_Task(displayRED1, wait*1000, 0);
 8000340:	4b91      	ldr	r3, [pc, #580]	; (8000588 <fsm_auto_run+0x2cc>)
 8000342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800034a:	fb03 f302 	mul.w	r3, r3, r2
 800034e:	2200      	movs	r2, #0
 8000350:	4619      	mov	r1, r3
 8000352:	488f      	ldr	r0, [pc, #572]	; (8000590 <fsm_auto_run+0x2d4>)
 8000354:	f000 ffe8 	bl	8001328 <SCH_Add_Task>
	        SCH_Add_Task(displayGREEN2, wait*1000, 0);
 8000358:	4b8b      	ldr	r3, [pc, #556]	; (8000588 <fsm_auto_run+0x2cc>)
 800035a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800035e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000362:	fb03 f302 	mul.w	r3, r3, r2
 8000366:	2200      	movs	r2, #0
 8000368:	4619      	mov	r1, r3
 800036a:	488a      	ldr	r0, [pc, #552]	; (8000594 <fsm_auto_run+0x2d8>)
 800036c:	f000 ffdc 	bl	8001328 <SCH_Add_Task>
	        wait += timeGreen;
 8000370:	4b83      	ldr	r3, [pc, #524]	; (8000580 <fsm_auto_run+0x2c4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800037a:	4b83      	ldr	r3, [pc, #524]	; (8000588 <fsm_auto_run+0x2cc>)
 800037c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000380:	1884      	adds	r4, r0, r2
 8000382:	603c      	str	r4, [r7, #0]
 8000384:	eb41 0303 	adc.w	r3, r1, r3
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	4b7f      	ldr	r3, [pc, #508]	; (8000588 <fsm_auto_run+0x2cc>)
 800038c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000390:	e9c3 1200 	strd	r1, r2, [r3]
	        status = RED1_AMBER2;
 8000394:	4b76      	ldr	r3, [pc, #472]	; (8000570 <fsm_auto_run+0x2b4>)
 8000396:	2202      	movs	r2, #2
 8000398:	601a      	str	r2, [r3, #0]
	        if(IsModeButtonPressed(0) == 1){
 800039a:	2000      	movs	r0, #0
 800039c:	f7ff fed6 	bl	800014c <IsModeButtonPressed>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	f040 815e 	bne.w	8000664 <fsm_auto_run+0x3a8>
	        	SCH_Init();
 80003a8:	f000 ff7e 	bl	80012a8 <SCH_Init>
	        	OFF();
 80003ac:	f001 fadc 	bl	8001968 <OFF>
	        	mode = 2;
 80003b0:	4b70      	ldr	r3, [pc, #448]	; (8000574 <fsm_auto_run+0x2b8>)
 80003b2:	2202      	movs	r2, #2
 80003b4:	601a      	str	r2, [r3, #0]
	        	wait = 0;
 80003b6:	4974      	ldr	r1, [pc, #464]	; (8000588 <fsm_auto_run+0x2cc>)
 80003b8:	f04f 0200 	mov.w	r2, #0
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e9c1 2300 	strd	r2, r3, [r1]
	        	UpdateBuffer(mode, timeRed);
 80003c4:	4b6b      	ldr	r3, [pc, #428]	; (8000574 <fsm_auto_run+0x2b8>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a6b      	ldr	r2, [pc, #428]	; (8000578 <fsm_auto_run+0x2bc>)
 80003ca:	6812      	ldr	r2, [r2, #0]
 80003cc:	4611      	mov	r1, r2
 80003ce:	4618      	mov	r0, r3
 80003d0:	f000 fe0a 	bl	8000fe8 <UpdateBuffer>
	        	SCH_Add_Task(LED7, 0, 250);
 80003d4:	22fa      	movs	r2, #250	; 0xfa
 80003d6:	2100      	movs	r1, #0
 80003d8:	486c      	ldr	r0, [pc, #432]	; (800058c <fsm_auto_run+0x2d0>)
 80003da:	f000 ffa5 	bl	8001328 <SCH_Add_Task>
	        	SCH_Add_Task(BlinkRED, 0, 500);
 80003de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003e2:	2100      	movs	r1, #0
 80003e4:	486c      	ldr	r0, [pc, #432]	; (8000598 <fsm_auto_run+0x2dc>)
 80003e6:	f000 ff9f 	bl	8001328 <SCH_Add_Task>
	        	SCH_Add_Task(ResetStatus, 7000, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f641 3158 	movw	r1, #7000	; 0x1b58
 80003f0:	486a      	ldr	r0, [pc, #424]	; (800059c <fsm_auto_run+0x2e0>)
 80003f2:	f000 ff99 	bl	8001328 <SCH_Add_Task>
	        	status = MAN_RED;
 80003f6:	4b5e      	ldr	r3, [pc, #376]	; (8000570 <fsm_auto_run+0x2b4>)
 80003f8:	2206      	movs	r2, #6
 80003fa:	601a      	str	r2, [r3, #0]
	        }
	        break;
 80003fc:	e132      	b.n	8000664 <fsm_auto_run+0x3a8>

	    case RED1_AMBER2:
	        SCH_Add_Task(displayRED1, wait*1000, 0);
 80003fe:	4b62      	ldr	r3, [pc, #392]	; (8000588 <fsm_auto_run+0x2cc>)
 8000400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000408:	fb03 f302 	mul.w	r3, r3, r2
 800040c:	2200      	movs	r2, #0
 800040e:	4619      	mov	r1, r3
 8000410:	485f      	ldr	r0, [pc, #380]	; (8000590 <fsm_auto_run+0x2d4>)
 8000412:	f000 ff89 	bl	8001328 <SCH_Add_Task>
	        SCH_Add_Task(displayAMBER2, wait*1000, 0);
 8000416:	4b5c      	ldr	r3, [pc, #368]	; (8000588 <fsm_auto_run+0x2cc>)
 8000418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800041c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000420:	fb03 f302 	mul.w	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	4619      	mov	r1, r3
 8000428:	485d      	ldr	r0, [pc, #372]	; (80005a0 <fsm_auto_run+0x2e4>)
 800042a:	f000 ff7d 	bl	8001328 <SCH_Add_Task>
	        wait += timeAmber;
 800042e:	4b53      	ldr	r3, [pc, #332]	; (800057c <fsm_auto_run+0x2c0>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4618      	mov	r0, r3
 8000434:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8000438:	4b53      	ldr	r3, [pc, #332]	; (8000588 <fsm_auto_run+0x2cc>)
 800043a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800043e:	eb10 0a02 	adds.w	sl, r0, r2
 8000442:	eb41 0b03 	adc.w	fp, r1, r3
 8000446:	4b50      	ldr	r3, [pc, #320]	; (8000588 <fsm_auto_run+0x2cc>)
 8000448:	e9c3 ab00 	strd	sl, fp, [r3]
	        status = GREEN1_RED2;
 800044c:	4b48      	ldr	r3, [pc, #288]	; (8000570 <fsm_auto_run+0x2b4>)
 800044e:	2203      	movs	r2, #3
 8000450:	601a      	str	r2, [r3, #0]
	        if(IsModeButtonPressed(0) == 1){
 8000452:	2000      	movs	r0, #0
 8000454:	f7ff fe7a 	bl	800014c <IsModeButtonPressed>
 8000458:	4603      	mov	r3, r0
 800045a:	2b01      	cmp	r3, #1
 800045c:	f040 8104 	bne.w	8000668 <fsm_auto_run+0x3ac>
	        	SCH_Init();
 8000460:	f000 ff22 	bl	80012a8 <SCH_Init>
	        	OFF();
 8000464:	f001 fa80 	bl	8001968 <OFF>
	        	mode = 2;
 8000468:	4b42      	ldr	r3, [pc, #264]	; (8000574 <fsm_auto_run+0x2b8>)
 800046a:	2202      	movs	r2, #2
 800046c:	601a      	str	r2, [r3, #0]
	        	wait = 0;
 800046e:	4946      	ldr	r1, [pc, #280]	; (8000588 <fsm_auto_run+0x2cc>)
 8000470:	f04f 0200 	mov.w	r2, #0
 8000474:	f04f 0300 	mov.w	r3, #0
 8000478:	e9c1 2300 	strd	r2, r3, [r1]
	        	UpdateBuffer(mode, timeRed);
 800047c:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <fsm_auto_run+0x2b8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a3d      	ldr	r2, [pc, #244]	; (8000578 <fsm_auto_run+0x2bc>)
 8000482:	6812      	ldr	r2, [r2, #0]
 8000484:	4611      	mov	r1, r2
 8000486:	4618      	mov	r0, r3
 8000488:	f000 fdae 	bl	8000fe8 <UpdateBuffer>
	        	SCH_Add_Task(LED7, 0, 250);
 800048c:	22fa      	movs	r2, #250	; 0xfa
 800048e:	2100      	movs	r1, #0
 8000490:	483e      	ldr	r0, [pc, #248]	; (800058c <fsm_auto_run+0x2d0>)
 8000492:	f000 ff49 	bl	8001328 <SCH_Add_Task>
	        	SCH_Add_Task(BlinkRED, 0, 500);
 8000496:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800049a:	2100      	movs	r1, #0
 800049c:	483e      	ldr	r0, [pc, #248]	; (8000598 <fsm_auto_run+0x2dc>)
 800049e:	f000 ff43 	bl	8001328 <SCH_Add_Task>
	        	SCH_Add_Task(ResetStatus, 7000, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f641 3158 	movw	r1, #7000	; 0x1b58
 80004a8:	483c      	ldr	r0, [pc, #240]	; (800059c <fsm_auto_run+0x2e0>)
 80004aa:	f000 ff3d 	bl	8001328 <SCH_Add_Task>
	        	status = MAN_RED;
 80004ae:	4b30      	ldr	r3, [pc, #192]	; (8000570 <fsm_auto_run+0x2b4>)
 80004b0:	2206      	movs	r2, #6
 80004b2:	601a      	str	r2, [r3, #0]
	        }
	        break;
 80004b4:	e0d8      	b.n	8000668 <fsm_auto_run+0x3ac>

	    case GREEN1_RED2:
	        SCH_Add_Task(displayGREEN1, wait*1000, 0);
 80004b6:	4b34      	ldr	r3, [pc, #208]	; (8000588 <fsm_auto_run+0x2cc>)
 80004b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c0:	fb03 f302 	mul.w	r3, r3, r2
 80004c4:	2200      	movs	r2, #0
 80004c6:	4619      	mov	r1, r3
 80004c8:	4836      	ldr	r0, [pc, #216]	; (80005a4 <fsm_auto_run+0x2e8>)
 80004ca:	f000 ff2d 	bl	8001328 <SCH_Add_Task>
	        SCH_Add_Task(displayRED2, wait*1000, 0);
 80004ce:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <fsm_auto_run+0x2cc>)
 80004d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d8:	fb03 f302 	mul.w	r3, r3, r2
 80004dc:	2200      	movs	r2, #0
 80004de:	4619      	mov	r1, r3
 80004e0:	4831      	ldr	r0, [pc, #196]	; (80005a8 <fsm_auto_run+0x2ec>)
 80004e2:	f000 ff21 	bl	8001328 <SCH_Add_Task>
	        wait += timeGreen;
 80004e6:	4b26      	ldr	r3, [pc, #152]	; (8000580 <fsm_auto_run+0x2c4>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4618      	mov	r0, r3
 80004ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80004f0:	4b25      	ldr	r3, [pc, #148]	; (8000588 <fsm_auto_run+0x2cc>)
 80004f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004f6:	eb10 0802 	adds.w	r8, r0, r2
 80004fa:	eb41 0903 	adc.w	r9, r1, r3
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <fsm_auto_run+0x2cc>)
 8000500:	e9c3 8900 	strd	r8, r9, [r3]
	        status = AMBER1_RED2;
 8000504:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <fsm_auto_run+0x2b4>)
 8000506:	2204      	movs	r2, #4
 8000508:	601a      	str	r2, [r3, #0]
	        if(IsModeButtonPressed(0) == 1){
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff fe1e 	bl	800014c <IsModeButtonPressed>
 8000510:	4603      	mov	r3, r0
 8000512:	2b01      	cmp	r3, #1
 8000514:	f040 80aa 	bne.w	800066c <fsm_auto_run+0x3b0>
	        	SCH_Init();
 8000518:	f000 fec6 	bl	80012a8 <SCH_Init>
	        	OFF();
 800051c:	f001 fa24 	bl	8001968 <OFF>
	        	mode = 2;
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <fsm_auto_run+0x2b8>)
 8000522:	2202      	movs	r2, #2
 8000524:	601a      	str	r2, [r3, #0]
	        	wait = 0;
 8000526:	4918      	ldr	r1, [pc, #96]	; (8000588 <fsm_auto_run+0x2cc>)
 8000528:	f04f 0200 	mov.w	r2, #0
 800052c:	f04f 0300 	mov.w	r3, #0
 8000530:	e9c1 2300 	strd	r2, r3, [r1]
	        	UpdateBuffer(mode, timeRed);
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <fsm_auto_run+0x2b8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <fsm_auto_run+0x2bc>)
 800053a:	6812      	ldr	r2, [r2, #0]
 800053c:	4611      	mov	r1, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fd52 	bl	8000fe8 <UpdateBuffer>
	        	SCH_Add_Task(LED7, 0, 250);
 8000544:	22fa      	movs	r2, #250	; 0xfa
 8000546:	2100      	movs	r1, #0
 8000548:	4810      	ldr	r0, [pc, #64]	; (800058c <fsm_auto_run+0x2d0>)
 800054a:	f000 feed 	bl	8001328 <SCH_Add_Task>
	        	SCH_Add_Task(BlinkRED, 0, 500);
 800054e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000552:	2100      	movs	r1, #0
 8000554:	4810      	ldr	r0, [pc, #64]	; (8000598 <fsm_auto_run+0x2dc>)
 8000556:	f000 fee7 	bl	8001328 <SCH_Add_Task>
	        	SCH_Add_Task(ResetStatus, 7000, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	f641 3158 	movw	r1, #7000	; 0x1b58
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <fsm_auto_run+0x2e0>)
 8000562:	f000 fee1 	bl	8001328 <SCH_Add_Task>
	        	status = MAN_RED;
 8000566:	4b02      	ldr	r3, [pc, #8]	; (8000570 <fsm_auto_run+0x2b4>)
 8000568:	2206      	movs	r2, #6
 800056a:	601a      	str	r2, [r3, #0]
	        }
	        break;
 800056c:	e07e      	b.n	800066c <fsm_auto_run+0x3b0>
 800056e:	bf00      	nop
 8000570:	20000080 	.word	0x20000080
 8000574:	20000034 	.word	0x20000034
 8000578:	2000003c 	.word	0x2000003c
 800057c:	20000040 	.word	0x20000040
 8000580:	20000044 	.word	0x20000044
 8000584:	20000038 	.word	0x20000038
 8000588:	20000088 	.word	0x20000088
 800058c:	08000a61 	.word	0x08000a61
 8000590:	08001795 	.word	0x08001795
 8000594:	08001871 	.word	0x08001871
 8000598:	0800189d 	.word	0x0800189d
 800059c:	08000ac5 	.word	0x08000ac5
 80005a0:	08001845 	.word	0x08001845
 80005a4:	080017ed 	.word	0x080017ed
 80005a8:	08001819 	.word	0x08001819

	    case AMBER1_RED2:
	        SCH_Add_Task(displayAMBER1, wait*1000, 0);
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <fsm_auto_run+0x3c0>)
 80005ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	fb03 f302 	mul.w	r3, r3, r2
 80005ba:	2200      	movs	r2, #0
 80005bc:	4619      	mov	r1, r3
 80005be:	4830      	ldr	r0, [pc, #192]	; (8000680 <fsm_auto_run+0x3c4>)
 80005c0:	f000 feb2 	bl	8001328 <SCH_Add_Task>
	        SCH_Add_Task(displayRED2, wait*1000, 0);
 80005c4:	4b2d      	ldr	r3, [pc, #180]	; (800067c <fsm_auto_run+0x3c0>)
 80005c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fb03 f302 	mul.w	r3, r3, r2
 80005d2:	2200      	movs	r2, #0
 80005d4:	4619      	mov	r1, r3
 80005d6:	482b      	ldr	r0, [pc, #172]	; (8000684 <fsm_auto_run+0x3c8>)
 80005d8:	f000 fea6 	bl	8001328 <SCH_Add_Task>
	        wait += timeAmber;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	; (8000688 <fsm_auto_run+0x3cc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <fsm_auto_run+0x3c0>)
 80005e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ec:	1884      	adds	r4, r0, r2
 80005ee:	eb41 0503 	adc.w	r5, r1, r3
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <fsm_auto_run+0x3c0>)
 80005f4:	e9c3 4500 	strd	r4, r5, [r3]
	        status = RED1_GREEN2;
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <fsm_auto_run+0x3d0>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	601a      	str	r2, [r3, #0]
	        if(IsModeButtonPressed(0) == 1){
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff fda4 	bl	800014c <IsModeButtonPressed>
 8000604:	4603      	mov	r3, r0
 8000606:	2b01      	cmp	r3, #1
 8000608:	d132      	bne.n	8000670 <fsm_auto_run+0x3b4>
	        	SCH_Init();
 800060a:	f000 fe4d 	bl	80012a8 <SCH_Init>
	        	OFF();
 800060e:	f001 f9ab 	bl	8001968 <OFF>
	        	mode = 2;
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <fsm_auto_run+0x3d4>)
 8000614:	2202      	movs	r2, #2
 8000616:	601a      	str	r2, [r3, #0]
	        	wait = 0;
 8000618:	4918      	ldr	r1, [pc, #96]	; (800067c <fsm_auto_run+0x3c0>)
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	f04f 0300 	mov.w	r3, #0
 8000622:	e9c1 2300 	strd	r2, r3, [r1]
	        	UpdateBuffer(mode, timeRed);
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <fsm_auto_run+0x3d4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <fsm_auto_run+0x3d8>)
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	4611      	mov	r1, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fcd9 	bl	8000fe8 <UpdateBuffer>
	        	SCH_Add_Task(LED7, 0, 250);
 8000636:	22fa      	movs	r2, #250	; 0xfa
 8000638:	2100      	movs	r1, #0
 800063a:	4817      	ldr	r0, [pc, #92]	; (8000698 <fsm_auto_run+0x3dc>)
 800063c:	f000 fe74 	bl	8001328 <SCH_Add_Task>
	        	SCH_Add_Task(BlinkRED, 0, 500);
 8000640:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000644:	2100      	movs	r1, #0
 8000646:	4815      	ldr	r0, [pc, #84]	; (800069c <fsm_auto_run+0x3e0>)
 8000648:	f000 fe6e 	bl	8001328 <SCH_Add_Task>
	        	SCH_Add_Task(ResetStatus, 7000, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	f641 3158 	movw	r1, #7000	; 0x1b58
 8000652:	4813      	ldr	r0, [pc, #76]	; (80006a0 <fsm_auto_run+0x3e4>)
 8000654:	f000 fe68 	bl	8001328 <SCH_Add_Task>
	        	status = MAN_RED;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <fsm_auto_run+0x3d0>)
 800065a:	2206      	movs	r2, #6
 800065c:	601a      	str	r2, [r3, #0]
	        }
	        break;
 800065e:	e007      	b.n	8000670 <fsm_auto_run+0x3b4>

	    default:
	        break;
 8000660:	bf00      	nop
 8000662:	e006      	b.n	8000672 <fsm_auto_run+0x3b6>
	        break;
 8000664:	bf00      	nop
 8000666:	e004      	b.n	8000672 <fsm_auto_run+0x3b6>
	        break;
 8000668:	bf00      	nop
 800066a:	e002      	b.n	8000672 <fsm_auto_run+0x3b6>
	        break;
 800066c:	bf00      	nop
 800066e:	e000      	b.n	8000672 <fsm_auto_run+0x3b6>
	        break;
 8000670:	bf00      	nop
	    }

}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800067c:	20000088 	.word	0x20000088
 8000680:	080017c1 	.word	0x080017c1
 8000684:	08001819 	.word	0x08001819
 8000688:	20000040 	.word	0x20000040
 800068c:	20000080 	.word	0x20000080
 8000690:	20000034 	.word	0x20000034
 8000694:	2000003c 	.word	0x2000003c
 8000698:	08000a61 	.word	0x08000a61
 800069c:	0800189d 	.word	0x0800189d
 80006a0:	08000ac5 	.word	0x08000ac5

080006a4 <fsm_man_run>:
 *
 *  Created on: Oct 29, 2024
 *      Author: Admin
 */
#include "fsm_man.h"
void fsm_man_run(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	switch(status){
 80006a8:	4b93      	ldr	r3, [pc, #588]	; (80008f8 <fsm_man_run+0x254>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b08      	cmp	r3, #8
 80006ae:	f000 813b 	beq.w	8000928 <fsm_man_run+0x284>
 80006b2:	2b08      	cmp	r3, #8
 80006b4:	f300 81b8 	bgt.w	8000a28 <fsm_man_run+0x384>
 80006b8:	2b06      	cmp	r3, #6
 80006ba:	d003      	beq.n	80006c4 <fsm_man_run+0x20>
 80006bc:	2b07      	cmp	r3, #7
 80006be:	f000 808e 	beq.w	80007de <fsm_man_run+0x13a>
			mode = 1;
			UpdateBuffer(mode, count);
		}
		break;
	default:
		break;
 80006c2:	e1b1      	b.n	8000a28 <fsm_man_run+0x384>
		UpdateBuffer(mode, timeRed);
 80006c4:	4b8d      	ldr	r3, [pc, #564]	; (80008fc <fsm_man_run+0x258>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a8d      	ldr	r2, [pc, #564]	; (8000900 <fsm_man_run+0x25c>)
 80006ca:	6812      	ldr	r2, [r2, #0]
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fc8a 	bl	8000fe8 <UpdateBuffer>
		if(IsModeButtonPressed(0) == 1){
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff fd39 	bl	800014c <IsModeButtonPressed>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d11e      	bne.n	800071e <fsm_man_run+0x7a>
			SCH_Init();
 80006e0:	f000 fde2 	bl	80012a8 <SCH_Init>
			SCH_Add_Task(LED7, 0, 250);
 80006e4:	22fa      	movs	r2, #250	; 0xfa
 80006e6:	2100      	movs	r1, #0
 80006e8:	4886      	ldr	r0, [pc, #536]	; (8000904 <fsm_man_run+0x260>)
 80006ea:	f000 fe1d 	bl	8001328 <SCH_Add_Task>
			SCH_Add_Task(BlinkAMBER, 0, 500);
 80006ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006f2:	2100      	movs	r1, #0
 80006f4:	4884      	ldr	r0, [pc, #528]	; (8000908 <fsm_man_run+0x264>)
 80006f6:	f000 fe17 	bl	8001328 <SCH_Add_Task>
			mode = 3;
 80006fa:	4b80      	ldr	r3, [pc, #512]	; (80008fc <fsm_man_run+0x258>)
 80006fc:	2203      	movs	r2, #3
 80006fe:	601a      	str	r2, [r3, #0]
			UpdateBuffer(mode, TIME_AMBER);
 8000700:	4b7e      	ldr	r3, [pc, #504]	; (80008fc <fsm_man_run+0x258>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fc6e 	bl	8000fe8 <UpdateBuffer>
			SCH_Add_Task(ResetStatus, 7000, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f641 3158 	movw	r1, #7000	; 0x1b58
 8000712:	487e      	ldr	r0, [pc, #504]	; (800090c <fsm_man_run+0x268>)
 8000714:	f000 fe08 	bl	8001328 <SCH_Add_Task>
			status = MAN_AMBER;
 8000718:	4b77      	ldr	r3, [pc, #476]	; (80008f8 <fsm_man_run+0x254>)
 800071a:	2207      	movs	r2, #7
 800071c:	601a      	str	r2, [r3, #0]
		if(IsModeButtonPressed(1) == 1){
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff fd14 	bl	800014c <IsModeButtonPressed>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	d134      	bne.n	8000794 <fsm_man_run+0xf0>
			if(timeRed < 99 && timeRed < 99 && timeGreen < 99){
 800072a:	4b75      	ldr	r3, [pc, #468]	; (8000900 <fsm_man_run+0x25c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b62      	cmp	r3, #98	; 0x62
 8000730:	dc30      	bgt.n	8000794 <fsm_man_run+0xf0>
 8000732:	4b73      	ldr	r3, [pc, #460]	; (8000900 <fsm_man_run+0x25c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b62      	cmp	r3, #98	; 0x62
 8000738:	dc2c      	bgt.n	8000794 <fsm_man_run+0xf0>
 800073a:	4b75      	ldr	r3, [pc, #468]	; (8000910 <fsm_man_run+0x26c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b62      	cmp	r3, #98	; 0x62
 8000740:	dc28      	bgt.n	8000794 <fsm_man_run+0xf0>
			   SCH_Init();
 8000742:	f000 fdb1 	bl	80012a8 <SCH_Init>
			   timeRed++;
 8000746:	4b6e      	ldr	r3, [pc, #440]	; (8000900 <fsm_man_run+0x25c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	4a6c      	ldr	r2, [pc, #432]	; (8000900 <fsm_man_run+0x25c>)
 800074e:	6013      	str	r3, [r2, #0]
			   timeGreen++;
 8000750:	4b6f      	ldr	r3, [pc, #444]	; (8000910 <fsm_man_run+0x26c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4a6e      	ldr	r2, [pc, #440]	; (8000910 <fsm_man_run+0x26c>)
 8000758:	6013      	str	r3, [r2, #0]
			   count = timeRed;
 800075a:	4b69      	ldr	r3, [pc, #420]	; (8000900 <fsm_man_run+0x25c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a6d      	ldr	r2, [pc, #436]	; (8000914 <fsm_man_run+0x270>)
 8000760:	6013      	str	r3, [r2, #0]
			   UpdateBuffer(mode, timeGreen);
 8000762:	4b66      	ldr	r3, [pc, #408]	; (80008fc <fsm_man_run+0x258>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a6a      	ldr	r2, [pc, #424]	; (8000910 <fsm_man_run+0x26c>)
 8000768:	6812      	ldr	r2, [r2, #0]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fc3b 	bl	8000fe8 <UpdateBuffer>
			   SCH_Add_Task(LED7, 0, 250);
 8000772:	22fa      	movs	r2, #250	; 0xfa
 8000774:	2100      	movs	r1, #0
 8000776:	4863      	ldr	r0, [pc, #396]	; (8000904 <fsm_man_run+0x260>)
 8000778:	f000 fdd6 	bl	8001328 <SCH_Add_Task>
			   SCH_Add_Task(BlinkRED, 0, 500);
 800077c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000780:	2100      	movs	r1, #0
 8000782:	4865      	ldr	r0, [pc, #404]	; (8000918 <fsm_man_run+0x274>)
 8000784:	f000 fdd0 	bl	8001328 <SCH_Add_Task>
			   SCH_Add_Task(ResetStatus, 7000, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	f641 3158 	movw	r1, #7000	; 0x1b58
 800078e:	485f      	ldr	r0, [pc, #380]	; (800090c <fsm_man_run+0x268>)
 8000790:	f000 fdca 	bl	8001328 <SCH_Add_Task>
		if(IsModeButtonPressed(2) == 1){
 8000794:	2002      	movs	r0, #2
 8000796:	f7ff fcd9 	bl	800014c <IsModeButtonPressed>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	f040 8145 	bne.w	8000a2c <fsm_man_run+0x388>
			SCH_Init();
 80007a2:	f000 fd81 	bl	80012a8 <SCH_Init>
			status = RED1_GREEN2;
 80007a6:	4b54      	ldr	r3, [pc, #336]	; (80008f8 <fsm_man_run+0x254>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
			wait = 0;
 80007ac:	495b      	ldr	r1, [pc, #364]	; (800091c <fsm_man_run+0x278>)
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	f04f 0300 	mov.w	r3, #0
 80007b6:	e9c1 2300 	strd	r2, r3, [r1]
			count = timeRed;
 80007ba:	4b51      	ldr	r3, [pc, #324]	; (8000900 <fsm_man_run+0x25c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a55      	ldr	r2, [pc, #340]	; (8000914 <fsm_man_run+0x270>)
 80007c0:	6013      	str	r3, [r2, #0]
			UpdateBuffer(mode, count);
 80007c2:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <fsm_man_run+0x258>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a53      	ldr	r2, [pc, #332]	; (8000914 <fsm_man_run+0x270>)
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	4611      	mov	r1, r2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fc0b 	bl	8000fe8 <UpdateBuffer>
			SCH_Add_Task(LED7, 0, 250);
 80007d2:	22fa      	movs	r2, #250	; 0xfa
 80007d4:	2100      	movs	r1, #0
 80007d6:	484b      	ldr	r0, [pc, #300]	; (8000904 <fsm_man_run+0x260>)
 80007d8:	f000 fda6 	bl	8001328 <SCH_Add_Task>
		break;
 80007dc:	e126      	b.n	8000a2c <fsm_man_run+0x388>
		UpdateBuffer(mode, timeAmber);
 80007de:	4b47      	ldr	r3, [pc, #284]	; (80008fc <fsm_man_run+0x258>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a4f      	ldr	r2, [pc, #316]	; (8000920 <fsm_man_run+0x27c>)
 80007e4:	6812      	ldr	r2, [r2, #0]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fbfd 	bl	8000fe8 <UpdateBuffer>
		if(IsModeButtonPressed(0) == 1){
 80007ee:	2000      	movs	r0, #0
 80007f0:	f7ff fcac 	bl	800014c <IsModeButtonPressed>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d11e      	bne.n	8000838 <fsm_man_run+0x194>
			SCH_Init();
 80007fa:	f000 fd55 	bl	80012a8 <SCH_Init>
			SCH_Add_Task(LED7, 0, 250);
 80007fe:	22fa      	movs	r2, #250	; 0xfa
 8000800:	2100      	movs	r1, #0
 8000802:	4840      	ldr	r0, [pc, #256]	; (8000904 <fsm_man_run+0x260>)
 8000804:	f000 fd90 	bl	8001328 <SCH_Add_Task>
			SCH_Add_Task(BlinkGREEN, 0, 500);
 8000808:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800080c:	2100      	movs	r1, #0
 800080e:	4845      	ldr	r0, [pc, #276]	; (8000924 <fsm_man_run+0x280>)
 8000810:	f000 fd8a 	bl	8001328 <SCH_Add_Task>
			mode = 4;
 8000814:	4b39      	ldr	r3, [pc, #228]	; (80008fc <fsm_man_run+0x258>)
 8000816:	2204      	movs	r2, #4
 8000818:	601a      	str	r2, [r3, #0]
			UpdateBuffer(mode, TIME_GREEN);
 800081a:	4b38      	ldr	r3, [pc, #224]	; (80008fc <fsm_man_run+0x258>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2103      	movs	r1, #3
 8000820:	4618      	mov	r0, r3
 8000822:	f000 fbe1 	bl	8000fe8 <UpdateBuffer>
			SCH_Add_Task(ResetStatus, 7000, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	f641 3158 	movw	r1, #7000	; 0x1b58
 800082c:	4837      	ldr	r0, [pc, #220]	; (800090c <fsm_man_run+0x268>)
 800082e:	f000 fd7b 	bl	8001328 <SCH_Add_Task>
			status = MAN_GREEN;
 8000832:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <fsm_man_run+0x254>)
 8000834:	2208      	movs	r2, #8
 8000836:	601a      	str	r2, [r3, #0]
		if(IsModeButtonPressed(1) == 1){
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff fc87 	bl	800014c <IsModeButtonPressed>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	d134      	bne.n	80008ae <fsm_man_run+0x20a>
			if(timeRed < 99 && timeRed < 99 && timeGreen < 99){
 8000844:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <fsm_man_run+0x25c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b62      	cmp	r3, #98	; 0x62
 800084a:	dc30      	bgt.n	80008ae <fsm_man_run+0x20a>
 800084c:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <fsm_man_run+0x25c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b62      	cmp	r3, #98	; 0x62
 8000852:	dc2c      	bgt.n	80008ae <fsm_man_run+0x20a>
 8000854:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <fsm_man_run+0x26c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b62      	cmp	r3, #98	; 0x62
 800085a:	dc28      	bgt.n	80008ae <fsm_man_run+0x20a>
			   SCH_Init();
 800085c:	f000 fd24 	bl	80012a8 <SCH_Init>
			   timeAmber++;
 8000860:	4b2f      	ldr	r3, [pc, #188]	; (8000920 <fsm_man_run+0x27c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	4a2e      	ldr	r2, [pc, #184]	; (8000920 <fsm_man_run+0x27c>)
 8000868:	6013      	str	r3, [r2, #0]
			   timeRed++;
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <fsm_man_run+0x25c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	3301      	adds	r3, #1
 8000870:	4a23      	ldr	r2, [pc, #140]	; (8000900 <fsm_man_run+0x25c>)
 8000872:	6013      	str	r3, [r2, #0]
			   count = timeRed;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <fsm_man_run+0x25c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a26      	ldr	r2, [pc, #152]	; (8000914 <fsm_man_run+0x270>)
 800087a:	6013      	str	r3, [r2, #0]
			   UpdateBuffer(mode, timeGreen);
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <fsm_man_run+0x258>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a23      	ldr	r2, [pc, #140]	; (8000910 <fsm_man_run+0x26c>)
 8000882:	6812      	ldr	r2, [r2, #0]
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fbae 	bl	8000fe8 <UpdateBuffer>
			   SCH_Add_Task(LED7, 0, 250);
 800088c:	22fa      	movs	r2, #250	; 0xfa
 800088e:	2100      	movs	r1, #0
 8000890:	481c      	ldr	r0, [pc, #112]	; (8000904 <fsm_man_run+0x260>)
 8000892:	f000 fd49 	bl	8001328 <SCH_Add_Task>
			   SCH_Add_Task(BlinkRED, 0, 500);
 8000896:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800089a:	2100      	movs	r1, #0
 800089c:	481e      	ldr	r0, [pc, #120]	; (8000918 <fsm_man_run+0x274>)
 800089e:	f000 fd43 	bl	8001328 <SCH_Add_Task>
   			   SCH_Add_Task(ResetStatus, 7000, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f641 3158 	movw	r1, #7000	; 0x1b58
 80008a8:	4818      	ldr	r0, [pc, #96]	; (800090c <fsm_man_run+0x268>)
 80008aa:	f000 fd3d 	bl	8001328 <SCH_Add_Task>
		if(IsModeButtonPressed(2) == 1){
 80008ae:	2002      	movs	r0, #2
 80008b0:	f7ff fc4c 	bl	800014c <IsModeButtonPressed>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	f040 80ba 	bne.w	8000a30 <fsm_man_run+0x38c>
			SCH_Init();
 80008bc:	f000 fcf4 	bl	80012a8 <SCH_Init>
			status = RED1_GREEN2;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <fsm_man_run+0x254>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]
			wait = 0;
 80008c6:	4915      	ldr	r1, [pc, #84]	; (800091c <fsm_man_run+0x278>)
 80008c8:	f04f 0200 	mov.w	r2, #0
 80008cc:	f04f 0300 	mov.w	r3, #0
 80008d0:	e9c1 2300 	strd	r2, r3, [r1]
			count = timeRed;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <fsm_man_run+0x25c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <fsm_man_run+0x270>)
 80008da:	6013      	str	r3, [r2, #0]
			UpdateBuffer(mode, count);
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <fsm_man_run+0x258>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <fsm_man_run+0x270>)
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fb7e 	bl	8000fe8 <UpdateBuffer>
			SCH_Add_Task(LED7, 0, 250);
 80008ec:	22fa      	movs	r2, #250	; 0xfa
 80008ee:	2100      	movs	r1, #0
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <fsm_man_run+0x260>)
 80008f2:	f000 fd19 	bl	8001328 <SCH_Add_Task>
		break;
 80008f6:	e09b      	b.n	8000a30 <fsm_man_run+0x38c>
 80008f8:	20000080 	.word	0x20000080
 80008fc:	20000034 	.word	0x20000034
 8000900:	2000003c 	.word	0x2000003c
 8000904:	08000a61 	.word	0x08000a61
 8000908:	080018e1 	.word	0x080018e1
 800090c:	08000ac5 	.word	0x08000ac5
 8000910:	20000044 	.word	0x20000044
 8000914:	20000038 	.word	0x20000038
 8000918:	0800189d 	.word	0x0800189d
 800091c:	20000088 	.word	0x20000088
 8000920:	20000040 	.word	0x20000040
 8000924:	08001925 	.word	0x08001925
		UpdateBuffer(mode, timeGreen);
 8000928:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <fsm_man_run+0x398>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a44      	ldr	r2, [pc, #272]	; (8000a40 <fsm_man_run+0x39c>)
 800092e:	6812      	ldr	r2, [r2, #0]
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f000 fb58 	bl	8000fe8 <UpdateBuffer>
		if(IsModeButtonPressed(1) == 1){
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fc07 	bl	800014c <IsModeButtonPressed>
 800093e:	4603      	mov	r3, r0
 8000940:	2b01      	cmp	r3, #1
 8000942:	d134      	bne.n	80009ae <fsm_man_run+0x30a>
			if(timeRed < 99 && timeRed < 99 && timeGreen < 99){
 8000944:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <fsm_man_run+0x3a0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b62      	cmp	r3, #98	; 0x62
 800094a:	dc30      	bgt.n	80009ae <fsm_man_run+0x30a>
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <fsm_man_run+0x3a0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b62      	cmp	r3, #98	; 0x62
 8000952:	dc2c      	bgt.n	80009ae <fsm_man_run+0x30a>
 8000954:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <fsm_man_run+0x39c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b62      	cmp	r3, #98	; 0x62
 800095a:	dc28      	bgt.n	80009ae <fsm_man_run+0x30a>
			   SCH_Init();
 800095c:	f000 fca4 	bl	80012a8 <SCH_Init>
			   timeGreen++;
 8000960:	4b37      	ldr	r3, [pc, #220]	; (8000a40 <fsm_man_run+0x39c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a36      	ldr	r2, [pc, #216]	; (8000a40 <fsm_man_run+0x39c>)
 8000968:	6013      	str	r3, [r2, #0]
			   timeRed++;
 800096a:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <fsm_man_run+0x3a0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	4a34      	ldr	r2, [pc, #208]	; (8000a44 <fsm_man_run+0x3a0>)
 8000972:	6013      	str	r3, [r2, #0]
			   count = timeRed;
 8000974:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <fsm_man_run+0x3a0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a33      	ldr	r2, [pc, #204]	; (8000a48 <fsm_man_run+0x3a4>)
 800097a:	6013      	str	r3, [r2, #0]
			   UpdateBuffer(mode, timeGreen);
 800097c:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <fsm_man_run+0x398>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a2f      	ldr	r2, [pc, #188]	; (8000a40 <fsm_man_run+0x39c>)
 8000982:	6812      	ldr	r2, [r2, #0]
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fb2e 	bl	8000fe8 <UpdateBuffer>
			   SCH_Add_Task(LED7, 0, 250);
 800098c:	22fa      	movs	r2, #250	; 0xfa
 800098e:	2100      	movs	r1, #0
 8000990:	482e      	ldr	r0, [pc, #184]	; (8000a4c <fsm_man_run+0x3a8>)
 8000992:	f000 fcc9 	bl	8001328 <SCH_Add_Task>
			   SCH_Add_Task(BlinkRED, 0, 500);
 8000996:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800099a:	2100      	movs	r1, #0
 800099c:	482c      	ldr	r0, [pc, #176]	; (8000a50 <fsm_man_run+0x3ac>)
 800099e:	f000 fcc3 	bl	8001328 <SCH_Add_Task>
			   SCH_Add_Task(ResetStatus, 7000, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f641 3158 	movw	r1, #7000	; 0x1b58
 80009a8:	482a      	ldr	r0, [pc, #168]	; (8000a54 <fsm_man_run+0x3b0>)
 80009aa:	f000 fcbd 	bl	8001328 <SCH_Add_Task>
		if(IsModeButtonPressed(2) == 1){
 80009ae:	2002      	movs	r0, #2
 80009b0:	f7ff fbcc 	bl	800014c <IsModeButtonPressed>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d11c      	bne.n	80009f4 <fsm_man_run+0x350>
			SCH_Init();
 80009ba:	f000 fc75 	bl	80012a8 <SCH_Init>
			status = RED1_GREEN2;
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <fsm_man_run+0x3b4>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
			wait = 0;
 80009c4:	4925      	ldr	r1, [pc, #148]	; (8000a5c <fsm_man_run+0x3b8>)
 80009c6:	f04f 0200 	mov.w	r2, #0
 80009ca:	f04f 0300 	mov.w	r3, #0
 80009ce:	e9c1 2300 	strd	r2, r3, [r1]
			count = timeRed;
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <fsm_man_run+0x3a0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <fsm_man_run+0x3a4>)
 80009d8:	6013      	str	r3, [r2, #0]
			UpdateBuffer(mode, count);
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <fsm_man_run+0x398>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a1a      	ldr	r2, [pc, #104]	; (8000a48 <fsm_man_run+0x3a4>)
 80009e0:	6812      	ldr	r2, [r2, #0]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 faff 	bl	8000fe8 <UpdateBuffer>
			SCH_Add_Task(LED7, 0, 250);
 80009ea:	22fa      	movs	r2, #250	; 0xfa
 80009ec:	2100      	movs	r1, #0
 80009ee:	4817      	ldr	r0, [pc, #92]	; (8000a4c <fsm_man_run+0x3a8>)
 80009f0:	f000 fc9a 	bl	8001328 <SCH_Add_Task>
		if(IsModeButtonPressed(0) == 1){
 80009f4:	2000      	movs	r0, #0
 80009f6:	f7ff fba9 	bl	800014c <IsModeButtonPressed>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d119      	bne.n	8000a34 <fsm_man_run+0x390>
			SCH_Init();
 8000a00:	f000 fc52 	bl	80012a8 <SCH_Init>
			status = INIT;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <fsm_man_run+0x3b4>)
 8000a06:	2205      	movs	r2, #5
 8000a08:	601a      	str	r2, [r3, #0]
			count = TIME_RED;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <fsm_man_run+0x3a4>)
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	601a      	str	r2, [r3, #0]
			mode = 1;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <fsm_man_run+0x398>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
			UpdateBuffer(mode, count);
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <fsm_man_run+0x398>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <fsm_man_run+0x3a4>)
 8000a1c:	6812      	ldr	r2, [r2, #0]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 fae1 	bl	8000fe8 <UpdateBuffer>
		break;
 8000a26:	e005      	b.n	8000a34 <fsm_man_run+0x390>
		break;
 8000a28:	bf00      	nop
 8000a2a:	e004      	b.n	8000a36 <fsm_man_run+0x392>
		break;
 8000a2c:	bf00      	nop
 8000a2e:	e002      	b.n	8000a36 <fsm_man_run+0x392>
		break;
 8000a30:	bf00      	nop
 8000a32:	e000      	b.n	8000a36 <fsm_man_run+0x392>
		break;
 8000a34:	bf00      	nop
	}
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000034 	.word	0x20000034
 8000a40:	20000044 	.word	0x20000044
 8000a44:	2000003c 	.word	0x2000003c
 8000a48:	20000038 	.word	0x20000038
 8000a4c:	08000a61 	.word	0x08000a61
 8000a50:	0800189d 	.word	0x0800189d
 8000a54:	08000ac5 	.word	0x08000ac5
 8000a58:	20000080 	.word	0x20000080
 8000a5c:	20000088 	.word	0x20000088

08000a60 <LED7>:
int timeRed = TIME_RED;
int timeAmber = TIME_AMBER;
int timeGreen = TIME_GREEN;
uint64_t wait = 0;
int wait1 = 0;
void LED7(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	if(index == 4) {
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <LED7+0x54>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d117      	bne.n	8000a9c <LED7+0x3c>
		index = 0;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <LED7+0x54>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
		count--;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <LED7+0x58>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <LED7+0x58>)
 8000a7a:	6013      	str	r3, [r2, #0]
		if(count == 0){
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <LED7+0x58>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d103      	bne.n	8000a8c <LED7+0x2c>
			count = timeRed;
 8000a84:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <LED7+0x5c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <LED7+0x58>)
 8000a8a:	6013      	str	r3, [r2, #0]
		}
		UpdateBuffer(mode, count);
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <LED7+0x60>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <LED7+0x58>)
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 faa6 	bl	8000fe8 <UpdateBuffer>
	}
    Update7SEG(index);
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <LED7+0x54>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fa15 	bl	8000ed0 <Update7SEG>
    index++;
 8000aa6:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <LED7+0x54>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a01      	ldr	r2, [pc, #4]	; (8000ab4 <LED7+0x54>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000084 	.word	0x20000084
 8000ab8:	20000038 	.word	0x20000038
 8000abc:	2000003c 	.word	0x2000003c
 8000ac0:	20000034 	.word	0x20000034

08000ac4 <ResetStatus>:
void ResetStatus(void){
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
	status = INIT;
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <ResetStatus+0x18>)
 8000aca:	2205      	movs	r2, #5
 8000acc:	601a      	str	r2, [r3, #0]
	mode = 1;
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <ResetStatus+0x1c>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
//	SCH_Add_Task(LED7, 0, 250);
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	20000080 	.word	0x20000080
 8000ae0:	20000034 	.word	0x20000034

08000ae4 <display7SEG>:
 *  Created on: Oct 29, 2024
 *      Author: Admin
 */
#include "main.h"
#include "led7_segment.h"
void display7SEG(int num){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b09      	cmp	r3, #9
 8000af0:	f200 81be 	bhi.w	8000e70 <display7SEG+0x38c>
 8000af4:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <display7SEG+0x18>)
 8000af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afa:	bf00      	nop
 8000afc:	08000b25 	.word	0x08000b25
 8000b00:	08000b79 	.word	0x08000b79
 8000b04:	08000bcd 	.word	0x08000bcd
 8000b08:	08000c21 	.word	0x08000c21
 8000b0c:	08000c75 	.word	0x08000c75
 8000b10:	08000cc9 	.word	0x08000cc9
 8000b14:	08000d1d 	.word	0x08000d1d
 8000b18:	08000d71 	.word	0x08000d71
 8000b1c:	08000dc5 	.word	0x08000dc5
 8000b20:	08000e19 	.word	0x08000e19
		switch(num){
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	48d0      	ldr	r0, [pc, #832]	; (8000e6c <display7SEG+0x388>)
 8000b2a:	f001 fa68 	bl	8001ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b34:	48cd      	ldr	r0, [pc, #820]	; (8000e6c <display7SEG+0x388>)
 8000b36:	f001 fa62 	bl	8001ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b40:	48ca      	ldr	r0, [pc, #808]	; (8000e6c <display7SEG+0x388>)
 8000b42:	f001 fa5c 	bl	8001ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4c:	48c7      	ldr	r0, [pc, #796]	; (8000e6c <display7SEG+0x388>)
 8000b4e:	f001 fa56 	bl	8001ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b58:	48c4      	ldr	r0, [pc, #784]	; (8000e6c <display7SEG+0x388>)
 8000b5a:	f001 fa50 	bl	8001ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b64:	48c1      	ldr	r0, [pc, #772]	; (8000e6c <display7SEG+0x388>)
 8000b66:	f001 fa4a 	bl	8001ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b70:	48be      	ldr	r0, [pc, #760]	; (8000e6c <display7SEG+0x388>)
 8000b72:	f001 fa44 	bl	8001ffe <HAL_GPIO_WritePin>
			break;
 8000b76:	e1a5      	b.n	8000ec4 <display7SEG+0x3e0>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	48bb      	ldr	r0, [pc, #748]	; (8000e6c <display7SEG+0x388>)
 8000b7e:	f001 fa3e 	bl	8001ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b88:	48b8      	ldr	r0, [pc, #736]	; (8000e6c <display7SEG+0x388>)
 8000b8a:	f001 fa38 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b94:	48b5      	ldr	r0, [pc, #724]	; (8000e6c <display7SEG+0x388>)
 8000b96:	f001 fa32 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba0:	48b2      	ldr	r0, [pc, #712]	; (8000e6c <display7SEG+0x388>)
 8000ba2:	f001 fa2c 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bac:	48af      	ldr	r0, [pc, #700]	; (8000e6c <display7SEG+0x388>)
 8000bae:	f001 fa26 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb8:	48ac      	ldr	r0, [pc, #688]	; (8000e6c <display7SEG+0x388>)
 8000bba:	f001 fa20 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc4:	48a9      	ldr	r0, [pc, #676]	; (8000e6c <display7SEG+0x388>)
 8000bc6:	f001 fa1a 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  break;
 8000bca:	e17b      	b.n	8000ec4 <display7SEG+0x3e0>

		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2180      	movs	r1, #128	; 0x80
 8000bd0:	48a6      	ldr	r0, [pc, #664]	; (8000e6c <display7SEG+0x388>)
 8000bd2:	f001 fa14 	bl	8001ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	48a3      	ldr	r0, [pc, #652]	; (8000e6c <display7SEG+0x388>)
 8000bde:	f001 fa0e 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be8:	48a0      	ldr	r0, [pc, #640]	; (8000e6c <display7SEG+0x388>)
 8000bea:	f001 fa08 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf4:	489d      	ldr	r0, [pc, #628]	; (8000e6c <display7SEG+0x388>)
 8000bf6:	f001 fa02 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c00:	489a      	ldr	r0, [pc, #616]	; (8000e6c <display7SEG+0x388>)
 8000c02:	f001 f9fc 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0c:	4897      	ldr	r0, [pc, #604]	; (8000e6c <display7SEG+0x388>)
 8000c0e:	f001 f9f6 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c18:	4894      	ldr	r0, [pc, #592]	; (8000e6c <display7SEG+0x388>)
 8000c1a:	f001 f9f0 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  break;
 8000c1e:	e151      	b.n	8000ec4 <display7SEG+0x3e0>

		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2180      	movs	r1, #128	; 0x80
 8000c24:	4891      	ldr	r0, [pc, #580]	; (8000e6c <display7SEG+0x388>)
 8000c26:	f001 f9ea 	bl	8001ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c30:	488e      	ldr	r0, [pc, #568]	; (8000e6c <display7SEG+0x388>)
 8000c32:	f001 f9e4 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3c:	488b      	ldr	r0, [pc, #556]	; (8000e6c <display7SEG+0x388>)
 8000c3e:	f001 f9de 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c48:	4888      	ldr	r0, [pc, #544]	; (8000e6c <display7SEG+0x388>)
 8000c4a:	f001 f9d8 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c54:	4885      	ldr	r0, [pc, #532]	; (8000e6c <display7SEG+0x388>)
 8000c56:	f001 f9d2 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c60:	4882      	ldr	r0, [pc, #520]	; (8000e6c <display7SEG+0x388>)
 8000c62:	f001 f9cc 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6c:	487f      	ldr	r0, [pc, #508]	; (8000e6c <display7SEG+0x388>)
 8000c6e:	f001 f9c6 	bl	8001ffe <HAL_GPIO_WritePin>
	  	  	  	  break;
 8000c72:	e127      	b.n	8000ec4 <display7SEG+0x3e0>

	    case 4:
	    	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2180      	movs	r1, #128	; 0x80
 8000c78:	487c      	ldr	r0, [pc, #496]	; (8000e6c <display7SEG+0x388>)
 8000c7a:	f001 f9c0 	bl	8001ffe <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c84:	4879      	ldr	r0, [pc, #484]	; (8000e6c <display7SEG+0x388>)
 8000c86:	f001 f9ba 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c90:	4876      	ldr	r0, [pc, #472]	; (8000e6c <display7SEG+0x388>)
 8000c92:	f001 f9b4 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9c:	4873      	ldr	r0, [pc, #460]	; (8000e6c <display7SEG+0x388>)
 8000c9e:	f001 f9ae 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca8:	4870      	ldr	r0, [pc, #448]	; (8000e6c <display7SEG+0x388>)
 8000caa:	f001 f9a8 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb4:	486d      	ldr	r0, [pc, #436]	; (8000e6c <display7SEG+0x388>)
 8000cb6:	f001 f9a2 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc0:	486a      	ldr	r0, [pc, #424]	; (8000e6c <display7SEG+0x388>)
 8000cc2:	f001 f99c 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  break;
 8000cc6:	e0fd      	b.n	8000ec4 <display7SEG+0x3e0>

	    case 5:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	4867      	ldr	r0, [pc, #412]	; (8000e6c <display7SEG+0x388>)
 8000cce:	f001 f996 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd8:	4864      	ldr	r0, [pc, #400]	; (8000e6c <display7SEG+0x388>)
 8000cda:	f001 f990 	bl	8001ffe <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce4:	4861      	ldr	r0, [pc, #388]	; (8000e6c <display7SEG+0x388>)
 8000ce6:	f001 f98a 	bl	8001ffe <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf0:	485e      	ldr	r0, [pc, #376]	; (8000e6c <display7SEG+0x388>)
 8000cf2:	f001 f984 	bl	8001ffe <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cfc:	485b      	ldr	r0, [pc, #364]	; (8000e6c <display7SEG+0x388>)
 8000cfe:	f001 f97e 	bl	8001ffe <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d08:	4858      	ldr	r0, [pc, #352]	; (8000e6c <display7SEG+0x388>)
 8000d0a:	f001 f978 	bl	8001ffe <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d14:	4855      	ldr	r0, [pc, #340]	; (8000e6c <display7SEG+0x388>)
 8000d16:	f001 f972 	bl	8001ffe <HAL_GPIO_WritePin>
	  		  	  break;
 8000d1a:	e0d3      	b.n	8000ec4 <display7SEG+0x3e0>

		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	4852      	ldr	r0, [pc, #328]	; (8000e6c <display7SEG+0x388>)
 8000d22:	f001 f96c 	bl	8001ffe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2c:	484f      	ldr	r0, [pc, #316]	; (8000e6c <display7SEG+0x388>)
 8000d2e:	f001 f966 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d38:	484c      	ldr	r0, [pc, #304]	; (8000e6c <display7SEG+0x388>)
 8000d3a:	f001 f960 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d44:	4849      	ldr	r0, [pc, #292]	; (8000e6c <display7SEG+0x388>)
 8000d46:	f001 f95a 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d50:	4846      	ldr	r0, [pc, #280]	; (8000e6c <display7SEG+0x388>)
 8000d52:	f001 f954 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5c:	4843      	ldr	r0, [pc, #268]	; (8000e6c <display7SEG+0x388>)
 8000d5e:	f001 f94e 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d68:	4840      	ldr	r0, [pc, #256]	; (8000e6c <display7SEG+0x388>)
 8000d6a:	f001 f948 	bl	8001ffe <HAL_GPIO_WritePin>
  		  	  break;
 8000d6e:	e0a9      	b.n	8000ec4 <display7SEG+0x3e0>

		case 7:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2180      	movs	r1, #128	; 0x80
 8000d74:	483d      	ldr	r0, [pc, #244]	; (8000e6c <display7SEG+0x388>)
 8000d76:	f001 f942 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d80:	483a      	ldr	r0, [pc, #232]	; (8000e6c <display7SEG+0x388>)
 8000d82:	f001 f93c 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8c:	4837      	ldr	r0, [pc, #220]	; (8000e6c <display7SEG+0x388>)
 8000d8e:	f001 f936 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d98:	4834      	ldr	r0, [pc, #208]	; (8000e6c <display7SEG+0x388>)
 8000d9a:	f001 f930 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da4:	4831      	ldr	r0, [pc, #196]	; (8000e6c <display7SEG+0x388>)
 8000da6:	f001 f92a 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db0:	482e      	ldr	r0, [pc, #184]	; (8000e6c <display7SEG+0x388>)
 8000db2:	f001 f924 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbc:	482b      	ldr	r0, [pc, #172]	; (8000e6c <display7SEG+0x388>)
 8000dbe:	f001 f91e 	bl	8001ffe <HAL_GPIO_WritePin>
				  			  		  	  break;
 8000dc2:	e07f      	b.n	8000ec4 <display7SEG+0x3e0>
		case 8:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2180      	movs	r1, #128	; 0x80
 8000dc8:	4828      	ldr	r0, [pc, #160]	; (8000e6c <display7SEG+0x388>)
 8000dca:	f001 f918 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd4:	4825      	ldr	r0, [pc, #148]	; (8000e6c <display7SEG+0x388>)
 8000dd6:	f001 f912 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de0:	4822      	ldr	r0, [pc, #136]	; (8000e6c <display7SEG+0x388>)
 8000de2:	f001 f90c 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dec:	481f      	ldr	r0, [pc, #124]	; (8000e6c <display7SEG+0x388>)
 8000dee:	f001 f906 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df8:	481c      	ldr	r0, [pc, #112]	; (8000e6c <display7SEG+0x388>)
 8000dfa:	f001 f900 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e04:	4819      	ldr	r0, [pc, #100]	; (8000e6c <display7SEG+0x388>)
 8000e06:	f001 f8fa 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e10:	4816      	ldr	r0, [pc, #88]	; (8000e6c <display7SEG+0x388>)
 8000e12:	f001 f8f4 	bl	8001ffe <HAL_GPIO_WritePin>
				break;
 8000e16:	e055      	b.n	8000ec4 <display7SEG+0x3e0>
		case 9:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	4813      	ldr	r0, [pc, #76]	; (8000e6c <display7SEG+0x388>)
 8000e1e:	f001 f8ee 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e28:	4810      	ldr	r0, [pc, #64]	; (8000e6c <display7SEG+0x388>)
 8000e2a:	f001 f8e8 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <display7SEG+0x388>)
 8000e36:	f001 f8e2 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e40:	480a      	ldr	r0, [pc, #40]	; (8000e6c <display7SEG+0x388>)
 8000e42:	f001 f8dc 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4c:	4807      	ldr	r0, [pc, #28]	; (8000e6c <display7SEG+0x388>)
 8000e4e:	f001 f8d6 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <display7SEG+0x388>)
 8000e5a:	f001 f8d0 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e64:	4801      	ldr	r0, [pc, #4]	; (8000e6c <display7SEG+0x388>)
 8000e66:	f001 f8ca 	bl	8001ffe <HAL_GPIO_WritePin>
				break;
 8000e6a:	e02b      	b.n	8000ec4 <display7SEG+0x3e0>
 8000e6c:	40010800 	.word	0x40010800
		default:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	4815      	ldr	r0, [pc, #84]	; (8000ecc <display7SEG+0x3e8>)
 8000e76:	f001 f8c2 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e80:	4812      	ldr	r0, [pc, #72]	; (8000ecc <display7SEG+0x3e8>)
 8000e82:	f001 f8bc 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8c:	480f      	ldr	r0, [pc, #60]	; (8000ecc <display7SEG+0x3e8>)
 8000e8e:	f001 f8b6 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <display7SEG+0x3e8>)
 8000e9a:	f001 f8b0 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <display7SEG+0x3e8>)
 8000ea6:	f001 f8aa 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <display7SEG+0x3e8>)
 8000eb2:	f001 f8a4 	bl	8001ffe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <display7SEG+0x3e8>)
 8000ebe:	f001 f89e 	bl	8001ffe <HAL_GPIO_WritePin>
				break;
 8000ec2:	bf00      	nop
		}
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <Update7SEG>:

void Update7SEG(int cnt){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d87a      	bhi.n	8000fd4 <Update7SEG+0x104>
 8000ede:	a201      	add	r2, pc, #4	; (adr r2, 8000ee4 <Update7SEG+0x14>)
 8000ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee4:	08000ef5 	.word	0x08000ef5
 8000ee8:	08000f2d 	.word	0x08000f2d
 8000eec:	08000f65 	.word	0x08000f65
 8000ef0:	08000f9d 	.word	0x08000f9d
	switch(cnt){
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4839      	ldr	r0, [pc, #228]	; (8000fe0 <Update7SEG+0x110>)
 8000efa:	f001 f880 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2102      	movs	r1, #2
 8000f02:	4837      	ldr	r0, [pc, #220]	; (8000fe0 <Update7SEG+0x110>)
 8000f04:	f001 f87b 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	4834      	ldr	r0, [pc, #208]	; (8000fe0 <Update7SEG+0x110>)
 8000f0e:	f001 f876 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2108      	movs	r1, #8
 8000f16:	4832      	ldr	r0, [pc, #200]	; (8000fe0 <Update7SEG+0x110>)
 8000f18:	f001 f871 	bl	8001ffe <HAL_GPIO_WritePin>
		display7SEG(led_buffer[cnt]);
 8000f1c:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <Update7SEG+0x114>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fddd 	bl	8000ae4 <display7SEG>
		break;
 8000f2a:	e054      	b.n	8000fd6 <Update7SEG+0x106>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2101      	movs	r1, #1
 8000f30:	482b      	ldr	r0, [pc, #172]	; (8000fe0 <Update7SEG+0x110>)
 8000f32:	f001 f864 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4829      	ldr	r0, [pc, #164]	; (8000fe0 <Update7SEG+0x110>)
 8000f3c:	f001 f85f 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2104      	movs	r1, #4
 8000f44:	4826      	ldr	r0, [pc, #152]	; (8000fe0 <Update7SEG+0x110>)
 8000f46:	f001 f85a 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2108      	movs	r1, #8
 8000f4e:	4824      	ldr	r0, [pc, #144]	; (8000fe0 <Update7SEG+0x110>)
 8000f50:	f001 f855 	bl	8001ffe <HAL_GPIO_WritePin>
		display7SEG(led_buffer[cnt]);
 8000f54:	4a23      	ldr	r2, [pc, #140]	; (8000fe4 <Update7SEG+0x114>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fdc1 	bl	8000ae4 <display7SEG>
		break;
 8000f62:	e038      	b.n	8000fd6 <Update7SEG+0x106>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2101      	movs	r1, #1
 8000f68:	481d      	ldr	r0, [pc, #116]	; (8000fe0 <Update7SEG+0x110>)
 8000f6a:	f001 f848 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2102      	movs	r1, #2
 8000f72:	481b      	ldr	r0, [pc, #108]	; (8000fe0 <Update7SEG+0x110>)
 8000f74:	f001 f843 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <Update7SEG+0x110>)
 8000f7e:	f001 f83e 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2108      	movs	r1, #8
 8000f86:	4816      	ldr	r0, [pc, #88]	; (8000fe0 <Update7SEG+0x110>)
 8000f88:	f001 f839 	bl	8001ffe <HAL_GPIO_WritePin>
		display7SEG(led_buffer[cnt]);
 8000f8c:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <Update7SEG+0x114>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fda5 	bl	8000ae4 <display7SEG>
		break;
 8000f9a:	e01c      	b.n	8000fd6 <Update7SEG+0x106>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	480f      	ldr	r0, [pc, #60]	; (8000fe0 <Update7SEG+0x110>)
 8000fa2:	f001 f82c 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2102      	movs	r1, #2
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <Update7SEG+0x110>)
 8000fac:	f001 f827 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <Update7SEG+0x110>)
 8000fb6:	f001 f822 	bl	8001ffe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <Update7SEG+0x110>)
 8000fc0:	f001 f81d 	bl	8001ffe <HAL_GPIO_WritePin>
		display7SEG(led_buffer[cnt]);
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <Update7SEG+0x114>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fd89 	bl	8000ae4 <display7SEG>
	break;
 8000fd2:	e000      	b.n	8000fd6 <Update7SEG+0x106>

	default:
		break;
 8000fd4:	bf00      	nop
	}
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	20000094 	.word	0x20000094

08000fe8 <UpdateBuffer>:

void UpdateBuffer(int m, int time){
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	led_buffer[0] = m/10;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a18      	ldr	r2, [pc, #96]	; (8001058 <UpdateBuffer+0x70>)
 8000ff6:	fb82 1203 	smull	r1, r2, r2, r3
 8000ffa:	1092      	asrs	r2, r2, #2
 8000ffc:	17db      	asrs	r3, r3, #31
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	4a16      	ldr	r2, [pc, #88]	; (800105c <UpdateBuffer+0x74>)
 8001002:	6013      	str	r3, [r2, #0]
	led_buffer[1] = m%10;
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <UpdateBuffer+0x70>)
 8001008:	fb83 2301 	smull	r2, r3, r3, r1
 800100c:	109a      	asrs	r2, r3, #2
 800100e:	17cb      	asrs	r3, r1, #31
 8001010:	1ad2      	subs	r2, r2, r3
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	1aca      	subs	r2, r1, r3
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <UpdateBuffer+0x74>)
 800101e:	605a      	str	r2, [r3, #4]
	led_buffer[2] = time/10;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <UpdateBuffer+0x70>)
 8001024:	fb82 1203 	smull	r1, r2, r2, r3
 8001028:	1092      	asrs	r2, r2, #2
 800102a:	17db      	asrs	r3, r3, #31
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <UpdateBuffer+0x74>)
 8001030:	6093      	str	r3, [r2, #8]
	led_buffer[3] = time%10;
 8001032:	6839      	ldr	r1, [r7, #0]
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <UpdateBuffer+0x70>)
 8001036:	fb83 2301 	smull	r2, r3, r3, r1
 800103a:	109a      	asrs	r2, r3, #2
 800103c:	17cb      	asrs	r3, r1, #31
 800103e:	1ad2      	subs	r2, r2, r3
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	1aca      	subs	r2, r1, r3
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <UpdateBuffer+0x74>)
 800104c:	60da      	str	r2, [r3, #12]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	66666667 	.word	0x66666667
 800105c:	20000094 	.word	0x20000094

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001064:	f000 fcca 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001068:	f000 f816 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800106c:	f000 f850 	bl	8001110 <MX_TIM2_Init>
  MX_GPIO_Init();
 8001070:	f000 f89a 	bl	80011a8 <MX_GPIO_Init>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
//  OFF();
  HAL_TIM_Base_Start_IT(&htim2);
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <main+0x30>)
 8001076:	f001 fc1f 	bl	80028b8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <main+0x34>)
 800107c:	2205      	movs	r2, #5
 800107e:	601a      	str	r2, [r3, #0]
//  mode = 1;
//  SCH_Add_Task(ledtest1, 1000, 2000);
//  SCH_Add_Task(LED7, 0, 250);
  while (1)
  {
	  fsm_auto_run();
 8001080:	f7ff f91c 	bl	80002bc <fsm_auto_run>
	  fsm_man_run();
 8001084:	f7ff fb0e 	bl	80006a4 <fsm_man_run>
	  SCH_Dispatch_Tasks();
 8001088:	f000 fa20 	bl	80014cc <SCH_Dispatch_Tasks>
	  fsm_auto_run();
 800108c:	e7f8      	b.n	8001080 <main+0x20>
 800108e:	bf00      	nop
 8001090:	200000a4 	.word	0x200000a4
 8001094:	20000080 	.word	0x20000080

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b090      	sub	sp, #64	; 0x40
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0318 	add.w	r3, r7, #24
 80010a2:	2228      	movs	r2, #40	; 0x28
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 ffb6 	bl	8003018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010be:	2301      	movs	r3, #1
 80010c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c2:	2310      	movs	r3, #16
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 ffc6 	bl	8002060 <HAL_RCC_OscConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010da:	f000 f8df 	bl	800129c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010de:	230f      	movs	r3, #15
 80010e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fa32 	bl	8002560 <HAL_RCC_ClockConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001102:	f000 f8cb 	bl	800129c <Error_Handler>
  }
}
 8001106:	bf00      	nop
 8001108:	3740      	adds	r7, #64	; 0x40
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM2_Init+0x94>)
 800112e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001132:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001136:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800113a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM2_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001144:	2209      	movs	r2, #9
 8001146:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_TIM2_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001156:	f001 fb5f 	bl	8002818 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001160:	f000 f89c 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001172:	f001 fcdd 	bl	8002b30 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800117c:	f000 f88e 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_TIM2_Init+0x94>)
 800118e:	f001 feb5 	bl	8002efc <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001198:	f000 f880 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200000a4 	.word	0x200000a4

080011a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <MX_GPIO_Init+0xd0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a2d      	ldr	r2, [pc, #180]	; (8001278 <MX_GPIO_Init+0xd0>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b2b      	ldr	r3, [pc, #172]	; (8001278 <MX_GPIO_Init+0xd0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_GPIO_Init+0xd0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a27      	ldr	r2, [pc, #156]	; (8001278 <MX_GPIO_Init+0xd0>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_GPIO_Init+0xd0>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 80011ec:	2200      	movs	r2, #0
 80011ee:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 80011f2:	4822      	ldr	r0, [pc, #136]	; (800127c <MX_GPIO_Init+0xd4>)
 80011f4:	f000 ff03 	bl	8001ffe <HAL_GPIO_WritePin>
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80011f8:	2200      	movs	r2, #0
 80011fa:	213f      	movs	r1, #63	; 0x3f
 80011fc:	4820      	ldr	r0, [pc, #128]	; (8001280 <MX_GPIO_Init+0xd8>)
 80011fe:	f000 fefe 	bl	8001ffe <HAL_GPIO_WritePin>
                          |EN4_Pin|EN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_AMBER_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_AMBER_2_Pin LED_GREEN_2_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001202:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001206:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2302      	movs	r3, #2
 8001212:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4619      	mov	r1, r3
 800121a:	4818      	ldr	r0, [pc, #96]	; (800127c <MX_GPIO_Init+0xd4>)
 800121c:	f000 fd5e 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           EN4_Pin EN5_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001220:	233f      	movs	r3, #63	; 0x3f
 8001222:	60bb      	str	r3, [r7, #8]
                          |EN4_Pin|EN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2302      	movs	r3, #2
 800122e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4619      	mov	r1, r3
 8001236:	4812      	ldr	r0, [pc, #72]	; (8001280 <MX_GPIO_Init+0xd8>)
 8001238:	f000 fd50 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG6_Pin */
  GPIO_InitStruct.Pin = SEG6_Pin;
 800123c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001240:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001246:	2301      	movs	r3, #1
 8001248:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SEG6_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4619      	mov	r1, r3
 8001250:	480a      	ldr	r0, [pc, #40]	; (800127c <MX_GPIO_Init+0xd4>)
 8001252:	f000 fd43 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_BUTTON_Pin VALUE_BUTTON_Pin TIME_BUTTON_Pin */
  GPIO_InitStruct.Pin = MODE_BUTTON_Pin|VALUE_BUTTON_Pin|TIME_BUTTON_Pin;
 8001256:	f44f 7360 	mov.w	r3, #896	; 0x380
 800125a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001260:	2301      	movs	r3, #1
 8001262:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	4619      	mov	r1, r3
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_GPIO_Init+0xd8>)
 800126c:	f000 fd36 	bl	8001cdc <HAL_GPIO_Init>

}
 8001270:	bf00      	nop
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40021000 	.word	0x40021000
 800127c:	40010800 	.word	0x40010800
 8001280:	40010c00 	.word	0x40010c00

08001284 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
//	timerRun();
	getKeyInput1();
 800128c:	f7fe ff88 	bl	80001a0 <getKeyInput1>
	SCH_Update();
 8001290:	f000 f8b4 	bl	80013fc <SCH_Update>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <Error_Handler+0x8>
	...

080012a8 <SCH_Init>:
sTasks SCH_tasks_G[SCH_MAX_TASKS];
//uint8_t curr_idx_task = 0;
uint8_t start = 0;
uint8_t end = 0;

void SCH_Init(void){
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
	int i;
//	curr_idx_task = 0;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	e024      	b.n	80012fe <SCH_Init+0x56>
		SCH_tasks_G[i].pTask = 0x0000;
 80012b4:	4a19      	ldr	r2, [pc, #100]	; (800131c <SCH_Init+0x74>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	4413      	add	r3, r2
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Delay = 0;
 80012c0:	4a16      	ldr	r2, [pc, #88]	; (800131c <SCH_Init+0x74>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	4413      	add	r3, r2
 80012c8:	3304      	adds	r3, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Period = 0;
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <SCH_Init+0x74>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	4413      	add	r3, r2
 80012d6:	3308      	adds	r3, #8
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].RunMe = 0;
 80012dc:	4a0f      	ldr	r2, [pc, #60]	; (800131c <SCH_Init+0x74>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	4413      	add	r3, r2
 80012e4:	330c      	adds	r3, #12
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[i].isRun = 0;
 80012ea:	4a0c      	ldr	r2, [pc, #48]	; (800131c <SCH_Init+0x74>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	330d      	adds	r3, #13
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < SCH_MAX_TASKS; i++){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3301      	adds	r3, #1
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b27      	cmp	r3, #39	; 0x27
 8001302:	ddd7      	ble.n	80012b4 <SCH_Init+0xc>
	}
	start = end = 0;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <SCH_Init+0x78>)
 8001306:	2200      	movs	r2, #0
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SCH_Init+0x78>)
 800130c:	781a      	ldrb	r2, [r3, #0]
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SCH_Init+0x7c>)
 8001310:	701a      	strb	r2, [r3, #0]

}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	200000ec 	.word	0x200000ec
 8001320:	20000091 	.word	0x20000091
 8001324:	20000090 	.word	0x20000090

08001328 <SCH_Add_Task>:

void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	if ((end + 1) % SCH_MAX_TASKS != start) {
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <SCH_Add_Task+0xc0>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	1c59      	adds	r1, r3, #1
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <SCH_Add_Task+0xc4>)
 800133c:	fb83 2301 	smull	r2, r3, r3, r1
 8001340:	111a      	asrs	r2, r3, #4
 8001342:	17cb      	asrs	r3, r1, #31
 8001344:	1ad2      	subs	r2, r2, r3
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	1aca      	subs	r2, r1, r3
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <SCH_Add_Task+0xc8>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d041      	beq.n	80013dc <SCH_Add_Task+0xb4>
	        SCH_tasks_G[end].pTask = pFunction;
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <SCH_Add_Task+0xc0>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4a25      	ldr	r2, [pc, #148]	; (80013f4 <SCH_Add_Task+0xcc>)
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	4413      	add	r3, r2
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	601a      	str	r2, [r3, #0]
	        SCH_tasks_G[end].Delay = DELAY / 10;
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <SCH_Add_Task+0xc0>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <SCH_Add_Task+0xd0>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	08da      	lsrs	r2, r3, #3
 8001376:	491f      	ldr	r1, [pc, #124]	; (80013f4 <SCH_Add_Task+0xcc>)
 8001378:	0103      	lsls	r3, r0, #4
 800137a:	440b      	add	r3, r1
 800137c:	3304      	adds	r3, #4
 800137e:	601a      	str	r2, [r3, #0]
	        SCH_tasks_G[end].Period = PERIOD / 10;
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <SCH_Add_Task+0xc0>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <SCH_Add_Task+0xd0>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	4918      	ldr	r1, [pc, #96]	; (80013f4 <SCH_Add_Task+0xcc>)
 8001392:	0103      	lsls	r3, r0, #4
 8001394:	440b      	add	r3, r1
 8001396:	3308      	adds	r3, #8
 8001398:	601a      	str	r2, [r3, #0]
	        SCH_tasks_G[end].RunMe = 0;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <SCH_Add_Task+0xc0>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <SCH_Add_Task+0xcc>)
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	330c      	adds	r3, #12
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	        SCH_tasks_G[end].isRun = 1;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <SCH_Add_Task+0xc0>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <SCH_Add_Task+0xcc>)
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	330d      	adds	r3, #13
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
	        end = (end + 1) % SCH_MAX_TASKS;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <SCH_Add_Task+0xc0>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <SCH_Add_Task+0xc4>)
 80013c2:	fb83 1302 	smull	r1, r3, r3, r2
 80013c6:	1119      	asrs	r1, r3, #4
 80013c8:	17d3      	asrs	r3, r2, #31
 80013ca:	1ac9      	subs	r1, r1, r3
 80013cc:	460b      	mov	r3, r1
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	1ad1      	subs	r1, r2, r3
 80013d6:	b2ca      	uxtb	r2, r1
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <SCH_Add_Task+0xc0>)
 80013da:	701a      	strb	r2, [r3, #0]
	    }
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000091 	.word	0x20000091
 80013ec:	66666667 	.word	0x66666667
 80013f0:	20000090 	.word	0x20000090
 80013f4:	200000ec 	.word	0x200000ec
 80013f8:	cccccccd 	.word	0xcccccccd

080013fc <SCH_Update>:

void SCH_Update(void) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
	uint8_t i = start;
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <SCH_Update+0xc0>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
	while (i != end) {
 8001408:	e04d      	b.n	80014a6 <SCH_Update+0xaa>
	      if (SCH_tasks_G[i].isRun) {
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4a2c      	ldr	r2, [pc, #176]	; (80014c0 <SCH_Update+0xc4>)
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	330d      	adds	r3, #13
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d036      	beq.n	8001488 <SCH_Update+0x8c>
	          if (SCH_tasks_G[i].Delay > 0) {
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4a28      	ldr	r2, [pc, #160]	; (80014c0 <SCH_Update+0xc4>)
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	4413      	add	r3, r2
 8001422:	3304      	adds	r3, #4
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d00c      	beq.n	8001444 <SCH_Update+0x48>
	              SCH_tasks_G[i].Delay--;
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4924      	ldr	r1, [pc, #144]	; (80014c0 <SCH_Update+0xc4>)
 800142e:	011a      	lsls	r2, r3, #4
 8001430:	440a      	add	r2, r1
 8001432:	3204      	adds	r2, #4
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	3a01      	subs	r2, #1
 8001438:	4921      	ldr	r1, [pc, #132]	; (80014c0 <SCH_Update+0xc4>)
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	440b      	add	r3, r1
 800143e:	3304      	adds	r3, #4
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	e021      	b.n	8001488 <SCH_Update+0x8c>
	          } else {
	              SCH_tasks_G[i].RunMe++;
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	491e      	ldr	r1, [pc, #120]	; (80014c0 <SCH_Update+0xc4>)
 8001448:	011a      	lsls	r2, r3, #4
 800144a:	440a      	add	r2, r1
 800144c:	320c      	adds	r2, #12
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	3201      	adds	r2, #1
 8001452:	b2d1      	uxtb	r1, r2
 8001454:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <SCH_Update+0xc4>)
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	4413      	add	r3, r2
 800145a:	330c      	adds	r3, #12
 800145c:	460a      	mov	r2, r1
 800145e:	701a      	strb	r2, [r3, #0]
	              if (SCH_tasks_G[i].Period > 0) {
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <SCH_Update+0xc4>)
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	3308      	adds	r3, #8
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00b      	beq.n	8001488 <SCH_Update+0x8c>
	                  SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001470:	79fa      	ldrb	r2, [r7, #7]
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	4912      	ldr	r1, [pc, #72]	; (80014c0 <SCH_Update+0xc4>)
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	440a      	add	r2, r1
 800147a:	3208      	adds	r2, #8
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	4910      	ldr	r1, [pc, #64]	; (80014c0 <SCH_Update+0xc4>)
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	440b      	add	r3, r1
 8001484:	3304      	adds	r3, #4
 8001486:	601a      	str	r2, [r3, #0]
	                }
	            }
	        }
	        i = (i + 1) % SCH_MAX_TASKS;
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <SCH_Update+0xc8>)
 800148e:	fb83 1302 	smull	r1, r3, r3, r2
 8001492:	1119      	asrs	r1, r3, #4
 8001494:	17d3      	asrs	r3, r2, #31
 8001496:	1ac9      	subs	r1, r1, r3
 8001498:	460b      	mov	r3, r1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	1ad1      	subs	r1, r2, r3
 80014a2:	460b      	mov	r3, r1
 80014a4:	71fb      	strb	r3, [r7, #7]
	while (i != end) {
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <SCH_Update+0xcc>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	79fa      	ldrb	r2, [r7, #7]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1ac      	bne.n	800140a <SCH_Update+0xe>
	  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000090 	.word	0x20000090
 80014c0:	200000ec 	.word	0x200000ec
 80014c4:	66666667 	.word	0x66666667
 80014c8:	20000091 	.word	0x20000091

080014cc <SCH_Dispatch_Tasks>:

 void SCH_Dispatch_Tasks(void){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
	 uint8_t i = start;
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <SCH_Dispatch_Tasks+0xa0>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
	     while (i != end) {
 80014d8:	e03e      	b.n	8001558 <SCH_Dispatch_Tasks+0x8c>
	       if (SCH_tasks_G[i].isRun && SCH_tasks_G[i].RunMe > 0) {
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <SCH_Dispatch_Tasks+0xa4>)
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	330d      	adds	r3, #13
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d027      	beq.n	800153a <SCH_Dispatch_Tasks+0x6e>
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	4a20      	ldr	r2, [pc, #128]	; (8001570 <SCH_Dispatch_Tasks+0xa4>)
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	4413      	add	r3, r2
 80014f2:	330c      	adds	r3, #12
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d01f      	beq.n	800153a <SCH_Dispatch_Tasks+0x6e>
	           SCH_tasks_G[i].RunMe--;
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	491c      	ldr	r1, [pc, #112]	; (8001570 <SCH_Dispatch_Tasks+0xa4>)
 80014fe:	011a      	lsls	r2, r3, #4
 8001500:	440a      	add	r2, r1
 8001502:	320c      	adds	r2, #12
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	3a01      	subs	r2, #1
 8001508:	b2d1      	uxtb	r1, r2
 800150a:	4a19      	ldr	r2, [pc, #100]	; (8001570 <SCH_Dispatch_Tasks+0xa4>)
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	4413      	add	r3, r2
 8001510:	330c      	adds	r3, #12
 8001512:	460a      	mov	r2, r1
 8001514:	701a      	strb	r2, [r3, #0]
	           (*SCH_tasks_G[i].pTask)();
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4a15      	ldr	r2, [pc, #84]	; (8001570 <SCH_Dispatch_Tasks+0xa4>)
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	4413      	add	r3, r2
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4798      	blx	r3
	           if (SCH_tasks_G[i].Period == 0) {
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4a12      	ldr	r2, [pc, #72]	; (8001570 <SCH_Dispatch_Tasks+0xa4>)
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	3308      	adds	r3, #8
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d103      	bne.n	800153a <SCH_Dispatch_Tasks+0x6e>
//	               SCH_tasks_G[i].isRun = 0;
	        	   SCH_Delete_Task(i);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f821 	bl	800157c <SCH_Delete_Task>
	           }
//	           break;
	       }
	         i = (i + 1) % SCH_MAX_TASKS;
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <SCH_Dispatch_Tasks+0xa8>)
 8001540:	fb83 1302 	smull	r1, r3, r3, r2
 8001544:	1119      	asrs	r1, r3, #4
 8001546:	17d3      	asrs	r3, r2, #31
 8001548:	1ac9      	subs	r1, r1, r3
 800154a:	460b      	mov	r3, r1
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	1ad1      	subs	r1, r2, r3
 8001554:	460b      	mov	r3, r1
 8001556:	71fb      	strb	r3, [r7, #7]
	     while (i != end) {
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <SCH_Dispatch_Tasks+0xac>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	79fa      	ldrb	r2, [r7, #7]
 800155e:	429a      	cmp	r2, r3
 8001560:	d1bb      	bne.n	80014da <SCH_Dispatch_Tasks+0xe>
	     }
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000090 	.word	0x20000090
 8001570:	200000ec 	.word	0x200000ec
 8001574:	66666667 	.word	0x66666667
 8001578:	20000091 	.word	0x20000091

0800157c <SCH_Delete_Task>:

void SCH_Delete_Task(uint8_t task_index){
 800157c:	b490      	push	{r4, r7}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
	if (start == end) return;
 8001586:	4b38      	ldr	r3, [pc, #224]	; (8001668 <SCH_Delete_Task+0xec>)
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	4b38      	ldr	r3, [pc, #224]	; (800166c <SCH_Delete_Task+0xf0>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d065      	beq.n	800165e <SCH_Delete_Task+0xe2>
	else{
		SCH_tasks_G[task_index].pTask = 0x0000;
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4a36      	ldr	r2, [pc, #216]	; (8001670 <SCH_Delete_Task+0xf4>)
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	4413      	add	r3, r2
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[task_index].Delay = 0;
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4a33      	ldr	r2, [pc, #204]	; (8001670 <SCH_Delete_Task+0xf4>)
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	3304      	adds	r3, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[task_index].Period = 0;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	4a30      	ldr	r2, [pc, #192]	; (8001670 <SCH_Delete_Task+0xf4>)
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	4413      	add	r3, r2
 80015b4:	3308      	adds	r3, #8
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[task_index].RunMe = 0;
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4a2c      	ldr	r2, [pc, #176]	; (8001670 <SCH_Delete_Task+0xf4>)
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4413      	add	r3, r2
 80015c2:	330c      	adds	r3, #12
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[task_index].isRun = 0;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	4a29      	ldr	r2, [pc, #164]	; (8001670 <SCH_Delete_Task+0xf4>)
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	330d      	adds	r3, #13
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
	    uint8_t i;
	    for (i = task_index; i < end; i = (i + 1) % SCH_MAX_TASKS) {
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e029      	b.n	8001630 <SCH_Delete_Task+0xb4>
	        uint8_t next = (i + 1) % SCH_MAX_TASKS;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <SCH_Delete_Task+0xf8>)
 80015e2:	fb83 1302 	smull	r1, r3, r3, r2
 80015e6:	1119      	asrs	r1, r3, #4
 80015e8:	17d3      	asrs	r3, r2, #31
 80015ea:	1ac9      	subs	r1, r1, r3
 80015ec:	460b      	mov	r3, r1
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	1ad1      	subs	r1, r2, r3
 80015f6:	460b      	mov	r3, r1
 80015f8:	73bb      	strb	r3, [r7, #14]
	        SCH_tasks_G[i] = SCH_tasks_G[next];
 80015fa:	7bbb      	ldrb	r3, [r7, #14]
 80015fc:	7bfa      	ldrb	r2, [r7, #15]
 80015fe:	491c      	ldr	r1, [pc, #112]	; (8001670 <SCH_Delete_Task+0xf4>)
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	4411      	add	r1, r2
 8001604:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <SCH_Delete_Task+0xf4>)
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	4413      	add	r3, r2
 800160a:	460c      	mov	r4, r1
 800160c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800160e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    for (i = task_index; i < end; i = (i + 1) % SCH_MAX_TASKS) {
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <SCH_Delete_Task+0xf8>)
 8001618:	fb83 1302 	smull	r1, r3, r3, r2
 800161c:	1119      	asrs	r1, r3, #4
 800161e:	17d3      	asrs	r3, r2, #31
 8001620:	1ac9      	subs	r1, r1, r3
 8001622:	460b      	mov	r3, r1
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	1ad1      	subs	r1, r2, r3
 800162c:	460b      	mov	r3, r1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <SCH_Delete_Task+0xf0>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	429a      	cmp	r2, r3
 8001638:	d3d0      	bcc.n	80015dc <SCH_Delete_Task+0x60>
	    }
	    end = (end - 1) % SCH_MAX_TASKS;
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <SCH_Delete_Task+0xf0>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	1e5a      	subs	r2, r3, #1
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <SCH_Delete_Task+0xf8>)
 8001642:	fb83 1302 	smull	r1, r3, r3, r2
 8001646:	1119      	asrs	r1, r3, #4
 8001648:	17d3      	asrs	r3, r2, #31
 800164a:	1ac9      	subs	r1, r1, r3
 800164c:	460b      	mov	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1ad1      	subs	r1, r2, r3
 8001656:	b2ca      	uxtb	r2, r1
 8001658:	4b04      	ldr	r3, [pc, #16]	; (800166c <SCH_Delete_Task+0xf0>)
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	e000      	b.n	8001660 <SCH_Delete_Task+0xe4>
	if (start == end) return;
 800165e:	bf00      	nop
	}
 }
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bc90      	pop	{r4, r7}
 8001666:	4770      	bx	lr
 8001668:	20000090 	.word	0x20000090
 800166c:	20000091 	.word	0x20000091
 8001670:	200000ec 	.word	0x200000ec
 8001674:	66666667 	.word	0x66666667

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_MspInit+0x5c>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <HAL_MspInit+0x5c>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6193      	str	r3, [r2, #24]
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_MspInit+0x5c>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_MspInit+0x5c>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_MspInit+0x5c>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_MspInit+0x5c>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_MspInit+0x60>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_MspInit+0x60>)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010000 	.word	0x40010000

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ec:	d113      	bne.n	8001716 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_TIM_Base_MspInit+0x44>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <HAL_TIM_Base_MspInit+0x44>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_TIM_Base_MspInit+0x44>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	201c      	movs	r0, #28
 800170c:	f000 faaf 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001710:	201c      	movs	r0, #28
 8001712:	f000 fac8 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176a:	f000 f98d 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <TIM2_IRQHandler+0x10>)
 800177a:	f001 f8e9 	bl	8002950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200000a4 	.word	0x200000a4

08001788 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <displayRED1>:
 *
 *  Created on: Oct 30, 2024
 *      Author: Admin
 */
#include "traffic_light.h"
void displayRED1(){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001798:	2201      	movs	r2, #1
 800179a:	2102      	movs	r1, #2
 800179c:	4807      	ldr	r0, [pc, #28]	; (80017bc <displayRED1+0x28>)
 800179e:	f000 fc2e 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2104      	movs	r1, #4
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <displayRED1+0x28>)
 80017a8:	f000 fc29 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2108      	movs	r1, #8
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <displayRED1+0x28>)
 80017b2:	f000 fc24 	bl	8001ffe <HAL_GPIO_WritePin>
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40010800 	.word	0x40010800

080017c0 <displayAMBER1>:
void displayAMBER1(){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2102      	movs	r1, #2
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <displayAMBER1+0x28>)
 80017ca:	f000 fc18 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2104      	movs	r1, #4
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <displayAMBER1+0x28>)
 80017d4:	f000 fc13 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2108      	movs	r1, #8
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <displayAMBER1+0x28>)
 80017de:	f000 fc0e 	bl	8001ffe <HAL_GPIO_WritePin>
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40010800 	.word	0x40010800

080017ec <displayGREEN1>:
void displayGREEN1(){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2102      	movs	r1, #2
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <displayGREEN1+0x28>)
 80017f6:	f000 fc02 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2104      	movs	r1, #4
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <displayGREEN1+0x28>)
 8001800:	f000 fbfd 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8001804:	2201      	movs	r2, #1
 8001806:	2108      	movs	r1, #8
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <displayGREEN1+0x28>)
 800180a:	f000 fbf8 	bl	8001ffe <HAL_GPIO_WritePin>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40010800 	.word	0x40010800

08001818 <displayRED2>:
void displayRED2(){
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	2110      	movs	r1, #16
 8001820:	4807      	ldr	r0, [pc, #28]	; (8001840 <displayRED2+0x28>)
 8001822:	f000 fbec 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2120      	movs	r1, #32
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <displayRED2+0x28>)
 800182c:	f000 fbe7 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2140      	movs	r1, #64	; 0x40
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <displayRED2+0x28>)
 8001836:	f000 fbe2 	bl	8001ffe <HAL_GPIO_WritePin>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40010800 	.word	0x40010800

08001844 <displayAMBER2>:
void displayAMBER2(){
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2110      	movs	r1, #16
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <displayAMBER2+0x28>)
 800184e:	f000 fbd6 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001852:	2201      	movs	r2, #1
 8001854:	2120      	movs	r1, #32
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <displayAMBER2+0x28>)
 8001858:	f000 fbd1 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2140      	movs	r1, #64	; 0x40
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <displayAMBER2+0x28>)
 8001862:	f000 fbcc 	bl	8001ffe <HAL_GPIO_WritePin>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40010800 	.word	0x40010800

08001870 <displayGREEN2>:
void displayGREEN2(){
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2110      	movs	r1, #16
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <displayGREEN2+0x28>)
 800187a:	f000 fbc0 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2120      	movs	r1, #32
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <displayGREEN2+0x28>)
 8001884:	f000 fbbb 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001888:	2201      	movs	r2, #1
 800188a:	2140      	movs	r1, #64	; 0x40
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <displayGREEN2+0x28>)
 800188e:	f000 fbb6 	bl	8001ffe <HAL_GPIO_WritePin>
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40010800 	.word	0x40010800

0800189c <BlinkRED>:
void BlinkRED(){
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80018a0:	2110      	movs	r1, #16
 80018a2:	480e      	ldr	r0, [pc, #56]	; (80018dc <BlinkRED+0x40>)
 80018a4:	f000 fbc3 	bl	800202e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80018a8:	2102      	movs	r1, #2
 80018aa:	480c      	ldr	r0, [pc, #48]	; (80018dc <BlinkRED+0x40>)
 80018ac:	f000 fbbf 	bl	800202e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2104      	movs	r1, #4
 80018b4:	4809      	ldr	r0, [pc, #36]	; (80018dc <BlinkRED+0x40>)
 80018b6:	f000 fba2 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2108      	movs	r1, #8
 80018be:	4807      	ldr	r0, [pc, #28]	; (80018dc <BlinkRED+0x40>)
 80018c0:	f000 fb9d 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2120      	movs	r1, #32
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <BlinkRED+0x40>)
 80018ca:	f000 fb98 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2140      	movs	r1, #64	; 0x40
 80018d2:	4802      	ldr	r0, [pc, #8]	; (80018dc <BlinkRED+0x40>)
 80018d4:	f000 fb93 	bl	8001ffe <HAL_GPIO_WritePin>
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40010800 	.word	0x40010800

080018e0 <BlinkAMBER>:
void BlinkAMBER(){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 80018e4:	2104      	movs	r1, #4
 80018e6:	480e      	ldr	r0, [pc, #56]	; (8001920 <BlinkAMBER+0x40>)
 80018e8:	f000 fba1 	bl	800202e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80018ec:	2120      	movs	r1, #32
 80018ee:	480c      	ldr	r0, [pc, #48]	; (8001920 <BlinkAMBER+0x40>)
 80018f0:	f000 fb9d 	bl	800202e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2102      	movs	r1, #2
 80018f8:	4809      	ldr	r0, [pc, #36]	; (8001920 <BlinkAMBER+0x40>)
 80018fa:	f000 fb80 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2108      	movs	r1, #8
 8001902:	4807      	ldr	r0, [pc, #28]	; (8001920 <BlinkAMBER+0x40>)
 8001904:	f000 fb7b 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2110      	movs	r1, #16
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <BlinkAMBER+0x40>)
 800190e:	f000 fb76 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2140      	movs	r1, #64	; 0x40
 8001916:	4802      	ldr	r0, [pc, #8]	; (8001920 <BlinkAMBER+0x40>)
 8001918:	f000 fb71 	bl	8001ffe <HAL_GPIO_WritePin>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40010800 	.word	0x40010800

08001924 <BlinkGREEN>:
void BlinkGREEN(){
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 8001928:	2108      	movs	r1, #8
 800192a:	480e      	ldr	r0, [pc, #56]	; (8001964 <BlinkGREEN+0x40>)
 800192c:	f000 fb7f 	bl	800202e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001930:	2140      	movs	r1, #64	; 0x40
 8001932:	480c      	ldr	r0, [pc, #48]	; (8001964 <BlinkGREEN+0x40>)
 8001934:	f000 fb7b 	bl	800202e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2104      	movs	r1, #4
 800193c:	4809      	ldr	r0, [pc, #36]	; (8001964 <BlinkGREEN+0x40>)
 800193e:	f000 fb5e 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2102      	movs	r1, #2
 8001946:	4807      	ldr	r0, [pc, #28]	; (8001964 <BlinkGREEN+0x40>)
 8001948:	f000 fb59 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2110      	movs	r1, #16
 8001950:	4804      	ldr	r0, [pc, #16]	; (8001964 <BlinkGREEN+0x40>)
 8001952:	f000 fb54 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2120      	movs	r1, #32
 800195a:	4802      	ldr	r0, [pc, #8]	; (8001964 <BlinkGREEN+0x40>)
 800195c:	f000 fb4f 	bl	8001ffe <HAL_GPIO_WritePin>
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40010800 	.word	0x40010800

08001968 <OFF>:
void OFF(){
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2108      	movs	r1, #8
 8001970:	480e      	ldr	r0, [pc, #56]	; (80019ac <OFF+0x44>)
 8001972:	f000 fb44 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2140      	movs	r1, #64	; 0x40
 800197a:	480c      	ldr	r0, [pc, #48]	; (80019ac <OFF+0x44>)
 800197c:	f000 fb3f 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2104      	movs	r1, #4
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <OFF+0x44>)
 8001986:	f000 fb3a 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2102      	movs	r1, #2
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <OFF+0x44>)
 8001990:	f000 fb35 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2110      	movs	r1, #16
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <OFF+0x44>)
 800199a:	f000 fb30 	bl	8001ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2120      	movs	r1, #32
 80019a2:	4802      	ldr	r0, [pc, #8]	; (80019ac <OFF+0x44>)
 80019a4:	f000 fb2b 	bl	8001ffe <HAL_GPIO_WritePin>
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40010800 	.word	0x40010800

080019b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff feea 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480b      	ldr	r0, [pc, #44]	; (80019e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019b6:	490c      	ldr	r1, [pc, #48]	; (80019e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019b8:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019cc:	4c09      	ldr	r4, [pc, #36]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f001 faf9 	bl	8002fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019de:	f7ff fb3f 	bl	8001060 <main>
  bx lr
 80019e2:	4770      	bx	lr
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80019ec:	0800306c 	.word	0x0800306c
  ldr r2, =_sbss
 80019f0:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80019f4:	20000370 	.word	0x20000370

080019f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC1_2_IRQHandler>
	...

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_Init+0x28>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_Init+0x28>)
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f923 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	200f      	movs	r0, #15
 8001a14:	f000 f808 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff fe2e 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x54>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f93b 	bl	8001cc2 <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f000 f903 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <HAL_InitTick+0x5c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000048 	.word	0x20000048
 8001a80:	20000050 	.word	0x20000050
 8001a84:	2000004c 	.word	0x2000004c

08001a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_IncTick+0x1c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	20000050 	.word	0x20000050
 8001aa8:	2000036c 	.word	0x2000036c

08001aac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b02      	ldr	r3, [pc, #8]	; (8001abc <HAL_GetTick+0x10>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	2000036c 	.word	0x2000036c

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4906      	ldr	r1, [pc, #24]	; (8001b58 <__NVIC_EnableIRQ+0x34>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff90 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff2d 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff42 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff90 	bl	8001bb0 <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5f 	bl	8001b5c <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff35 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa2 	bl	8001c14 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b08b      	sub	sp, #44	; 0x2c
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cee:	e148      	b.n	8001f82 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8137 	bne.w	8001f7c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4aa3      	ldr	r2, [pc, #652]	; (8001fa0 <HAL_GPIO_Init+0x2c4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d05e      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d18:	4aa1      	ldr	r2, [pc, #644]	; (8001fa0 <HAL_GPIO_Init+0x2c4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d875      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d1e:	4aa1      	ldr	r2, [pc, #644]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d058      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d24:	4a9f      	ldr	r2, [pc, #636]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d86f      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d2a:	4a9f      	ldr	r2, [pc, #636]	; (8001fa8 <HAL_GPIO_Init+0x2cc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d052      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d30:	4a9d      	ldr	r2, [pc, #628]	; (8001fa8 <HAL_GPIO_Init+0x2cc>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d869      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d36:	4a9d      	ldr	r2, [pc, #628]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d04c      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a9b      	ldr	r2, [pc, #620]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d863      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d42:	4a9b      	ldr	r2, [pc, #620]	; (8001fb0 <HAL_GPIO_Init+0x2d4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d046      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d48:	4a99      	ldr	r2, [pc, #612]	; (8001fb0 <HAL_GPIO_Init+0x2d4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d85d      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d4e:	2b12      	cmp	r3, #18
 8001d50:	d82a      	bhi.n	8001da8 <HAL_GPIO_Init+0xcc>
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d859      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <HAL_GPIO_Init+0x80>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001dd7 	.word	0x08001dd7
 8001d60:	08001db1 	.word	0x08001db1
 8001d64:	08001dc3 	.word	0x08001dc3
 8001d68:	08001e05 	.word	0x08001e05
 8001d6c:	08001e0b 	.word	0x08001e0b
 8001d70:	08001e0b 	.word	0x08001e0b
 8001d74:	08001e0b 	.word	0x08001e0b
 8001d78:	08001e0b 	.word	0x08001e0b
 8001d7c:	08001e0b 	.word	0x08001e0b
 8001d80:	08001e0b 	.word	0x08001e0b
 8001d84:	08001e0b 	.word	0x08001e0b
 8001d88:	08001e0b 	.word	0x08001e0b
 8001d8c:	08001e0b 	.word	0x08001e0b
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001e0b 	.word	0x08001e0b
 8001d98:	08001e0b 	.word	0x08001e0b
 8001d9c:	08001e0b 	.word	0x08001e0b
 8001da0:	08001db9 	.word	0x08001db9
 8001da4:	08001dcd 	.word	0x08001dcd
 8001da8:	4a82      	ldr	r2, [pc, #520]	; (8001fb4 <HAL_GPIO_Init+0x2d8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dae:	e02c      	b.n	8001e0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e029      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e024      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e01f      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	e01a      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dde:	2304      	movs	r3, #4
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e013      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dec:	2308      	movs	r3, #8
 8001dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	611a      	str	r2, [r3, #16]
          break;
 8001df6:	e009      	b.n	8001e0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	615a      	str	r2, [r3, #20]
          break;
 8001e02:	e003      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          break;
 8001e0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2bff      	cmp	r3, #255	; 0xff
 8001e10:	d801      	bhi.n	8001e16 <HAL_GPIO_Init+0x13a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	e001      	b.n	8001e1a <HAL_GPIO_Init+0x13e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d802      	bhi.n	8001e28 <HAL_GPIO_Init+0x14c>
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x152>
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	3b08      	subs	r3, #8
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	210f      	movs	r1, #15
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	6a39      	ldr	r1, [r7, #32]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8090 	beq.w	8001f7c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5c:	4b56      	ldr	r3, [pc, #344]	; (8001fb8 <HAL_GPIO_Init+0x2dc>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a55      	ldr	r2, [pc, #340]	; (8001fb8 <HAL_GPIO_Init+0x2dc>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_GPIO_Init+0x2dc>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e74:	4a51      	ldr	r2, [pc, #324]	; (8001fbc <HAL_GPIO_Init+0x2e0>)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a49      	ldr	r2, [pc, #292]	; (8001fc0 <HAL_GPIO_Init+0x2e4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d00d      	beq.n	8001ebc <HAL_GPIO_Init+0x1e0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a48      	ldr	r2, [pc, #288]	; (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d007      	beq.n	8001eb8 <HAL_GPIO_Init+0x1dc>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a47      	ldr	r2, [pc, #284]	; (8001fc8 <HAL_GPIO_Init+0x2ec>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <HAL_GPIO_Init+0x1d8>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e004      	b.n	8001ebe <HAL_GPIO_Init+0x1e2>
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e002      	b.n	8001ebe <HAL_GPIO_Init+0x1e2>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <HAL_GPIO_Init+0x1e2>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec0:	f002 0203 	and.w	r2, r2, #3
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	4093      	lsls	r3, r2
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ece:	493b      	ldr	r1, [pc, #236]	; (8001fbc <HAL_GPIO_Init+0x2e0>)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	089b      	lsrs	r3, r3, #2
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d006      	beq.n	8001ef6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ee8:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	4937      	ldr	r1, [pc, #220]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
 8001ef4:	e006      	b.n	8001f04 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ef6:	4b35      	ldr	r3, [pc, #212]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	4933      	ldr	r1, [pc, #204]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d006      	beq.n	8001f1e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f10:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	492d      	ldr	r1, [pc, #180]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	4929      	ldr	r1, [pc, #164]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d006      	beq.n	8001f46 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f38:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4923      	ldr	r1, [pc, #140]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	491f      	ldr	r1, [pc, #124]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4919      	ldr	r1, [pc, #100]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f6e:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	4915      	ldr	r1, [pc, #84]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	3301      	adds	r3, #1
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f47f aeaf 	bne.w	8001cf0 <HAL_GPIO_Init+0x14>
  }
}
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
 8001f96:	372c      	adds	r7, #44	; 0x2c
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	10320000 	.word	0x10320000
 8001fa4:	10310000 	.word	0x10310000
 8001fa8:	10220000 	.word	0x10220000
 8001fac:	10210000 	.word	0x10210000
 8001fb0:	10120000 	.word	0x10120000
 8001fb4:	10110000 	.word	0x10110000
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	40010800 	.word	0x40010800
 8001fc4:	40010c00 	.word	0x40010c00
 8001fc8:	40011000 	.word	0x40011000
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e001      	b.n	8001ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	807b      	strh	r3, [r7, #2]
 800200a:	4613      	mov	r3, r2
 800200c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800200e:	787b      	ldrb	r3, [r7, #1]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002014:	887a      	ldrh	r2, [r7, #2]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800201a:	e003      	b.n	8002024 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	041a      	lsls	r2, r3, #16
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	611a      	str	r2, [r3, #16]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002040:	887a      	ldrh	r2, [r7, #2]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4013      	ands	r3, r2
 8002046:	041a      	lsls	r2, r3, #16
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	43d9      	mvns	r1, r3
 800204c:	887b      	ldrh	r3, [r7, #2]
 800204e:	400b      	ands	r3, r1
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	611a      	str	r2, [r3, #16]
}
 8002056:	bf00      	nop
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e26c      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8087 	beq.w	800218e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002080:	4b92      	ldr	r3, [pc, #584]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b04      	cmp	r3, #4
 800208a:	d00c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800208c:	4b8f      	ldr	r3, [pc, #572]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b08      	cmp	r3, #8
 8002096:	d112      	bne.n	80020be <HAL_RCC_OscConfig+0x5e>
 8002098:	4b8c      	ldr	r3, [pc, #560]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d10b      	bne.n	80020be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a6:	4b89      	ldr	r3, [pc, #548]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d06c      	beq.n	800218c <HAL_RCC_OscConfig+0x12c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d168      	bne.n	800218c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e246      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x76>
 80020c8:	4b80      	ldr	r3, [pc, #512]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a7f      	ldr	r2, [pc, #508]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e02e      	b.n	8002134 <HAL_RCC_OscConfig+0xd4>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x98>
 80020de:	4b7b      	ldr	r3, [pc, #492]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7a      	ldr	r2, [pc, #488]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b78      	ldr	r3, [pc, #480]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a77      	ldr	r2, [pc, #476]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80020f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e01d      	b.n	8002134 <HAL_RCC_OscConfig+0xd4>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002100:	d10c      	bne.n	800211c <HAL_RCC_OscConfig+0xbc>
 8002102:	4b72      	ldr	r3, [pc, #456]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a71      	ldr	r2, [pc, #452]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6e      	ldr	r2, [pc, #440]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e00b      	b.n	8002134 <HAL_RCC_OscConfig+0xd4>
 800211c:	4b6b      	ldr	r3, [pc, #428]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a6a      	ldr	r2, [pc, #424]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b68      	ldr	r3, [pc, #416]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a67      	ldr	r2, [pc, #412]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800212e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002132:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d013      	beq.n	8002164 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7ff fcb6 	bl	8001aac <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002144:	f7ff fcb2 	bl	8001aac <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b64      	cmp	r3, #100	; 0x64
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e1fa      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b5d      	ldr	r3, [pc, #372]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0xe4>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7ff fca2 	bl	8001aac <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff fc9e 	bl	8001aac <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1e6      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217e:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x10c>
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d063      	beq.n	8002262 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800219a:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021a6:	4b49      	ldr	r3, [pc, #292]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d11c      	bne.n	80021ec <HAL_RCC_OscConfig+0x18c>
 80021b2:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d116      	bne.n	80021ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021be:	4b43      	ldr	r3, [pc, #268]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_RCC_OscConfig+0x176>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e1ba      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4939      	ldr	r1, [pc, #228]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ea:	e03a      	b.n	8002262 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f4:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7ff fc57 	bl	8001aac <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002202:	f7ff fc53 	bl	8001aac <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e19b      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002214:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	4927      	ldr	r1, [pc, #156]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_RCC_OscConfig+0x270>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7ff fc36 	bl	8001aac <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002244:	f7ff fc32 	bl	8001aac <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e17a      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d03a      	beq.n	80022e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d019      	beq.n	80022aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002276:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <HAL_RCC_OscConfig+0x274>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7ff fc16 	bl	8001aac <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002284:	f7ff fc12 	bl	8001aac <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e15a      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <HAL_RCC_OscConfig+0x26c>)
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022a2:	2001      	movs	r0, #1
 80022a4:	f000 fa9a 	bl	80027dc <RCC_Delay>
 80022a8:	e01c      	b.n	80022e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_RCC_OscConfig+0x274>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b0:	f7ff fbfc 	bl	8001aac <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b6:	e00f      	b.n	80022d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b8:	f7ff fbf8 	bl	8001aac <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d908      	bls.n	80022d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e140      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	42420000 	.word	0x42420000
 80022d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d8:	4b9e      	ldr	r3, [pc, #632]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1e9      	bne.n	80022b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a6 	beq.w	800243e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f6:	4b97      	ldr	r3, [pc, #604]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	4b94      	ldr	r3, [pc, #592]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4a93      	ldr	r2, [pc, #588]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	61d3      	str	r3, [r2, #28]
 800230e:	4b91      	ldr	r3, [pc, #580]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231a:	2301      	movs	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231e:	4b8e      	ldr	r3, [pc, #568]	; (8002558 <HAL_RCC_OscConfig+0x4f8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d118      	bne.n	800235c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232a:	4b8b      	ldr	r3, [pc, #556]	; (8002558 <HAL_RCC_OscConfig+0x4f8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a8a      	ldr	r2, [pc, #552]	; (8002558 <HAL_RCC_OscConfig+0x4f8>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002336:	f7ff fbb9 	bl	8001aac <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233e:	f7ff fbb5 	bl	8001aac <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b64      	cmp	r3, #100	; 0x64
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e0fd      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002350:	4b81      	ldr	r3, [pc, #516]	; (8002558 <HAL_RCC_OscConfig+0x4f8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x312>
 8002364:	4b7b      	ldr	r3, [pc, #492]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a7a      	ldr	r2, [pc, #488]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6213      	str	r3, [r2, #32]
 8002370:	e02d      	b.n	80023ce <HAL_RCC_OscConfig+0x36e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x334>
 800237a:	4b76      	ldr	r3, [pc, #472]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4a75      	ldr	r2, [pc, #468]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6213      	str	r3, [r2, #32]
 8002386:	4b73      	ldr	r3, [pc, #460]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a72      	ldr	r2, [pc, #456]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	e01c      	b.n	80023ce <HAL_RCC_OscConfig+0x36e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d10c      	bne.n	80023b6 <HAL_RCC_OscConfig+0x356>
 800239c:	4b6d      	ldr	r3, [pc, #436]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4a6c      	ldr	r2, [pc, #432]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	6213      	str	r3, [r2, #32]
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a69      	ldr	r2, [pc, #420]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	e00b      	b.n	80023ce <HAL_RCC_OscConfig+0x36e>
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a66      	ldr	r2, [pc, #408]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6213      	str	r3, [r2, #32]
 80023c2:	4b64      	ldr	r3, [pc, #400]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a63      	ldr	r2, [pc, #396]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d015      	beq.n	8002402 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d6:	f7ff fb69 	bl	8001aac <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7ff fb65 	bl	8001aac <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0ab      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f4:	4b57      	ldr	r3, [pc, #348]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ee      	beq.n	80023de <HAL_RCC_OscConfig+0x37e>
 8002400:	e014      	b.n	800242c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7ff fb53 	bl	8001aac <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7ff fb4f 	bl	8001aac <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e095      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002420:	4b4c      	ldr	r3, [pc, #304]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ee      	bne.n	800240a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d105      	bne.n	800243e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002432:	4b48      	ldr	r3, [pc, #288]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a47      	ldr	r2, [pc, #284]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8081 	beq.w	800254a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d061      	beq.n	8002518 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d146      	bne.n	80024ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245c:	4b3f      	ldr	r3, [pc, #252]	; (800255c <HAL_RCC_OscConfig+0x4fc>)
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002462:	f7ff fb23 	bl	8001aac <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246a:	f7ff fb1f 	bl	8001aac <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e067      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800247c:	4b35      	ldr	r3, [pc, #212]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002490:	d108      	bne.n	80024a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002492:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	492d      	ldr	r1, [pc, #180]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a4:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a19      	ldr	r1, [r3, #32]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	430b      	orrs	r3, r1
 80024b6:	4927      	ldr	r1, [pc, #156]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_RCC_OscConfig+0x4fc>)
 80024be:	2201      	movs	r2, #1
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7ff faf3 	bl	8001aac <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ca:	f7ff faef 	bl	8001aac <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e037      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x46a>
 80024e8:	e02f      	b.n	800254a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <HAL_RCC_OscConfig+0x4fc>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7ff fadc 	bl	8001aac <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f8:	f7ff fad8 	bl	8001aac <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e020      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x498>
 8002516:	e018      	b.n	800254a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e013      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_OscConfig+0x4f4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	429a      	cmp	r2, r3
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	429a      	cmp	r2, r3
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	40007000 	.word	0x40007000
 800255c:	42420060 	.word	0x42420060

08002560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0d0      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b6a      	ldr	r3, [pc, #424]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d910      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b67      	ldr	r3, [pc, #412]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	4965      	ldr	r1, [pc, #404]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b63      	ldr	r3, [pc, #396]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0b8      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025bc:	4b59      	ldr	r3, [pc, #356]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a58      	ldr	r2, [pc, #352]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d4:	4b53      	ldr	r3, [pc, #332]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a52      	ldr	r2, [pc, #328]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e0:	4b50      	ldr	r3, [pc, #320]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	494d      	ldr	r1, [pc, #308]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d040      	beq.n	8002680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d115      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e07f      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e073      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e06b      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b39      	ldr	r3, [pc, #228]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4936      	ldr	r1, [pc, #216]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7ff fa2c 	bl	8001aac <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7ff fa28 	bl	8001aac <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e053      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d210      	bcs.n	80026b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 0207 	bic.w	r2, r3, #7
 8002696:	4922      	ldr	r1, [pc, #136]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	4313      	orrs	r3, r2
 800269c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e032      	b.n	8002716 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d008      	beq.n	80026ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4916      	ldr	r1, [pc, #88]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	490e      	ldr	r1, [pc, #56]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ee:	f000 f821 	bl	8002734 <HAL_RCC_GetSysClockFreq>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	490a      	ldr	r1, [pc, #40]	; (8002728 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	5ccb      	ldrb	r3, [r1, r3]
 8002702:	fa22 f303 	lsr.w	r3, r2, r3
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x1cc>)
 8002708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_ClockConfig+0x1d0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff f98a 	bl	8001a28 <HAL_InitTick>

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40022000 	.word	0x40022000
 8002724:	40021000 	.word	0x40021000
 8002728:	08003040 	.word	0x08003040
 800272c:	20000048 	.word	0x20000048
 8002730:	2000004c 	.word	0x2000004c

08002734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800274e:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d002      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x30>
 800275e:	2b08      	cmp	r3, #8
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x36>
 8002762:	e027      	b.n	80027b4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002766:	613b      	str	r3, [r7, #16]
      break;
 8002768:	e027      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	0c9b      	lsrs	r3, r3, #18
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002774:	5cd3      	ldrb	r3, [r2, r3]
 8002776:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d010      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002782:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	0c5b      	lsrs	r3, r3, #17
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800278e:	5cd3      	ldrb	r3, [r2, r3]
 8002790:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_RCC_GetSysClockFreq+0x98>)
 8002796:	fb02 f203 	mul.w	r2, r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e004      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027a8:	fb02 f303 	mul.w	r3, r2, r3
 80027ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	613b      	str	r3, [r7, #16]
      break;
 80027b2:	e002      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_RCC_GetSysClockFreq+0x98>)
 80027b6:	613b      	str	r3, [r7, #16]
      break;
 80027b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ba:	693b      	ldr	r3, [r7, #16]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	007a1200 	.word	0x007a1200
 80027d0:	08003050 	.word	0x08003050
 80027d4:	08003060 	.word	0x08003060
 80027d8:	003d0900 	.word	0x003d0900

080027dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <RCC_Delay+0x34>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <RCC_Delay+0x38>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0a5b      	lsrs	r3, r3, #9
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027f8:	bf00      	nop
  }
  while (Delay --);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1e5a      	subs	r2, r3, #1
 80027fe:	60fa      	str	r2, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f9      	bne.n	80027f8 <RCC_Delay+0x1c>
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000048 	.word	0x20000048
 8002814:	10624dd3 	.word	0x10624dd3

08002818 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e041      	b.n	80028ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fe ff4c 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3304      	adds	r3, #4
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f000 fa56 	bl	8002d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d001      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e035      	b.n	800293c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a16      	ldr	r2, [pc, #88]	; (8002948 <HAL_TIM_Base_Start_IT+0x90>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_TIM_Base_Start_IT+0x4e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fa:	d004      	beq.n	8002906 <HAL_TIM_Base_Start_IT+0x4e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_TIM_Base_Start_IT+0x94>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d111      	bne.n	800292a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2b06      	cmp	r3, #6
 8002916:	d010      	beq.n	800293a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002928:	e007      	b.n	800293a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40000400 	.word	0x40000400

08002950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d020      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0202 	mvn.w	r2, #2
 8002984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f998 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 80029a0:	e005      	b.n	80029ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f98b 	bl	8002cbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f99a 	bl	8002ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d020      	beq.n	8002a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01b      	beq.n	8002a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0204 	mvn.w	r2, #4
 80029d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f972 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 80029ec:	e005      	b.n	80029fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f965 	bl	8002cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f974 	bl	8002ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d020      	beq.n	8002a4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01b      	beq.n	8002a4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0208 	mvn.w	r2, #8
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2204      	movs	r2, #4
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f94c 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f93f 	bl	8002cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f94e 	bl	8002ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d020      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0210 	mvn.w	r2, #16
 8002a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f926 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8002a84:	e005      	b.n	8002a92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f919 	bl	8002cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f928 	bl	8002ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0201 	mvn.w	r2, #1
 8002ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7fe fbe4 	bl	8001284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00c      	beq.n	8002ae0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fa6f 	bl	8002fbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00c      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d007      	beq.n	8002b04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8f8 	bl	8002cf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00c      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0220 	mvn.w	r2, #32
 8002b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fa42 	bl	8002fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_TIM_ConfigClockSource+0x1c>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e0b4      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x186>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b84:	d03e      	beq.n	8002c04 <HAL_TIM_ConfigClockSource+0xd4>
 8002b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8a:	f200 8087 	bhi.w	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b92:	f000 8086 	beq.w	8002ca2 <HAL_TIM_ConfigClockSource+0x172>
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9a:	d87f      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002b9c:	2b70      	cmp	r3, #112	; 0x70
 8002b9e:	d01a      	beq.n	8002bd6 <HAL_TIM_ConfigClockSource+0xa6>
 8002ba0:	2b70      	cmp	r3, #112	; 0x70
 8002ba2:	d87b      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002ba4:	2b60      	cmp	r3, #96	; 0x60
 8002ba6:	d050      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x11a>
 8002ba8:	2b60      	cmp	r3, #96	; 0x60
 8002baa:	d877      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002bac:	2b50      	cmp	r3, #80	; 0x50
 8002bae:	d03c      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0xfa>
 8002bb0:	2b50      	cmp	r3, #80	; 0x50
 8002bb2:	d873      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	d058      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x13a>
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d86f      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002bbc:	2b30      	cmp	r3, #48	; 0x30
 8002bbe:	d064      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x15a>
 8002bc0:	2b30      	cmp	r3, #48	; 0x30
 8002bc2:	d86b      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d060      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x15a>
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d867      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d05c      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x15a>
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d05a      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x15a>
 8002bd4:	e062      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6899      	ldr	r1, [r3, #8]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f000 f96a 	bl	8002ebe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	609a      	str	r2, [r3, #8]
      break;
 8002c02:	e04f      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6899      	ldr	r1, [r3, #8]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f000 f953 	bl	8002ebe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c26:	609a      	str	r2, [r3, #8]
      break;
 8002c28:	e03c      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6859      	ldr	r1, [r3, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f000 f8ca 	bl	8002dd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2150      	movs	r1, #80	; 0x50
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f921 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c48:	e02c      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f000 f8e8 	bl	8002e2c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2160      	movs	r1, #96	; 0x60
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f911 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c68:	e01c      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f000 f8aa 	bl	8002dd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f901 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c88:	e00c      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	f000 f8f8 	bl	8002e8a <TIM_ITRx_SetConfig>
      break;
 8002c9a:	e003      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca0:	e000      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
	...

08002d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a2b      	ldr	r2, [pc, #172]	; (8002dc8 <TIM_Base_SetConfig+0xc0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d007      	beq.n	8002d30 <TIM_Base_SetConfig+0x28>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d003      	beq.n	8002d30 <TIM_Base_SetConfig+0x28>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a28      	ldr	r2, [pc, #160]	; (8002dcc <TIM_Base_SetConfig+0xc4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d108      	bne.n	8002d42 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a20      	ldr	r2, [pc, #128]	; (8002dc8 <TIM_Base_SetConfig+0xc0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <TIM_Base_SetConfig+0x52>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d003      	beq.n	8002d5a <TIM_Base_SetConfig+0x52>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a1d      	ldr	r2, [pc, #116]	; (8002dcc <TIM_Base_SetConfig+0xc4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d108      	bne.n	8002d6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <TIM_Base_SetConfig+0xc0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d103      	bne.n	8002da0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f023 0201 	bic.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	611a      	str	r2, [r3, #16]
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40000400 	.word	0x40000400

08002dd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f023 0201 	bic.w	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f023 030a 	bic.w	r3, r3, #10
 8002e0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	621a      	str	r2, [r3, #32]
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	f023 0210 	bic.w	r2, r3, #16
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	031b      	lsls	r3, r3, #12
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	621a      	str	r2, [r3, #32]
}
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b085      	sub	sp, #20
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f043 0307 	orr.w	r3, r3, #7
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	609a      	str	r2, [r3, #8]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b087      	sub	sp, #28
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	021a      	lsls	r2, r3, #8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	609a      	str	r2, [r3, #8]
}
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e041      	b.n	8002f98 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d009      	beq.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f60:	d004      	beq.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d10c      	bne.n	8002f86 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	40000400 	.word	0x40000400

08002fac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <__libc_init_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	4d0c      	ldr	r5, [pc, #48]	; (8003008 <__libc_init_array+0x38>)
 8002fd6:	4c0d      	ldr	r4, [pc, #52]	; (800300c <__libc_init_array+0x3c>)
 8002fd8:	1b64      	subs	r4, r4, r5
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	42a6      	cmp	r6, r4
 8002fde:	d109      	bne.n	8002ff4 <__libc_init_array+0x24>
 8002fe0:	f000 f822 	bl	8003028 <_init>
 8002fe4:	2600      	movs	r6, #0
 8002fe6:	4d0a      	ldr	r5, [pc, #40]	; (8003010 <__libc_init_array+0x40>)
 8002fe8:	4c0a      	ldr	r4, [pc, #40]	; (8003014 <__libc_init_array+0x44>)
 8002fea:	1b64      	subs	r4, r4, r5
 8002fec:	10a4      	asrs	r4, r4, #2
 8002fee:	42a6      	cmp	r6, r4
 8002ff0:	d105      	bne.n	8002ffe <__libc_init_array+0x2e>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff8:	4798      	blx	r3
 8002ffa:	3601      	adds	r6, #1
 8002ffc:	e7ee      	b.n	8002fdc <__libc_init_array+0xc>
 8002ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003002:	4798      	blx	r3
 8003004:	3601      	adds	r6, #1
 8003006:	e7f2      	b.n	8002fee <__libc_init_array+0x1e>
 8003008:	08003064 	.word	0x08003064
 800300c:	08003064 	.word	0x08003064
 8003010:	08003064 	.word	0x08003064
 8003014:	08003068 	.word	0x08003068

08003018 <memset>:
 8003018:	4603      	mov	r3, r0
 800301a:	4402      	add	r2, r0
 800301c:	4293      	cmp	r3, r2
 800301e:	d100      	bne.n	8003022 <memset+0xa>
 8003020:	4770      	bx	lr
 8003022:	f803 1b01 	strb.w	r1, [r3], #1
 8003026:	e7f9      	b.n	800301c <memset+0x4>

08003028 <_init>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	bf00      	nop
 800302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302e:	bc08      	pop	{r3}
 8003030:	469e      	mov	lr, r3
 8003032:	4770      	bx	lr

08003034 <_fini>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr
