
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002efc  08002efc  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002efc  08002efc  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002efc  08002efc  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f00  08002f00  00012f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000058  08002f58  00020058  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08002f58  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009965  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8a  00000000  00000000  000299e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002b670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f73  00000000  00000000  0002cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c68d  00000000  00000000  00043a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008253b  00000000  00000000  000500e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a20  00000000  00000000  000d2678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ec0 	.word	0x08002ec0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002ec0 	.word	0x08002ec0

0800014c <IsModeButtonPressed>:
int KeyReg3[3] = {NORMAL_STATE};
int Time = 200;
int ButtonFlag[3] = {0};


int IsModeButtonPressed(int pos){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(ButtonFlag[pos] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <IsModeButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <IsModeButtonPressed+0x22>
		ButtonFlag[pos] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <IsModeButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <IsModeButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000074 	.word	0x20000074

08000180 <MODEProcess>:

void MODEProcess(int idx){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	ButtonFlag[idx] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <MODEProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000074 	.word	0x20000074

080001a0 <getKeyInput1>:
void getKeyInput1(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e073      	b.n	8000294 <getKeyInput1+0xf4>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a3d      	ldr	r2, [pc, #244]	; (80002a4 <getKeyInput1+0x104>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493c      	ldr	r1, [pc, #240]	; (80002a8 <getKeyInput1+0x108>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a3b      	ldr	r2, [pc, #236]	; (80002ac <getKeyInput1+0x10c>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4937      	ldr	r1, [pc, #220]	; (80002a4 <getKeyInput1+0x104>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = (i == 0) ? HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) :
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d106      	bne.n	80001e0 <getKeyInput1+0x40>
 80001d2:	2180      	movs	r1, #128	; 0x80
 80001d4:	4836      	ldr	r0, [pc, #216]	; (80002b0 <getKeyInput1+0x110>)
 80001d6:	f001 fe47 	bl	8001e68 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	461a      	mov	r2, r3
 80001de:	e011      	b.n	8000204 <getKeyInput1+0x64>
		             (i == 1) ? HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) :
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d107      	bne.n	80001f6 <getKeyInput1+0x56>
 80001e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ea:	4831      	ldr	r0, [pc, #196]	; (80002b0 <getKeyInput1+0x110>)
 80001ec:	f001 fe3c 	bl	8001e68 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	461a      	mov	r2, r3
 80001f4:	e006      	b.n	8000204 <getKeyInput1+0x64>
		             HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 80001f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001fa:	482d      	ldr	r0, [pc, #180]	; (80002b0 <getKeyInput1+0x110>)
 80001fc:	f001 fe34 	bl	8001e68 <HAL_GPIO_ReadPin>
 8000200:	4603      	mov	r3, r0
		             (i == 1) ? HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) :
 8000202:	461a      	mov	r2, r3
		KeyReg2[i] = (i == 0) ? HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) :
 8000204:	4929      	ldr	r1, [pc, #164]	; (80002ac <getKeyInput1+0x10c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 800020c:	4a26      	ldr	r2, [pc, #152]	; (80002a8 <getKeyInput1+0x108>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	4923      	ldr	r1, [pc, #140]	; (80002a4 <getKeyInput1+0x104>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800021c:	429a      	cmp	r2, r3
 800021e:	d136      	bne.n	800028e <getKeyInput1+0xee>
 8000220:	4a20      	ldr	r2, [pc, #128]	; (80002a4 <getKeyInput1+0x104>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000228:	4920      	ldr	r1, [pc, #128]	; (80002ac <getKeyInput1+0x10c>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000230:	429a      	cmp	r2, r3
 8000232:	d12c      	bne.n	800028e <getKeyInput1+0xee>
			if(KeyReg3[i] != KeyReg2[i]){
 8000234:	4a1f      	ldr	r2, [pc, #124]	; (80002b4 <getKeyInput1+0x114>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	491b      	ldr	r1, [pc, #108]	; (80002ac <getKeyInput1+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000244:	429a      	cmp	r2, r3
 8000246:	d014      	beq.n	8000272 <getKeyInput1+0xd2>
				KeyReg3[i] = KeyReg2[i];
 8000248:	4a18      	ldr	r2, [pc, #96]	; (80002ac <getKeyInput1+0x10c>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000250:	4918      	ldr	r1, [pc, #96]	; (80002b4 <getKeyInput1+0x114>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE){
 8000258:	4a14      	ldr	r2, [pc, #80]	; (80002ac <getKeyInput1+0x10c>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d114      	bne.n	800028e <getKeyInput1+0xee>
					MODEProcess(i);
 8000264:	6878      	ldr	r0, [r7, #4]
 8000266:	f7ff ff8b 	bl	8000180 <MODEProcess>
					Time = 200;
 800026a:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <getKeyInput1+0x118>)
 800026c:	22c8      	movs	r2, #200	; 0xc8
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	e00d      	b.n	800028e <getKeyInput1+0xee>
				}
			}
			else{
				Time--;
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <getKeyInput1+0x118>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	3b01      	subs	r3, #1
 8000278:	4a0f      	ldr	r2, [pc, #60]	; (80002b8 <getKeyInput1+0x118>)
 800027a:	6013      	str	r3, [r2, #0]
				if(Time == 0){
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <getKeyInput1+0x118>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d104      	bne.n	800028e <getKeyInput1+0xee>
					KeyReg3[i] = NORMAL_STATE;
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <getKeyInput1+0x114>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2101      	movs	r1, #1
 800028a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 3; i++){
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	3301      	adds	r3, #1
 8000292:	607b      	str	r3, [r7, #4]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b02      	cmp	r3, #2
 8000298:	dd88      	ble.n	80001ac <getKeyInput1+0xc>
				}
			}
		}
	}
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000000c 	.word	0x2000000c
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000018 	.word	0x20000018
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	20000024 	.word	0x20000024
 80002b8:	20000030 	.word	0x20000030

080002bc <fsm_auto_run>:
 *
 *  Created on: Oct 29, 2024
 *      Author: Admin
 */
#include "fsm_auto.h"
void fsm_auto_run(){
 80002bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80002c0:	b082      	sub	sp, #8
 80002c2:	af00      	add	r7, sp, #0
	switch (status) {
 80002c4:	4b9f      	ldr	r3, [pc, #636]	; (8000544 <fsm_auto_run+0x288>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	2b04      	cmp	r3, #4
 80002cc:	f200 812c 	bhi.w	8000528 <fsm_auto_run+0x26c>
 80002d0:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_auto_run+0x1c>)
 80002d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d6:	bf00      	nop
 80002d8:	08000335 	.word	0x08000335
 80002dc:	080003b9 	.word	0x080003b9
 80002e0:	08000435 	.word	0x08000435
 80002e4:	080004af 	.word	0x080004af
 80002e8:	080002ed 	.word	0x080002ed
	    case INIT:
//	    	SCH_Init();
	    	mode = 1;
 80002ec:	4b96      	ldr	r3, [pc, #600]	; (8000548 <fsm_auto_run+0x28c>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	601a      	str	r2, [r3, #0]
	        timeRed = TIME_RED;
 80002f2:	4b96      	ldr	r3, [pc, #600]	; (800054c <fsm_auto_run+0x290>)
 80002f4:	2205      	movs	r2, #5
 80002f6:	601a      	str	r2, [r3, #0]
	        timeAmber = TIME_AMBER;
 80002f8:	4b95      	ldr	r3, [pc, #596]	; (8000550 <fsm_auto_run+0x294>)
 80002fa:	2202      	movs	r2, #2
 80002fc:	601a      	str	r2, [r3, #0]
	        timeGreen = TIME_GREEN;
 80002fe:	4b95      	ldr	r3, [pc, #596]	; (8000554 <fsm_auto_run+0x298>)
 8000300:	2203      	movs	r2, #3
 8000302:	601a      	str	r2, [r3, #0]
	        status = RED1_GREEN2;
 8000304:	4b8f      	ldr	r3, [pc, #572]	; (8000544 <fsm_auto_run+0x288>)
 8000306:	2201      	movs	r2, #1
 8000308:	601a      	str	r2, [r3, #0]
	        count = timeRed;
 800030a:	4b90      	ldr	r3, [pc, #576]	; (800054c <fsm_auto_run+0x290>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a92      	ldr	r2, [pc, #584]	; (8000558 <fsm_auto_run+0x29c>)
 8000310:	6013      	str	r3, [r2, #0]
	        wait = timeGreen;
 8000312:	4b90      	ldr	r3, [pc, #576]	; (8000554 <fsm_auto_run+0x298>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800031c:	498f      	ldr	r1, [pc, #572]	; (800055c <fsm_auto_run+0x2a0>)
 800031e:	e9c1 2300 	strd	r2, r3, [r1]
	        UpdateBuffer(mode, count);
 8000322:	4b89      	ldr	r3, [pc, #548]	; (8000548 <fsm_auto_run+0x28c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a8c      	ldr	r2, [pc, #560]	; (8000558 <fsm_auto_run+0x29c>)
 8000328:	6812      	ldr	r2, [r2, #0]
 800032a:	4611      	mov	r1, r2
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fd91 	bl	8000e54 <UpdateBuffer>
//	        SCH_Add_Task(LED7, 0, 250);
	        break;
 8000332:	e102      	b.n	800053a <fsm_auto_run+0x27e>

	    case RED1_GREEN2:
	        displayRED1();
 8000334:	f001 f97a 	bl	800162c <displayRED1>
	        displayGREEN2();
 8000338:	f001 f9e6 	bl	8001708 <displayGREEN2>
	        if(wait == 0){
 800033c:	4b87      	ldr	r3, [pc, #540]	; (800055c <fsm_auto_run+0x2a0>)
 800033e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000342:	4313      	orrs	r3, r2
 8000344:	d10b      	bne.n	800035e <fsm_auto_run+0xa2>
	        	status = RED1_AMBER2;
 8000346:	4b7f      	ldr	r3, [pc, #508]	; (8000544 <fsm_auto_run+0x288>)
 8000348:	2202      	movs	r2, #2
 800034a:	601a      	str	r2, [r3, #0]
	        	wait = timeAmber;
 800034c:	4b80      	ldr	r3, [pc, #512]	; (8000550 <fsm_auto_run+0x294>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	461a      	mov	r2, r3
 8000352:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000356:	4981      	ldr	r1, [pc, #516]	; (800055c <fsm_auto_run+0x2a0>)
 8000358:	e9c1 2300 	strd	r2, r3, [r1]
 800035c:	e00d      	b.n	800037a <fsm_auto_run+0xbe>
	        }
	        else{
	        	--wait;
 800035e:	4b7f      	ldr	r3, [pc, #508]	; (800055c <fsm_auto_run+0x2a0>)
 8000360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000364:	f112 31ff 	adds.w	r1, r2, #4294967295
 8000368:	6039      	str	r1, [r7, #0]
 800036a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	4b7a      	ldr	r3, [pc, #488]	; (800055c <fsm_auto_run+0x2a0>)
 8000372:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000376:	e9c3 1200 	strd	r1, r2, [r3]
	        }
	        if(IsModeButtonPressed(0) == 1){
 800037a:	2000      	movs	r0, #0
 800037c:	f7ff fee6 	bl	800014c <IsModeButtonPressed>
 8000380:	4603      	mov	r3, r0
 8000382:	2b01      	cmp	r3, #1
 8000384:	f040 80d2 	bne.w	800052c <fsm_auto_run+0x270>
//	        	SCH_Init();
	        	OFF();
 8000388:	f001 fa3a 	bl	8001800 <OFF>
	        	mode = 2;
 800038c:	4b6e      	ldr	r3, [pc, #440]	; (8000548 <fsm_auto_run+0x28c>)
 800038e:	2202      	movs	r2, #2
 8000390:	601a      	str	r2, [r3, #0]
	        	wait = 7;
 8000392:	4972      	ldr	r1, [pc, #456]	; (800055c <fsm_auto_run+0x2a0>)
 8000394:	f04f 0207 	mov.w	r2, #7
 8000398:	f04f 0300 	mov.w	r3, #0
 800039c:	e9c1 2300 	strd	r2, r3, [r1]
	        	UpdateBuffer(mode, timeRed);
 80003a0:	4b69      	ldr	r3, [pc, #420]	; (8000548 <fsm_auto_run+0x28c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a69      	ldr	r2, [pc, #420]	; (800054c <fsm_auto_run+0x290>)
 80003a6:	6812      	ldr	r2, [r2, #0]
 80003a8:	4611      	mov	r1, r2
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fd52 	bl	8000e54 <UpdateBuffer>
//	        	SCH_Add_Task(LED7, 0, 250);
//	        	ResetStatus();
	        	status = MAN_RED;
 80003b0:	4b64      	ldr	r3, [pc, #400]	; (8000544 <fsm_auto_run+0x288>)
 80003b2:	2206      	movs	r2, #6
 80003b4:	601a      	str	r2, [r3, #0]
	        }
	        break;
 80003b6:	e0b9      	b.n	800052c <fsm_auto_run+0x270>

	    case RED1_AMBER2:
	        displayRED1();
 80003b8:	f001 f938 	bl	800162c <displayRED1>
	        displayAMBER2();
 80003bc:	f001 f98e 	bl	80016dc <displayAMBER2>
	        if(wait == 0){
 80003c0:	4b66      	ldr	r3, [pc, #408]	; (800055c <fsm_auto_run+0x2a0>)
 80003c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003c6:	4313      	orrs	r3, r2
 80003c8:	d10b      	bne.n	80003e2 <fsm_auto_run+0x126>
	        	 status = GREEN1_RED2;
 80003ca:	4b5e      	ldr	r3, [pc, #376]	; (8000544 <fsm_auto_run+0x288>)
 80003cc:	2203      	movs	r2, #3
 80003ce:	601a      	str	r2, [r3, #0]
	        	 wait = timeGreen;
 80003d0:	4b60      	ldr	r3, [pc, #384]	; (8000554 <fsm_auto_run+0x298>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	461a      	mov	r2, r3
 80003d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80003da:	4960      	ldr	r1, [pc, #384]	; (800055c <fsm_auto_run+0x2a0>)
 80003dc:	e9c1 2300 	strd	r2, r3, [r1]
 80003e0:	e009      	b.n	80003f6 <fsm_auto_run+0x13a>
	        }
	        else{
	        	 --wait;
 80003e2:	4b5e      	ldr	r3, [pc, #376]	; (800055c <fsm_auto_run+0x2a0>)
 80003e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e8:	f112 3aff 	adds.w	sl, r2, #4294967295
 80003ec:	f143 3bff 	adc.w	fp, r3, #4294967295
 80003f0:	4b5a      	ldr	r3, [pc, #360]	; (800055c <fsm_auto_run+0x2a0>)
 80003f2:	e9c3 ab00 	strd	sl, fp, [r3]
	        }
	        if(IsModeButtonPressed(0) == 1){
 80003f6:	2000      	movs	r0, #0
 80003f8:	f7ff fea8 	bl	800014c <IsModeButtonPressed>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b01      	cmp	r3, #1
 8000400:	f040 8096 	bne.w	8000530 <fsm_auto_run+0x274>
	        //	        	SCH_Init();
	        	        	OFF();
 8000404:	f001 f9fc 	bl	8001800 <OFF>
	        	        	mode = 2;
 8000408:	4b4f      	ldr	r3, [pc, #316]	; (8000548 <fsm_auto_run+0x28c>)
 800040a:	2202      	movs	r2, #2
 800040c:	601a      	str	r2, [r3, #0]
	        	        	wait = 7;
 800040e:	4953      	ldr	r1, [pc, #332]	; (800055c <fsm_auto_run+0x2a0>)
 8000410:	f04f 0207 	mov.w	r2, #7
 8000414:	f04f 0300 	mov.w	r3, #0
 8000418:	e9c1 2300 	strd	r2, r3, [r1]
	        	        	UpdateBuffer(mode, timeRed);
 800041c:	4b4a      	ldr	r3, [pc, #296]	; (8000548 <fsm_auto_run+0x28c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a4a      	ldr	r2, [pc, #296]	; (800054c <fsm_auto_run+0x290>)
 8000422:	6812      	ldr	r2, [r2, #0]
 8000424:	4611      	mov	r1, r2
 8000426:	4618      	mov	r0, r3
 8000428:	f000 fd14 	bl	8000e54 <UpdateBuffer>
	        //	        	SCH_Add_Task(LED7, 0, 250);
//	        	        	ResetStatus();
	        	        	status = MAN_RED;
 800042c:	4b45      	ldr	r3, [pc, #276]	; (8000544 <fsm_auto_run+0x288>)
 800042e:	2206      	movs	r2, #6
 8000430:	601a      	str	r2, [r3, #0]
	        	        }
	        break;
 8000432:	e07d      	b.n	8000530 <fsm_auto_run+0x274>

	    case GREEN1_RED2:
	        displayGREEN1();
 8000434:	f001 f926 	bl	8001684 <displayGREEN1>
	        displayRED2();
 8000438:	f001 f93a 	bl	80016b0 <displayRED2>
	        if(wait == 0){
 800043c:	4b47      	ldr	r3, [pc, #284]	; (800055c <fsm_auto_run+0x2a0>)
 800043e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000442:	4313      	orrs	r3, r2
 8000444:	d10b      	bne.n	800045e <fsm_auto_run+0x1a2>
	        	status = AMBER1_RED2;
 8000446:	4b3f      	ldr	r3, [pc, #252]	; (8000544 <fsm_auto_run+0x288>)
 8000448:	2204      	movs	r2, #4
 800044a:	601a      	str	r2, [r3, #0]
	        	wait = timeAmber;
 800044c:	4b40      	ldr	r3, [pc, #256]	; (8000550 <fsm_auto_run+0x294>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	461a      	mov	r2, r3
 8000452:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000456:	4941      	ldr	r1, [pc, #260]	; (800055c <fsm_auto_run+0x2a0>)
 8000458:	e9c1 2300 	strd	r2, r3, [r1]
 800045c:	e009      	b.n	8000472 <fsm_auto_run+0x1b6>
	        }
	        else{
	        	--wait;
 800045e:	4b3f      	ldr	r3, [pc, #252]	; (800055c <fsm_auto_run+0x2a0>)
 8000460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000464:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000468:	f143 39ff 	adc.w	r9, r3, #4294967295
 800046c:	4b3b      	ldr	r3, [pc, #236]	; (800055c <fsm_auto_run+0x2a0>)
 800046e:	e9c3 8900 	strd	r8, r9, [r3]
	        }
	        if(IsModeButtonPressed(0) == 1){
 8000472:	2000      	movs	r0, #0
 8000474:	f7ff fe6a 	bl	800014c <IsModeButtonPressed>
 8000478:	4603      	mov	r3, r0
 800047a:	2b01      	cmp	r3, #1
 800047c:	d15a      	bne.n	8000534 <fsm_auto_run+0x278>
	        //	        	SCH_Init();
	        	        	OFF();
 800047e:	f001 f9bf 	bl	8001800 <OFF>
	        	        	mode = 2;
 8000482:	4b31      	ldr	r3, [pc, #196]	; (8000548 <fsm_auto_run+0x28c>)
 8000484:	2202      	movs	r2, #2
 8000486:	601a      	str	r2, [r3, #0]
	        	        	wait = 7;
 8000488:	4934      	ldr	r1, [pc, #208]	; (800055c <fsm_auto_run+0x2a0>)
 800048a:	f04f 0207 	mov.w	r2, #7
 800048e:	f04f 0300 	mov.w	r3, #0
 8000492:	e9c1 2300 	strd	r2, r3, [r1]
	        	        	UpdateBuffer(mode, timeRed);
 8000496:	4b2c      	ldr	r3, [pc, #176]	; (8000548 <fsm_auto_run+0x28c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a2c      	ldr	r2, [pc, #176]	; (800054c <fsm_auto_run+0x290>)
 800049c:	6812      	ldr	r2, [r2, #0]
 800049e:	4611      	mov	r1, r2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fcd7 	bl	8000e54 <UpdateBuffer>
	        //	        	SCH_Add_Task(LED7, 0, 250);
//	        	        	ResetStatus();
	        	        	status = MAN_RED;
 80004a6:	4b27      	ldr	r3, [pc, #156]	; (8000544 <fsm_auto_run+0x288>)
 80004a8:	2206      	movs	r2, #6
 80004aa:	601a      	str	r2, [r3, #0]
	        	        }
	        break;
 80004ac:	e042      	b.n	8000534 <fsm_auto_run+0x278>

	    case AMBER1_RED2:
	        displayAMBER1();
 80004ae:	f001 f8d3 	bl	8001658 <displayAMBER1>
	        displayRED2();
 80004b2:	f001 f8fd 	bl	80016b0 <displayRED2>
	        if(wait == 0){
 80004b6:	4b29      	ldr	r3, [pc, #164]	; (800055c <fsm_auto_run+0x2a0>)
 80004b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004bc:	4313      	orrs	r3, r2
 80004be:	d10b      	bne.n	80004d8 <fsm_auto_run+0x21c>
	        	status = RED1_GREEN2;;
 80004c0:	4b20      	ldr	r3, [pc, #128]	; (8000544 <fsm_auto_run+0x288>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	601a      	str	r2, [r3, #0]
	        	wait = timeGreen;
 80004c6:	4b23      	ldr	r3, [pc, #140]	; (8000554 <fsm_auto_run+0x298>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	461a      	mov	r2, r3
 80004cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80004d0:	4922      	ldr	r1, [pc, #136]	; (800055c <fsm_auto_run+0x2a0>)
 80004d2:	e9c1 2300 	strd	r2, r3, [r1]
 80004d6:	e009      	b.n	80004ec <fsm_auto_run+0x230>
	       }
	       else{
	        	--wait;
 80004d8:	4b20      	ldr	r3, [pc, #128]	; (800055c <fsm_auto_run+0x2a0>)
 80004da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004de:	f112 34ff 	adds.w	r4, r2, #4294967295
 80004e2:	f143 35ff 	adc.w	r5, r3, #4294967295
 80004e6:	4b1d      	ldr	r3, [pc, #116]	; (800055c <fsm_auto_run+0x2a0>)
 80004e8:	e9c3 4500 	strd	r4, r5, [r3]
	       }
	        if(IsModeButtonPressed(0) == 1){
 80004ec:	2000      	movs	r0, #0
 80004ee:	f7ff fe2d 	bl	800014c <IsModeButtonPressed>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d11f      	bne.n	8000538 <fsm_auto_run+0x27c>
	        //	        	SCH_Init();
	        	        	OFF();
 80004f8:	f001 f982 	bl	8001800 <OFF>
	        	        	mode = 2;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <fsm_auto_run+0x28c>)
 80004fe:	2202      	movs	r2, #2
 8000500:	601a      	str	r2, [r3, #0]
	        	        	wait = 7;
 8000502:	4916      	ldr	r1, [pc, #88]	; (800055c <fsm_auto_run+0x2a0>)
 8000504:	f04f 0207 	mov.w	r2, #7
 8000508:	f04f 0300 	mov.w	r3, #0
 800050c:	e9c1 2300 	strd	r2, r3, [r1]
	        	        	UpdateBuffer(mode, timeRed);
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <fsm_auto_run+0x28c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <fsm_auto_run+0x290>)
 8000516:	6812      	ldr	r2, [r2, #0]
 8000518:	4611      	mov	r1, r2
 800051a:	4618      	mov	r0, r3
 800051c:	f000 fc9a 	bl	8000e54 <UpdateBuffer>
	        //	        	SCH_Add_Task(LED7, 0, 250);
//	        	        	ResetStatus();
	        	        	status = MAN_RED;
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <fsm_auto_run+0x288>)
 8000522:	2206      	movs	r2, #6
 8000524:	601a      	str	r2, [r3, #0]
	        	        }
	        break;
 8000526:	e007      	b.n	8000538 <fsm_auto_run+0x27c>

	    default:
	        break;
 8000528:	bf00      	nop
 800052a:	e006      	b.n	800053a <fsm_auto_run+0x27e>
	        break;
 800052c:	bf00      	nop
 800052e:	e004      	b.n	800053a <fsm_auto_run+0x27e>
	        break;
 8000530:	bf00      	nop
 8000532:	e002      	b.n	800053a <fsm_auto_run+0x27e>
	        break;
 8000534:	bf00      	nop
 8000536:	e000      	b.n	800053a <fsm_auto_run+0x27e>
	        break;
 8000538:	bf00      	nop
	    }

}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000544:	20000080 	.word	0x20000080
 8000548:	20000034 	.word	0x20000034
 800054c:	2000003c 	.word	0x2000003c
 8000550:	20000040 	.word	0x20000040
 8000554:	20000044 	.word	0x20000044
 8000558:	20000038 	.word	0x20000038
 800055c:	20000088 	.word	0x20000088

08000560 <fsm_man_run>:
 *
 *  Created on: Oct 29, 2024
 *      Author: Admin
 */
#include "fsm_man.h"
void fsm_man_run(){
 8000560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000564:	af00      	add	r7, sp, #0
	switch(status){
 8000566:	4b8e      	ldr	r3, [pc, #568]	; (80007a0 <fsm_man_run+0x240>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b08      	cmp	r3, #8
 800056c:	f000 8126 	beq.w	80007bc <fsm_man_run+0x25c>
 8000570:	2b08      	cmp	r3, #8
 8000572:	f300 81a4 	bgt.w	80008be <fsm_man_run+0x35e>
 8000576:	2b06      	cmp	r3, #6
 8000578:	d003      	beq.n	8000582 <fsm_man_run+0x22>
 800057a:	2b07      	cmp	r3, #7
 800057c:	f000 8087 	beq.w	800068e <fsm_man_run+0x12e>
			mode = 1;
			UpdateBuffer(mode, count);
		}
		break;
	default:
		break;
 8000580:	e19d      	b.n	80008be <fsm_man_run+0x35e>
		UpdateBuffer(mode, timeRed);
 8000582:	4b88      	ldr	r3, [pc, #544]	; (80007a4 <fsm_man_run+0x244>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a88      	ldr	r2, [pc, #544]	; (80007a8 <fsm_man_run+0x248>)
 8000588:	6812      	ldr	r2, [r2, #0]
 800058a:	4611      	mov	r1, r2
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fc61 	bl	8000e54 <UpdateBuffer>
		BlinkRED();
 8000592:	f001 f8cf 	bl	8001734 <BlinkRED>
		if(IsModeButtonPressed(0) == 1){
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff fdd8 	bl	800014c <IsModeButtonPressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d114      	bne.n	80005cc <fsm_man_run+0x6c>
			OFF();
 80005a2:	f001 f92d 	bl	8001800 <OFF>
			mode = 3;
 80005a6:	4b7f      	ldr	r3, [pc, #508]	; (80007a4 <fsm_man_run+0x244>)
 80005a8:	2203      	movs	r2, #3
 80005aa:	601a      	str	r2, [r3, #0]
			UpdateBuffer(mode, TIME_AMBER);
 80005ac:	4b7d      	ldr	r3, [pc, #500]	; (80007a4 <fsm_man_run+0x244>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2102      	movs	r1, #2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fc4e 	bl	8000e54 <UpdateBuffer>
			status = MAN_AMBER;
 80005b8:	4b79      	ldr	r3, [pc, #484]	; (80007a0 <fsm_man_run+0x240>)
 80005ba:	2207      	movs	r2, #7
 80005bc:	601a      	str	r2, [r3, #0]
			wait = 7;
 80005be:	497b      	ldr	r1, [pc, #492]	; (80007ac <fsm_man_run+0x24c>)
 80005c0:	f04f 0207 	mov.w	r2, #7
 80005c4:	f04f 0300 	mov.w	r3, #0
 80005c8:	e9c1 2300 	strd	r2, r3, [r1]
		if(IsModeButtonPressed(1) == 1){
 80005cc:	2001      	movs	r0, #1
 80005ce:	f7ff fdbd 	bl	800014c <IsModeButtonPressed>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d128      	bne.n	800062a <fsm_man_run+0xca>
			if(timeRed < 99 && timeRed < 99 && timeGreen < 99){
 80005d8:	4b73      	ldr	r3, [pc, #460]	; (80007a8 <fsm_man_run+0x248>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b62      	cmp	r3, #98	; 0x62
 80005de:	dc24      	bgt.n	800062a <fsm_man_run+0xca>
 80005e0:	4b71      	ldr	r3, [pc, #452]	; (80007a8 <fsm_man_run+0x248>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b62      	cmp	r3, #98	; 0x62
 80005e6:	dc20      	bgt.n	800062a <fsm_man_run+0xca>
 80005e8:	4b71      	ldr	r3, [pc, #452]	; (80007b0 <fsm_man_run+0x250>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b62      	cmp	r3, #98	; 0x62
 80005ee:	dc1c      	bgt.n	800062a <fsm_man_run+0xca>
			   timeRed++;
 80005f0:	4b6d      	ldr	r3, [pc, #436]	; (80007a8 <fsm_man_run+0x248>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	4a6c      	ldr	r2, [pc, #432]	; (80007a8 <fsm_man_run+0x248>)
 80005f8:	6013      	str	r3, [r2, #0]
			   timeGreen++;
 80005fa:	4b6d      	ldr	r3, [pc, #436]	; (80007b0 <fsm_man_run+0x250>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	4a6b      	ldr	r2, [pc, #428]	; (80007b0 <fsm_man_run+0x250>)
 8000602:	6013      	str	r3, [r2, #0]
			   count = timeRed;
 8000604:	4b68      	ldr	r3, [pc, #416]	; (80007a8 <fsm_man_run+0x248>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a6a      	ldr	r2, [pc, #424]	; (80007b4 <fsm_man_run+0x254>)
 800060a:	6013      	str	r3, [r2, #0]
			   UpdateBuffer(mode, count);
 800060c:	4b65      	ldr	r3, [pc, #404]	; (80007a4 <fsm_man_run+0x244>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a68      	ldr	r2, [pc, #416]	; (80007b4 <fsm_man_run+0x254>)
 8000612:	6812      	ldr	r2, [r2, #0]
 8000614:	4611      	mov	r1, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fc1c 	bl	8000e54 <UpdateBuffer>
			   wait = 7;
 800061c:	4963      	ldr	r1, [pc, #396]	; (80007ac <fsm_man_run+0x24c>)
 800061e:	f04f 0207 	mov.w	r2, #7
 8000622:	f04f 0300 	mov.w	r3, #0
 8000626:	e9c1 2300 	strd	r2, r3, [r1]
		if(wait == 0){
 800062a:	4b60      	ldr	r3, [pc, #384]	; (80007ac <fsm_man_run+0x24c>)
 800062c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000630:	4313      	orrs	r3, r2
 8000632:	d103      	bne.n	800063c <fsm_man_run+0xdc>
			status = INIT;
 8000634:	4b5a      	ldr	r3, [pc, #360]	; (80007a0 <fsm_man_run+0x240>)
 8000636:	2205      	movs	r2, #5
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	e009      	b.n	8000650 <fsm_man_run+0xf0>
			--wait;
 800063c:	4b5b      	ldr	r3, [pc, #364]	; (80007ac <fsm_man_run+0x24c>)
 800063e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000642:	f112 3aff 	adds.w	sl, r2, #4294967295
 8000646:	f143 3bff 	adc.w	fp, r3, #4294967295
 800064a:	4b58      	ldr	r3, [pc, #352]	; (80007ac <fsm_man_run+0x24c>)
 800064c:	e9c3 ab00 	strd	sl, fp, [r3]
		if(IsModeButtonPressed(2) == 1){
 8000650:	2002      	movs	r0, #2
 8000652:	f7ff fd7b 	bl	800014c <IsModeButtonPressed>
 8000656:	4603      	mov	r3, r0
 8000658:	2b01      	cmp	r3, #1
 800065a:	f040 8132 	bne.w	80008c2 <fsm_man_run+0x362>
			count = timeRed;
 800065e:	4b52      	ldr	r3, [pc, #328]	; (80007a8 <fsm_man_run+0x248>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a54      	ldr	r2, [pc, #336]	; (80007b4 <fsm_man_run+0x254>)
 8000664:	6013      	str	r3, [r2, #0]
			wait = timeGreen;
 8000666:	4b52      	ldr	r3, [pc, #328]	; (80007b0 <fsm_man_run+0x250>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	461a      	mov	r2, r3
 800066c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000670:	494e      	ldr	r1, [pc, #312]	; (80007ac <fsm_man_run+0x24c>)
 8000672:	e9c1 2300 	strd	r2, r3, [r1]
			status = RED1_GREEN2;
 8000676:	4b4a      	ldr	r3, [pc, #296]	; (80007a0 <fsm_man_run+0x240>)
 8000678:	2201      	movs	r2, #1
 800067a:	601a      	str	r2, [r3, #0]
			UpdateBuffer(mode, count);
 800067c:	4b49      	ldr	r3, [pc, #292]	; (80007a4 <fsm_man_run+0x244>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a4c      	ldr	r2, [pc, #304]	; (80007b4 <fsm_man_run+0x254>)
 8000682:	6812      	ldr	r2, [r2, #0]
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fbe4 	bl	8000e54 <UpdateBuffer>
		break;
 800068c:	e119      	b.n	80008c2 <fsm_man_run+0x362>
		BlinkAMBER();
 800068e:	f001 f873 	bl	8001778 <BlinkAMBER>
		UpdateBuffer(mode, timeAmber);
 8000692:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <fsm_man_run+0x244>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a48      	ldr	r2, [pc, #288]	; (80007b8 <fsm_man_run+0x258>)
 8000698:	6812      	ldr	r2, [r2, #0]
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fbd9 	bl	8000e54 <UpdateBuffer>
		if(IsModeButtonPressed(0) == 1){
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff fd52 	bl	800014c <IsModeButtonPressed>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d116      	bne.n	80006dc <fsm_man_run+0x17c>
					OFF();
 80006ae:	f001 f8a7 	bl	8001800 <OFF>
					mode = 4;
 80006b2:	4b3c      	ldr	r3, [pc, #240]	; (80007a4 <fsm_man_run+0x244>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	601a      	str	r2, [r3, #0]
					UpdateBuffer(mode, timeGreen);
 80006b8:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <fsm_man_run+0x244>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a3c      	ldr	r2, [pc, #240]	; (80007b0 <fsm_man_run+0x250>)
 80006be:	6812      	ldr	r2, [r2, #0]
 80006c0:	4611      	mov	r1, r2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fbc6 	bl	8000e54 <UpdateBuffer>
					status = MAN_GREEN;
 80006c8:	4b35      	ldr	r3, [pc, #212]	; (80007a0 <fsm_man_run+0x240>)
 80006ca:	2208      	movs	r2, #8
 80006cc:	601a      	str	r2, [r3, #0]
					wait = 7;
 80006ce:	4937      	ldr	r1, [pc, #220]	; (80007ac <fsm_man_run+0x24c>)
 80006d0:	f04f 0207 	mov.w	r2, #7
 80006d4:	f04f 0300 	mov.w	r3, #0
 80006d8:	e9c1 2300 	strd	r2, r3, [r1]
		if(IsModeButtonPressed(1) == 1){
 80006dc:	2001      	movs	r0, #1
 80006de:	f7ff fd35 	bl	800014c <IsModeButtonPressed>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d128      	bne.n	800073a <fsm_man_run+0x1da>
			if(timeRed < 99 && timeRed < 99 && timeGreen < 99){
 80006e8:	4b2f      	ldr	r3, [pc, #188]	; (80007a8 <fsm_man_run+0x248>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b62      	cmp	r3, #98	; 0x62
 80006ee:	dc24      	bgt.n	800073a <fsm_man_run+0x1da>
 80006f0:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <fsm_man_run+0x248>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b62      	cmp	r3, #98	; 0x62
 80006f6:	dc20      	bgt.n	800073a <fsm_man_run+0x1da>
 80006f8:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <fsm_man_run+0x250>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b62      	cmp	r3, #98	; 0x62
 80006fe:	dc1c      	bgt.n	800073a <fsm_man_run+0x1da>
			   timeAmber++;
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <fsm_man_run+0x258>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	4a2c      	ldr	r2, [pc, #176]	; (80007b8 <fsm_man_run+0x258>)
 8000708:	6013      	str	r3, [r2, #0]
			   timeRed++;
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <fsm_man_run+0x248>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	4a25      	ldr	r2, [pc, #148]	; (80007a8 <fsm_man_run+0x248>)
 8000712:	6013      	str	r3, [r2, #0]
			   count = timeAmber;
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <fsm_man_run+0x258>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a26      	ldr	r2, [pc, #152]	; (80007b4 <fsm_man_run+0x254>)
 800071a:	6013      	str	r3, [r2, #0]
			   UpdateBuffer(mode, count);
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <fsm_man_run+0x244>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <fsm_man_run+0x254>)
 8000722:	6812      	ldr	r2, [r2, #0]
 8000724:	4611      	mov	r1, r2
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fb94 	bl	8000e54 <UpdateBuffer>
			   wait = 7;
 800072c:	491f      	ldr	r1, [pc, #124]	; (80007ac <fsm_man_run+0x24c>)
 800072e:	f04f 0207 	mov.w	r2, #7
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	e9c1 2300 	strd	r2, r3, [r1]
		if(wait == 0){
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <fsm_man_run+0x24c>)
 800073c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000740:	4313      	orrs	r3, r2
 8000742:	d103      	bne.n	800074c <fsm_man_run+0x1ec>
					status = INIT;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <fsm_man_run+0x240>)
 8000746:	2205      	movs	r2, #5
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	e009      	b.n	8000760 <fsm_man_run+0x200>
					--wait;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <fsm_man_run+0x24c>)
 800074e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000752:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000756:	f143 39ff 	adc.w	r9, r3, #4294967295
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <fsm_man_run+0x24c>)
 800075c:	e9c3 8900 	strd	r8, r9, [r3]
		if(IsModeButtonPressed(2) == 1){
 8000760:	2002      	movs	r0, #2
 8000762:	f7ff fcf3 	bl	800014c <IsModeButtonPressed>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	f040 80ac 	bne.w	80008c6 <fsm_man_run+0x366>
			count = timeRed;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <fsm_man_run+0x248>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <fsm_man_run+0x254>)
 8000774:	6013      	str	r3, [r2, #0]
			wait = timeGreen;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <fsm_man_run+0x250>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	461a      	mov	r2, r3
 800077c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000780:	490a      	ldr	r1, [pc, #40]	; (80007ac <fsm_man_run+0x24c>)
 8000782:	e9c1 2300 	strd	r2, r3, [r1]
			status = RED1_GREEN2;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <fsm_man_run+0x240>)
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
			UpdateBuffer(mode, count);
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <fsm_man_run+0x244>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <fsm_man_run+0x254>)
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	4611      	mov	r1, r2
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fb5c 	bl	8000e54 <UpdateBuffer>
		break;
 800079c:	e093      	b.n	80008c6 <fsm_man_run+0x366>
 800079e:	bf00      	nop
 80007a0:	20000080 	.word	0x20000080
 80007a4:	20000034 	.word	0x20000034
 80007a8:	2000003c 	.word	0x2000003c
 80007ac:	20000088 	.word	0x20000088
 80007b0:	20000044 	.word	0x20000044
 80007b4:	20000038 	.word	0x20000038
 80007b8:	20000040 	.word	0x20000040
		BlinkGREEN();
 80007bc:	f000 fffe 	bl	80017bc <BlinkGREEN>
		UpdateBuffer(mode, timeGreen);
 80007c0:	4b44      	ldr	r3, [pc, #272]	; (80008d4 <fsm_man_run+0x374>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a44      	ldr	r2, [pc, #272]	; (80008d8 <fsm_man_run+0x378>)
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fb42 	bl	8000e54 <UpdateBuffer>
		if(IsModeButtonPressed(1) == 1){
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fcbb 	bl	800014c <IsModeButtonPressed>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d128      	bne.n	800082e <fsm_man_run+0x2ce>
			if(timeRed < 99 && timeRed < 99 && timeGreen < 99){
 80007dc:	4b3f      	ldr	r3, [pc, #252]	; (80008dc <fsm_man_run+0x37c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b62      	cmp	r3, #98	; 0x62
 80007e2:	dc24      	bgt.n	800082e <fsm_man_run+0x2ce>
 80007e4:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <fsm_man_run+0x37c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b62      	cmp	r3, #98	; 0x62
 80007ea:	dc20      	bgt.n	800082e <fsm_man_run+0x2ce>
 80007ec:	4b3a      	ldr	r3, [pc, #232]	; (80008d8 <fsm_man_run+0x378>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b62      	cmp	r3, #98	; 0x62
 80007f2:	dc1c      	bgt.n	800082e <fsm_man_run+0x2ce>
			   timeGreen++;
 80007f4:	4b38      	ldr	r3, [pc, #224]	; (80008d8 <fsm_man_run+0x378>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a37      	ldr	r2, [pc, #220]	; (80008d8 <fsm_man_run+0x378>)
 80007fc:	6013      	str	r3, [r2, #0]
			   timeRed++;
 80007fe:	4b37      	ldr	r3, [pc, #220]	; (80008dc <fsm_man_run+0x37c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	4a35      	ldr	r2, [pc, #212]	; (80008dc <fsm_man_run+0x37c>)
 8000806:	6013      	str	r3, [r2, #0]
			   count = timeGreen;
 8000808:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <fsm_man_run+0x378>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a34      	ldr	r2, [pc, #208]	; (80008e0 <fsm_man_run+0x380>)
 800080e:	6013      	str	r3, [r2, #0]
			   UpdateBuffer(mode, count);
 8000810:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <fsm_man_run+0x374>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a32      	ldr	r2, [pc, #200]	; (80008e0 <fsm_man_run+0x380>)
 8000816:	6812      	ldr	r2, [r2, #0]
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fb1a 	bl	8000e54 <UpdateBuffer>
			   wait = 7;
 8000820:	4930      	ldr	r1, [pc, #192]	; (80008e4 <fsm_man_run+0x384>)
 8000822:	f04f 0207 	mov.w	r2, #7
 8000826:	f04f 0300 	mov.w	r3, #0
 800082a:	e9c1 2300 	strd	r2, r3, [r1]
		if(wait == 0){
 800082e:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <fsm_man_run+0x384>)
 8000830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000834:	4313      	orrs	r3, r2
 8000836:	d103      	bne.n	8000840 <fsm_man_run+0x2e0>
					status = INIT;
 8000838:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <fsm_man_run+0x388>)
 800083a:	2205      	movs	r2, #5
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	e009      	b.n	8000854 <fsm_man_run+0x2f4>
					--wait;
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <fsm_man_run+0x384>)
 8000842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000846:	f112 34ff 	adds.w	r4, r2, #4294967295
 800084a:	f143 35ff 	adc.w	r5, r3, #4294967295
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <fsm_man_run+0x384>)
 8000850:	e9c3 4500 	strd	r4, r5, [r3]
		if(IsModeButtonPressed(2) == 1){
 8000854:	2002      	movs	r0, #2
 8000856:	f7ff fc79 	bl	800014c <IsModeButtonPressed>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d116      	bne.n	800088e <fsm_man_run+0x32e>
			count = timeRed;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <fsm_man_run+0x37c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <fsm_man_run+0x380>)
 8000866:	6013      	str	r3, [r2, #0]
			wait = timeGreen;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <fsm_man_run+0x378>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000872:	491c      	ldr	r1, [pc, #112]	; (80008e4 <fsm_man_run+0x384>)
 8000874:	e9c1 2300 	strd	r2, r3, [r1]
			status = RED1_GREEN2;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <fsm_man_run+0x388>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]
			UpdateBuffer(mode, count);
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <fsm_man_run+0x374>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <fsm_man_run+0x380>)
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fae3 	bl	8000e54 <UpdateBuffer>
		if(IsModeButtonPressed(0) == 1){
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fc5c 	bl	800014c <IsModeButtonPressed>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d117      	bne.n	80008ca <fsm_man_run+0x36a>
			status = INIT;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <fsm_man_run+0x388>)
 800089c:	2205      	movs	r2, #5
 800089e:	601a      	str	r2, [r3, #0]
			count = TIME_RED;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <fsm_man_run+0x380>)
 80008a2:	2205      	movs	r2, #5
 80008a4:	601a      	str	r2, [r3, #0]
			mode = 1;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <fsm_man_run+0x374>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	601a      	str	r2, [r3, #0]
			UpdateBuffer(mode, count);
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <fsm_man_run+0x374>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <fsm_man_run+0x380>)
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	4611      	mov	r1, r2
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 facc 	bl	8000e54 <UpdateBuffer>
		break;
 80008bc:	e005      	b.n	80008ca <fsm_man_run+0x36a>
		break;
 80008be:	bf00      	nop
 80008c0:	e004      	b.n	80008cc <fsm_man_run+0x36c>
		break;
 80008c2:	bf00      	nop
 80008c4:	e002      	b.n	80008cc <fsm_man_run+0x36c>
		break;
 80008c6:	bf00      	nop
 80008c8:	e000      	b.n	80008cc <fsm_man_run+0x36c>
		break;
 80008ca:	bf00      	nop
	}
}
 80008cc:	bf00      	nop
 80008ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80008d2:	bf00      	nop
 80008d4:	20000034 	.word	0x20000034
 80008d8:	20000044 	.word	0x20000044
 80008dc:	2000003c 	.word	0x2000003c
 80008e0:	20000038 	.word	0x20000038
 80008e4:	20000088 	.word	0x20000088
 80008e8:	20000080 	.word	0x20000080

080008ec <LED7>:
int timeRed = TIME_RED;
int timeAmber = TIME_AMBER;
int timeGreen = TIME_GREEN;
uint64_t wait = 0;
int wait1 = 0;
void LED7(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	if(index == 4) {
 80008f0:	4b13      	ldr	r3, [pc, #76]	; (8000940 <LED7+0x54>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d117      	bne.n	8000928 <LED7+0x3c>
		index = 0;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <LED7+0x54>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
		--count;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <LED7+0x58>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	3b01      	subs	r3, #1
 8000904:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <LED7+0x58>)
 8000906:	6013      	str	r3, [r2, #0]
		if(count < 0){
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <LED7+0x58>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	da03      	bge.n	8000918 <LED7+0x2c>
			count = timeRed;
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <LED7+0x5c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <LED7+0x58>)
 8000916:	6013      	str	r3, [r2, #0]
		}
		UpdateBuffer(mode, count);
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <LED7+0x60>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a09      	ldr	r2, [pc, #36]	; (8000944 <LED7+0x58>)
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	4611      	mov	r1, r2
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fa96 	bl	8000e54 <UpdateBuffer>
	}
    Update7SEG(index);
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <LED7+0x54>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f000 fa05 	bl	8000d3c <Update7SEG>
    index++;
 8000932:	4b03      	ldr	r3, [pc, #12]	; (8000940 <LED7+0x54>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	4a01      	ldr	r2, [pc, #4]	; (8000940 <LED7+0x54>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000084 	.word	0x20000084
 8000944:	20000038 	.word	0x20000038
 8000948:	2000003c 	.word	0x2000003c
 800094c:	20000034 	.word	0x20000034

08000950 <display7SEG>:
 *  Created on: Oct 29, 2024
 *      Author: Admin
 */
#include "main.h"
#include "led7_segment.h"
void display7SEG(int num){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b09      	cmp	r3, #9
 800095c:	f200 81be 	bhi.w	8000cdc <display7SEG+0x38c>
 8000960:	a201      	add	r2, pc, #4	; (adr r2, 8000968 <display7SEG+0x18>)
 8000962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000966:	bf00      	nop
 8000968:	08000991 	.word	0x08000991
 800096c:	080009e5 	.word	0x080009e5
 8000970:	08000a39 	.word	0x08000a39
 8000974:	08000a8d 	.word	0x08000a8d
 8000978:	08000ae1 	.word	0x08000ae1
 800097c:	08000b35 	.word	0x08000b35
 8000980:	08000b89 	.word	0x08000b89
 8000984:	08000bdd 	.word	0x08000bdd
 8000988:	08000c31 	.word	0x08000c31
 800098c:	08000c85 	.word	0x08000c85
		switch(num){
		case 0:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	48d0      	ldr	r0, [pc, #832]	; (8000cd8 <display7SEG+0x388>)
 8000996:	f001 fa7e 	bl	8001e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a0:	48cd      	ldr	r0, [pc, #820]	; (8000cd8 <display7SEG+0x388>)
 80009a2:	f001 fa78 	bl	8001e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ac:	48ca      	ldr	r0, [pc, #808]	; (8000cd8 <display7SEG+0x388>)
 80009ae:	f001 fa72 	bl	8001e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b8:	48c7      	ldr	r0, [pc, #796]	; (8000cd8 <display7SEG+0x388>)
 80009ba:	f001 fa6c 	bl	8001e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c4:	48c4      	ldr	r0, [pc, #784]	; (8000cd8 <display7SEG+0x388>)
 80009c6:	f001 fa66 	bl	8001e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d0:	48c1      	ldr	r0, [pc, #772]	; (8000cd8 <display7SEG+0x388>)
 80009d2:	f001 fa60 	bl	8001e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009dc:	48be      	ldr	r0, [pc, #760]	; (8000cd8 <display7SEG+0x388>)
 80009de:	f001 fa5a 	bl	8001e96 <HAL_GPIO_WritePin>
			break;
 80009e2:	e1a5      	b.n	8000d30 <display7SEG+0x3e0>
		case 1:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	48bb      	ldr	r0, [pc, #748]	; (8000cd8 <display7SEG+0x388>)
 80009ea:	f001 fa54 	bl	8001e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	48b8      	ldr	r0, [pc, #736]	; (8000cd8 <display7SEG+0x388>)
 80009f6:	f001 fa4e 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a00:	48b5      	ldr	r0, [pc, #724]	; (8000cd8 <display7SEG+0x388>)
 8000a02:	f001 fa48 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a0c:	48b2      	ldr	r0, [pc, #712]	; (8000cd8 <display7SEG+0x388>)
 8000a0e:	f001 fa42 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a18:	48af      	ldr	r0, [pc, #700]	; (8000cd8 <display7SEG+0x388>)
 8000a1a:	f001 fa3c 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a24:	48ac      	ldr	r0, [pc, #688]	; (8000cd8 <display7SEG+0x388>)
 8000a26:	f001 fa36 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a30:	48a9      	ldr	r0, [pc, #676]	; (8000cd8 <display7SEG+0x388>)
 8000a32:	f001 fa30 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  break;
 8000a36:	e17b      	b.n	8000d30 <display7SEG+0x3e0>

		case 2:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2180      	movs	r1, #128	; 0x80
 8000a3c:	48a6      	ldr	r0, [pc, #664]	; (8000cd8 <display7SEG+0x388>)
 8000a3e:	f001 fa2a 	bl	8001e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a48:	48a3      	ldr	r0, [pc, #652]	; (8000cd8 <display7SEG+0x388>)
 8000a4a:	f001 fa24 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a54:	48a0      	ldr	r0, [pc, #640]	; (8000cd8 <display7SEG+0x388>)
 8000a56:	f001 fa1e 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a60:	489d      	ldr	r0, [pc, #628]	; (8000cd8 <display7SEG+0x388>)
 8000a62:	f001 fa18 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6c:	489a      	ldr	r0, [pc, #616]	; (8000cd8 <display7SEG+0x388>)
 8000a6e:	f001 fa12 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a78:	4897      	ldr	r0, [pc, #604]	; (8000cd8 <display7SEG+0x388>)
 8000a7a:	f001 fa0c 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a84:	4894      	ldr	r0, [pc, #592]	; (8000cd8 <display7SEG+0x388>)
 8000a86:	f001 fa06 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  break;
 8000a8a:	e151      	b.n	8000d30 <display7SEG+0x3e0>

		case 3:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	4891      	ldr	r0, [pc, #580]	; (8000cd8 <display7SEG+0x388>)
 8000a92:	f001 fa00 	bl	8001e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	488e      	ldr	r0, [pc, #568]	; (8000cd8 <display7SEG+0x388>)
 8000a9e:	f001 f9fa 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa8:	488b      	ldr	r0, [pc, #556]	; (8000cd8 <display7SEG+0x388>)
 8000aaa:	f001 f9f4 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab4:	4888      	ldr	r0, [pc, #544]	; (8000cd8 <display7SEG+0x388>)
 8000ab6:	f001 f9ee 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac0:	4885      	ldr	r0, [pc, #532]	; (8000cd8 <display7SEG+0x388>)
 8000ac2:	f001 f9e8 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000acc:	4882      	ldr	r0, [pc, #520]	; (8000cd8 <display7SEG+0x388>)
 8000ace:	f001 f9e2 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	487f      	ldr	r0, [pc, #508]	; (8000cd8 <display7SEG+0x388>)
 8000ada:	f001 f9dc 	bl	8001e96 <HAL_GPIO_WritePin>
	  	  	  	  break;
 8000ade:	e127      	b.n	8000d30 <display7SEG+0x3e0>

	    case 4:
	    	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2180      	movs	r1, #128	; 0x80
 8000ae4:	487c      	ldr	r0, [pc, #496]	; (8000cd8 <display7SEG+0x388>)
 8000ae6:	f001 f9d6 	bl	8001e96 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af0:	4879      	ldr	r0, [pc, #484]	; (8000cd8 <display7SEG+0x388>)
 8000af2:	f001 f9d0 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afc:	4876      	ldr	r0, [pc, #472]	; (8000cd8 <display7SEG+0x388>)
 8000afe:	f001 f9ca 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b08:	4873      	ldr	r0, [pc, #460]	; (8000cd8 <display7SEG+0x388>)
 8000b0a:	f001 f9c4 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b14:	4870      	ldr	r0, [pc, #448]	; (8000cd8 <display7SEG+0x388>)
 8000b16:	f001 f9be 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b20:	486d      	ldr	r0, [pc, #436]	; (8000cd8 <display7SEG+0x388>)
 8000b22:	f001 f9b8 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2c:	486a      	ldr	r0, [pc, #424]	; (8000cd8 <display7SEG+0x388>)
 8000b2e:	f001 f9b2 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  break;
 8000b32:	e0fd      	b.n	8000d30 <display7SEG+0x3e0>

	    case 5:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	4867      	ldr	r0, [pc, #412]	; (8000cd8 <display7SEG+0x388>)
 8000b3a:	f001 f9ac 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	4864      	ldr	r0, [pc, #400]	; (8000cd8 <display7SEG+0x388>)
 8000b46:	f001 f9a6 	bl	8001e96 <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b50:	4861      	ldr	r0, [pc, #388]	; (8000cd8 <display7SEG+0x388>)
 8000b52:	f001 f9a0 	bl	8001e96 <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5c:	485e      	ldr	r0, [pc, #376]	; (8000cd8 <display7SEG+0x388>)
 8000b5e:	f001 f99a 	bl	8001e96 <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b68:	485b      	ldr	r0, [pc, #364]	; (8000cd8 <display7SEG+0x388>)
 8000b6a:	f001 f994 	bl	8001e96 <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b74:	4858      	ldr	r0, [pc, #352]	; (8000cd8 <display7SEG+0x388>)
 8000b76:	f001 f98e 	bl	8001e96 <HAL_GPIO_WritePin>
	  		  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b80:	4855      	ldr	r0, [pc, #340]	; (8000cd8 <display7SEG+0x388>)
 8000b82:	f001 f988 	bl	8001e96 <HAL_GPIO_WritePin>
	  		  	  break;
 8000b86:	e0d3      	b.n	8000d30 <display7SEG+0x3e0>

		case 6:
			HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	4852      	ldr	r0, [pc, #328]	; (8000cd8 <display7SEG+0x388>)
 8000b8e:	f001 f982 	bl	8001e96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b98:	484f      	ldr	r0, [pc, #316]	; (8000cd8 <display7SEG+0x388>)
 8000b9a:	f001 f97c 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba4:	484c      	ldr	r0, [pc, #304]	; (8000cd8 <display7SEG+0x388>)
 8000ba6:	f001 f976 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb0:	4849      	ldr	r0, [pc, #292]	; (8000cd8 <display7SEG+0x388>)
 8000bb2:	f001 f970 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbc:	4846      	ldr	r0, [pc, #280]	; (8000cd8 <display7SEG+0x388>)
 8000bbe:	f001 f96a 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc8:	4843      	ldr	r0, [pc, #268]	; (8000cd8 <display7SEG+0x388>)
 8000bca:	f001 f964 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd4:	4840      	ldr	r0, [pc, #256]	; (8000cd8 <display7SEG+0x388>)
 8000bd6:	f001 f95e 	bl	8001e96 <HAL_GPIO_WritePin>
  		  	  break;
 8000bda:	e0a9      	b.n	8000d30 <display7SEG+0x3e0>

		case 7:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2180      	movs	r1, #128	; 0x80
 8000be0:	483d      	ldr	r0, [pc, #244]	; (8000cd8 <display7SEG+0x388>)
 8000be2:	f001 f958 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bec:	483a      	ldr	r0, [pc, #232]	; (8000cd8 <display7SEG+0x388>)
 8000bee:	f001 f952 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf8:	4837      	ldr	r0, [pc, #220]	; (8000cd8 <display7SEG+0x388>)
 8000bfa:	f001 f94c 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c04:	4834      	ldr	r0, [pc, #208]	; (8000cd8 <display7SEG+0x388>)
 8000c06:	f001 f946 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c10:	4831      	ldr	r0, [pc, #196]	; (8000cd8 <display7SEG+0x388>)
 8000c12:	f001 f940 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1c:	482e      	ldr	r0, [pc, #184]	; (8000cd8 <display7SEG+0x388>)
 8000c1e:	f001 f93a 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c28:	482b      	ldr	r0, [pc, #172]	; (8000cd8 <display7SEG+0x388>)
 8000c2a:	f001 f934 	bl	8001e96 <HAL_GPIO_WritePin>
				  			  		  	  break;
 8000c2e:	e07f      	b.n	8000d30 <display7SEG+0x3e0>
		case 8:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	4828      	ldr	r0, [pc, #160]	; (8000cd8 <display7SEG+0x388>)
 8000c36:	f001 f92e 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c40:	4825      	ldr	r0, [pc, #148]	; (8000cd8 <display7SEG+0x388>)
 8000c42:	f001 f928 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c4c:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <display7SEG+0x388>)
 8000c4e:	f001 f922 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c58:	481f      	ldr	r0, [pc, #124]	; (8000cd8 <display7SEG+0x388>)
 8000c5a:	f001 f91c 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c64:	481c      	ldr	r0, [pc, #112]	; (8000cd8 <display7SEG+0x388>)
 8000c66:	f001 f916 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c70:	4819      	ldr	r0, [pc, #100]	; (8000cd8 <display7SEG+0x388>)
 8000c72:	f001 f910 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7c:	4816      	ldr	r0, [pc, #88]	; (8000cd8 <display7SEG+0x388>)
 8000c7e:	f001 f90a 	bl	8001e96 <HAL_GPIO_WritePin>
				break;
 8000c82:	e055      	b.n	8000d30 <display7SEG+0x3e0>
		case 9:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <display7SEG+0x388>)
 8000c8a:	f001 f904 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c94:	4810      	ldr	r0, [pc, #64]	; (8000cd8 <display7SEG+0x388>)
 8000c96:	f001 f8fe 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <display7SEG+0x388>)
 8000ca2:	f001 f8f8 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cac:	480a      	ldr	r0, [pc, #40]	; (8000cd8 <display7SEG+0x388>)
 8000cae:	f001 f8f2 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb8:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <display7SEG+0x388>)
 8000cba:	f001 f8ec 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc4:	4804      	ldr	r0, [pc, #16]	; (8000cd8 <display7SEG+0x388>)
 8000cc6:	f001 f8e6 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd0:	4801      	ldr	r0, [pc, #4]	; (8000cd8 <display7SEG+0x388>)
 8000cd2:	f001 f8e0 	bl	8001e96 <HAL_GPIO_WritePin>
				break;
 8000cd6:	e02b      	b.n	8000d30 <display7SEG+0x3e0>
 8000cd8:	40010800 	.word	0x40010800
		default:
				HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	4815      	ldr	r0, [pc, #84]	; (8000d38 <display7SEG+0x3e8>)
 8000ce2:	f001 f8d8 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cec:	4812      	ldr	r0, [pc, #72]	; (8000d38 <display7SEG+0x3e8>)
 8000cee:	f001 f8d2 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf8:	480f      	ldr	r0, [pc, #60]	; (8000d38 <display7SEG+0x3e8>)
 8000cfa:	f001 f8cc 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <display7SEG+0x3e8>)
 8000d06:	f001 f8c6 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d10:	4809      	ldr	r0, [pc, #36]	; (8000d38 <display7SEG+0x3e8>)
 8000d12:	f001 f8c0 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1c:	4806      	ldr	r0, [pc, #24]	; (8000d38 <display7SEG+0x3e8>)
 8000d1e:	f001 f8ba 	bl	8001e96 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <display7SEG+0x3e8>)
 8000d2a:	f001 f8b4 	bl	8001e96 <HAL_GPIO_WritePin>
				break;
 8000d2e:	bf00      	nop
		}
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40010800 	.word	0x40010800

08000d3c <Update7SEG>:

void Update7SEG(int cnt){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d87a      	bhi.n	8000e40 <Update7SEG+0x104>
 8000d4a:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <Update7SEG+0x14>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000d61 	.word	0x08000d61
 8000d54:	08000d99 	.word	0x08000d99
 8000d58:	08000dd1 	.word	0x08000dd1
 8000d5c:	08000e09 	.word	0x08000e09
	switch(cnt){
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2101      	movs	r1, #1
 8000d64:	4839      	ldr	r0, [pc, #228]	; (8000e4c <Update7SEG+0x110>)
 8000d66:	f001 f896 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	4837      	ldr	r0, [pc, #220]	; (8000e4c <Update7SEG+0x110>)
 8000d70:	f001 f891 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2104      	movs	r1, #4
 8000d78:	4834      	ldr	r0, [pc, #208]	; (8000e4c <Update7SEG+0x110>)
 8000d7a:	f001 f88c 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2108      	movs	r1, #8
 8000d82:	4832      	ldr	r0, [pc, #200]	; (8000e4c <Update7SEG+0x110>)
 8000d84:	f001 f887 	bl	8001e96 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[cnt]);
 8000d88:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <Update7SEG+0x114>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fddd 	bl	8000950 <display7SEG>
		break;
 8000d96:	e054      	b.n	8000e42 <Update7SEG+0x106>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	482b      	ldr	r0, [pc, #172]	; (8000e4c <Update7SEG+0x110>)
 8000d9e:	f001 f87a 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2102      	movs	r1, #2
 8000da6:	4829      	ldr	r0, [pc, #164]	; (8000e4c <Update7SEG+0x110>)
 8000da8:	f001 f875 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2104      	movs	r1, #4
 8000db0:	4826      	ldr	r0, [pc, #152]	; (8000e4c <Update7SEG+0x110>)
 8000db2:	f001 f870 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2108      	movs	r1, #8
 8000dba:	4824      	ldr	r0, [pc, #144]	; (8000e4c <Update7SEG+0x110>)
 8000dbc:	f001 f86b 	bl	8001e96 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[cnt]);
 8000dc0:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <Update7SEG+0x114>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fdc1 	bl	8000950 <display7SEG>
		break;
 8000dce:	e038      	b.n	8000e42 <Update7SEG+0x106>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	481d      	ldr	r0, [pc, #116]	; (8000e4c <Update7SEG+0x110>)
 8000dd6:	f001 f85e 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2102      	movs	r1, #2
 8000dde:	481b      	ldr	r0, [pc, #108]	; (8000e4c <Update7SEG+0x110>)
 8000de0:	f001 f859 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2104      	movs	r1, #4
 8000de8:	4818      	ldr	r0, [pc, #96]	; (8000e4c <Update7SEG+0x110>)
 8000dea:	f001 f854 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2108      	movs	r1, #8
 8000df2:	4816      	ldr	r0, [pc, #88]	; (8000e4c <Update7SEG+0x110>)
 8000df4:	f001 f84f 	bl	8001e96 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[cnt]);
 8000df8:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <Update7SEG+0x114>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fda5 	bl	8000950 <display7SEG>
		break;
 8000e06:	e01c      	b.n	8000e42 <Update7SEG+0x106>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	480f      	ldr	r0, [pc, #60]	; (8000e4c <Update7SEG+0x110>)
 8000e0e:	f001 f842 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2102      	movs	r1, #2
 8000e16:	480d      	ldr	r0, [pc, #52]	; (8000e4c <Update7SEG+0x110>)
 8000e18:	f001 f83d 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2104      	movs	r1, #4
 8000e20:	480a      	ldr	r0, [pc, #40]	; (8000e4c <Update7SEG+0x110>)
 8000e22:	f001 f838 	bl	8001e96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2108      	movs	r1, #8
 8000e2a:	4808      	ldr	r0, [pc, #32]	; (8000e4c <Update7SEG+0x110>)
 8000e2c:	f001 f833 	bl	8001e96 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[cnt]);
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <Update7SEG+0x114>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fd89 	bl	8000950 <display7SEG>
	break;
 8000e3e:	e000      	b.n	8000e42 <Update7SEG+0x106>

	default:
		break;
 8000e40:	bf00      	nop
	}
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	20000094 	.word	0x20000094

08000e54 <UpdateBuffer>:

void UpdateBuffer(int m, int time){
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	led_buffer[0] = m/10;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <UpdateBuffer+0x70>)
 8000e62:	fb82 1203 	smull	r1, r2, r2, r3
 8000e66:	1092      	asrs	r2, r2, #2
 8000e68:	17db      	asrs	r3, r3, #31
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <UpdateBuffer+0x74>)
 8000e6e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = m%10;
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <UpdateBuffer+0x70>)
 8000e74:	fb83 2301 	smull	r2, r3, r3, r1
 8000e78:	109a      	asrs	r2, r3, #2
 8000e7a:	17cb      	asrs	r3, r1, #31
 8000e7c:	1ad2      	subs	r2, r2, r3
 8000e7e:	4613      	mov	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	4413      	add	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	1aca      	subs	r2, r1, r3
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <UpdateBuffer+0x74>)
 8000e8a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = time/10;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <UpdateBuffer+0x70>)
 8000e90:	fb82 1203 	smull	r1, r2, r2, r3
 8000e94:	1092      	asrs	r2, r2, #2
 8000e96:	17db      	asrs	r3, r3, #31
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <UpdateBuffer+0x74>)
 8000e9c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = time%10;
 8000e9e:	6839      	ldr	r1, [r7, #0]
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <UpdateBuffer+0x70>)
 8000ea2:	fb83 2301 	smull	r2, r3, r3, r1
 8000ea6:	109a      	asrs	r2, r3, #2
 8000ea8:	17cb      	asrs	r3, r1, #31
 8000eaa:	1ad2      	subs	r2, r2, r3
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	1aca      	subs	r2, r1, r3
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <UpdateBuffer+0x74>)
 8000eb8:	60da      	str	r2, [r3, #12]
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	66666667 	.word	0x66666667
 8000ec8:	20000094 	.word	0x20000094

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f000 fce0 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f82c 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000ed8:	f000 f866 	bl	8000fa8 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000edc:	f000 f8b0 	bl	8001040 <MX_GPIO_Init>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
//  OFF();
  HAL_TIM_Base_Start_IT(&htim2);
 8000ee0:	480e      	ldr	r0, [pc, #56]	; (8000f1c <main+0x50>)
 8000ee2:	f001 fc35 	bl	8002750 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
//  SCH_Add_Task(BlinkRED1, 0, 500);
//  mode = 1;
//  SCH_Add_Task(ledtest1, 1000, 2000);
//  SCH_Add_Task(LED7, 0, 250);
  SCH_Init();
 8000ee6:	f000 f92b 	bl	8001140 <SCH_Init>
  status = INIT;
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <main+0x54>)
 8000eec:	2205      	movs	r2, #5
 8000eee:	601a      	str	r2, [r3, #0]
  SCH_Add_Task(LED7, 1000, 250);
 8000ef0:	22fa      	movs	r2, #250	; 0xfa
 8000ef2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ef6:	480b      	ldr	r0, [pc, #44]	; (8000f24 <main+0x58>)
 8000ef8:	f000 f962 	bl	80011c0 <SCH_Add_Task>
  SCH_Add_Task(fsm_auto_run, 0, 1000);
 8000efc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f00:	2100      	movs	r1, #0
 8000f02:	4809      	ldr	r0, [pc, #36]	; (8000f28 <main+0x5c>)
 8000f04:	f000 f95c 	bl	80011c0 <SCH_Add_Task>
  SCH_Add_Task(fsm_man_run, 0, 1000);
 8000f08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <main+0x60>)
 8000f10:	f000 f956 	bl	80011c0 <SCH_Add_Task>

  while (1)
  {
//	  fsm_auto_run();
//	  fsm_man_run();
	  SCH_Dispatch_Tasks();
 8000f14:	f000 fa26 	bl	8001364 <SCH_Dispatch_Tasks>
 8000f18:	e7fc      	b.n	8000f14 <main+0x48>
 8000f1a:	bf00      	nop
 8000f1c:	200000a4 	.word	0x200000a4
 8000f20:	20000080 	.word	0x20000080
 8000f24:	080008ed 	.word	0x080008ed
 8000f28:	080002bd 	.word	0x080002bd
 8000f2c:	08000561 	.word	0x08000561

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b090      	sub	sp, #64	; 0x40
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0318 	add.w	r3, r7, #24
 8000f3a:	2228      	movs	r2, #40	; 0x28
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 ffb6 	bl	8002eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f56:	2301      	movs	r3, #1
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f62:	f107 0318 	add.w	r3, r7, #24
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 ffc6 	bl	8001ef8 <HAL_RCC_OscConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f72:	f000 f8df 	bl	8001134 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f76:	230f      	movs	r3, #15
 8000f78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 fa32 	bl	80023f8 <HAL_RCC_ClockConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 f8cb 	bl	8001134 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3740      	adds	r7, #64	; 0x40
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_TIM2_Init+0x94>)
 8000fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_TIM2_Init+0x94>)
 8000fce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_TIM2_Init+0x94>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_TIM2_Init+0x94>)
 8000fdc:	2209      	movs	r2, #9
 8000fde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_TIM2_Init+0x94>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_TIM2_Init+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <MX_TIM2_Init+0x94>)
 8000fee:	f001 fb5f 	bl	80026b0 <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ff8:	f000 f89c 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4619      	mov	r1, r3
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_TIM2_Init+0x94>)
 800100a:	f001 fcdd 	bl	80029c8 <HAL_TIM_ConfigClockSource>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001014:	f000 f88e 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_TIM2_Init+0x94>)
 8001026:	f001 feb5 	bl	8002d94 <HAL_TIMEx_MasterConfigSynchronization>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001030:	f000 f880 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200000a4 	.word	0x200000a4

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <MX_GPIO_Init+0xd0>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a2d      	ldr	r2, [pc, #180]	; (8001110 <MX_GPIO_Init+0xd0>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <MX_GPIO_Init+0xd0>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <MX_GPIO_Init+0xd0>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a27      	ldr	r2, [pc, #156]	; (8001110 <MX_GPIO_Init+0xd0>)
 8001072:	f043 0308 	orr.w	r3, r3, #8
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_GPIO_Init+0xd0>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0308 	and.w	r3, r3, #8
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 8001084:	2200      	movs	r2, #0
 8001086:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 800108a:	4822      	ldr	r0, [pc, #136]	; (8001114 <MX_GPIO_Init+0xd4>)
 800108c:	f000 ff03 	bl	8001e96 <HAL_GPIO_WritePin>
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001090:	2200      	movs	r2, #0
 8001092:	213f      	movs	r1, #63	; 0x3f
 8001094:	4820      	ldr	r0, [pc, #128]	; (8001118 <MX_GPIO_Init+0xd8>)
 8001096:	f000 fefe 	bl	8001e96 <HAL_GPIO_WritePin>
                          |EN4_Pin|EN5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_Pin LED_AMBER_1_Pin LED_GREEN_1_Pin LED_RED_2_Pin
                           LED_AMBER_2_Pin LED_GREEN_2_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_AMBER_1_Pin|LED_GREEN_1_Pin|LED_RED_2_Pin
 800109a:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 800109e:	60bb      	str	r3, [r7, #8]
                          |LED_AMBER_2_Pin|LED_GREEN_2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	4619      	mov	r1, r3
 80010b2:	4818      	ldr	r0, [pc, #96]	; (8001114 <MX_GPIO_Init+0xd4>)
 80010b4:	f000 fd5e 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           EN4_Pin EN5_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80010b8:	233f      	movs	r3, #63	; 0x3f
 80010ba:	60bb      	str	r3, [r7, #8]
                          |EN4_Pin|EN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2302      	movs	r3, #2
 80010c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	4619      	mov	r1, r3
 80010ce:	4812      	ldr	r0, [pc, #72]	; (8001118 <MX_GPIO_Init+0xd8>)
 80010d0:	f000 fd50 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SEG6_Pin */
  GPIO_InitStruct.Pin = SEG6_Pin;
 80010d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010de:	2301      	movs	r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SEG6_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <MX_GPIO_Init+0xd4>)
 80010ea:	f000 fd43 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_BUTTON_Pin VALUE_BUTTON_Pin TIME_BUTTON_Pin */
  GPIO_InitStruct.Pin = MODE_BUTTON_Pin|VALUE_BUTTON_Pin|TIME_BUTTON_Pin;
 80010ee:	f44f 7360 	mov.w	r3, #896	; 0x380
 80010f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_GPIO_Init+0xd8>)
 8001104:	f000 fd36 	bl	8001b74 <HAL_GPIO_Init>

}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000
 8001114:	40010800 	.word	0x40010800
 8001118:	40010c00 	.word	0x40010c00

0800111c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
//	timerRun();
	getKeyInput1();
 8001124:	f7ff f83c 	bl	80001a0 <getKeyInput1>
	SCH_Update();
 8001128:	f000 f8b4 	bl	8001294 <SCH_Update>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <SCH_Init>:
sTasks SCH_tasks_G[SCH_MAX_TASKS];
//uint8_t curr_idx_task = 0;
uint8_t start = 0;
uint8_t end = 0;

void SCH_Init(void){
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
	int i;
//	curr_idx_task = 0;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	e024      	b.n	8001196 <SCH_Init+0x56>
		SCH_tasks_G[i].pTask = 0x0000;
 800114c:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <SCH_Init+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4413      	add	r3, r2
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Delay = 0;
 8001158:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <SCH_Init+0x74>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	4413      	add	r3, r2
 8001160:	3304      	adds	r3, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].Period = 0;
 8001166:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <SCH_Init+0x74>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	4413      	add	r3, r2
 800116e:	3308      	adds	r3, #8
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[i].RunMe = 0;
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <SCH_Init+0x74>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	330c      	adds	r3, #12
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[i].isRun = 0;
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <SCH_Init+0x74>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	330d      	adds	r3, #13
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < SCH_MAX_TASKS; i++){
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3301      	adds	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b27      	cmp	r3, #39	; 0x27
 800119a:	ddd7      	ble.n	800114c <SCH_Init+0xc>
	}
	start = end = 0;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SCH_Init+0x78>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SCH_Init+0x78>)
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SCH_Init+0x7c>)
 80011a8:	701a      	strb	r2, [r3, #0]

}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	200000ec 	.word	0x200000ec
 80011b8:	20000091 	.word	0x20000091
 80011bc:	20000090 	.word	0x20000090

080011c0 <SCH_Add_Task>:

void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
	if ((end + 1) % SCH_MAX_TASKS != start) {
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <SCH_Add_Task+0xc0>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	1c59      	adds	r1, r3, #1
 80011d2:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <SCH_Add_Task+0xc4>)
 80011d4:	fb83 2301 	smull	r2, r3, r3, r1
 80011d8:	111a      	asrs	r2, r3, #4
 80011da:	17cb      	asrs	r3, r1, #31
 80011dc:	1ad2      	subs	r2, r2, r3
 80011de:	4613      	mov	r3, r2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	1aca      	subs	r2, r1, r3
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <SCH_Add_Task+0xc8>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d041      	beq.n	8001274 <SCH_Add_Task+0xb4>
	        SCH_tasks_G[end].pTask = pFunction;
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <SCH_Add_Task+0xc0>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4a25      	ldr	r2, [pc, #148]	; (800128c <SCH_Add_Task+0xcc>)
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4413      	add	r3, r2
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	601a      	str	r2, [r3, #0]
	        SCH_tasks_G[end].Delay = DELAY / 10;
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <SCH_Add_Task+0xc0>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4a22      	ldr	r2, [pc, #136]	; (8001290 <SCH_Add_Task+0xd0>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	491f      	ldr	r1, [pc, #124]	; (800128c <SCH_Add_Task+0xcc>)
 8001210:	0103      	lsls	r3, r0, #4
 8001212:	440b      	add	r3, r1
 8001214:	3304      	adds	r3, #4
 8001216:	601a      	str	r2, [r3, #0]
	        SCH_tasks_G[end].Period = PERIOD / 10;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <SCH_Add_Task+0xc0>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <SCH_Add_Task+0xd0>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	4918      	ldr	r1, [pc, #96]	; (800128c <SCH_Add_Task+0xcc>)
 800122a:	0103      	lsls	r3, r0, #4
 800122c:	440b      	add	r3, r1
 800122e:	3308      	adds	r3, #8
 8001230:	601a      	str	r2, [r3, #0]
	        SCH_tasks_G[end].RunMe = 0;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <SCH_Add_Task+0xc0>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4a15      	ldr	r2, [pc, #84]	; (800128c <SCH_Add_Task+0xcc>)
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	330c      	adds	r3, #12
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
	        SCH_tasks_G[end].isRun = 1;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <SCH_Add_Task+0xc0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4a11      	ldr	r2, [pc, #68]	; (800128c <SCH_Add_Task+0xcc>)
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	330d      	adds	r3, #13
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
	        end = (end + 1) % SCH_MAX_TASKS;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <SCH_Add_Task+0xc0>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <SCH_Add_Task+0xc4>)
 800125a:	fb83 1302 	smull	r1, r3, r3, r2
 800125e:	1119      	asrs	r1, r3, #4
 8001260:	17d3      	asrs	r3, r2, #31
 8001262:	1ac9      	subs	r1, r1, r3
 8001264:	460b      	mov	r3, r1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1ad1      	subs	r1, r2, r3
 800126e:	b2ca      	uxtb	r2, r1
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <SCH_Add_Task+0xc0>)
 8001272:	701a      	strb	r2, [r3, #0]
	    }
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000091 	.word	0x20000091
 8001284:	66666667 	.word	0x66666667
 8001288:	20000090 	.word	0x20000090
 800128c:	200000ec 	.word	0x200000ec
 8001290:	cccccccd 	.word	0xcccccccd

08001294 <SCH_Update>:

void SCH_Update(void) {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
	uint8_t i = start;
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <SCH_Update+0xc0>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
	while (i != end) {
 80012a0:	e04d      	b.n	800133e <SCH_Update+0xaa>
	      if (SCH_tasks_G[i].isRun) {
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <SCH_Update+0xc4>)
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	4413      	add	r3, r2
 80012aa:	330d      	adds	r3, #13
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d036      	beq.n	8001320 <SCH_Update+0x8c>
	          if (SCH_tasks_G[i].Delay > 0) {
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4a28      	ldr	r2, [pc, #160]	; (8001358 <SCH_Update+0xc4>)
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	3304      	adds	r3, #4
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00c      	beq.n	80012dc <SCH_Update+0x48>
	              SCH_tasks_G[i].Delay--;
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	4924      	ldr	r1, [pc, #144]	; (8001358 <SCH_Update+0xc4>)
 80012c6:	011a      	lsls	r2, r3, #4
 80012c8:	440a      	add	r2, r1
 80012ca:	3204      	adds	r2, #4
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	3a01      	subs	r2, #1
 80012d0:	4921      	ldr	r1, [pc, #132]	; (8001358 <SCH_Update+0xc4>)
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	440b      	add	r3, r1
 80012d6:	3304      	adds	r3, #4
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e021      	b.n	8001320 <SCH_Update+0x8c>
	          } else {
	              SCH_tasks_G[i].RunMe++;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	491e      	ldr	r1, [pc, #120]	; (8001358 <SCH_Update+0xc4>)
 80012e0:	011a      	lsls	r2, r3, #4
 80012e2:	440a      	add	r2, r1
 80012e4:	320c      	adds	r2, #12
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	3201      	adds	r2, #1
 80012ea:	b2d1      	uxtb	r1, r2
 80012ec:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <SCH_Update+0xc4>)
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	330c      	adds	r3, #12
 80012f4:	460a      	mov	r2, r1
 80012f6:	701a      	strb	r2, [r3, #0]
	              if (SCH_tasks_G[i].Period > 0) {
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <SCH_Update+0xc4>)
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	3308      	adds	r3, #8
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00b      	beq.n	8001320 <SCH_Update+0x8c>
	                  SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8001308:	79fa      	ldrb	r2, [r7, #7]
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	4912      	ldr	r1, [pc, #72]	; (8001358 <SCH_Update+0xc4>)
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	440a      	add	r2, r1
 8001312:	3208      	adds	r2, #8
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	4910      	ldr	r1, [pc, #64]	; (8001358 <SCH_Update+0xc4>)
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	440b      	add	r3, r1
 800131c:	3304      	adds	r3, #4
 800131e:	601a      	str	r2, [r3, #0]
	                }
	            }
	        }
	        i = (i + 1) % SCH_MAX_TASKS;
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <SCH_Update+0xc8>)
 8001326:	fb83 1302 	smull	r1, r3, r3, r2
 800132a:	1119      	asrs	r1, r3, #4
 800132c:	17d3      	asrs	r3, r2, #31
 800132e:	1ac9      	subs	r1, r1, r3
 8001330:	460b      	mov	r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	1ad1      	subs	r1, r2, r3
 800133a:	460b      	mov	r3, r1
 800133c:	71fb      	strb	r3, [r7, #7]
	while (i != end) {
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <SCH_Update+0xcc>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	79fa      	ldrb	r2, [r7, #7]
 8001344:	429a      	cmp	r2, r3
 8001346:	d1ac      	bne.n	80012a2 <SCH_Update+0xe>
	  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000090 	.word	0x20000090
 8001358:	200000ec 	.word	0x200000ec
 800135c:	66666667 	.word	0x66666667
 8001360:	20000091 	.word	0x20000091

08001364 <SCH_Dispatch_Tasks>:

 void SCH_Dispatch_Tasks(void){
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	 uint8_t i = start;
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <SCH_Dispatch_Tasks+0xa0>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
	     while (i != end) {
 8001370:	e03e      	b.n	80013f0 <SCH_Dispatch_Tasks+0x8c>
	       if (SCH_tasks_G[i].isRun && SCH_tasks_G[i].RunMe > 0) {
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	4a24      	ldr	r2, [pc, #144]	; (8001408 <SCH_Dispatch_Tasks+0xa4>)
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	4413      	add	r3, r2
 800137a:	330d      	adds	r3, #13
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d027      	beq.n	80013d2 <SCH_Dispatch_Tasks+0x6e>
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4a20      	ldr	r2, [pc, #128]	; (8001408 <SCH_Dispatch_Tasks+0xa4>)
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	330c      	adds	r3, #12
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d01f      	beq.n	80013d2 <SCH_Dispatch_Tasks+0x6e>
	           SCH_tasks_G[i].RunMe--;
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	491c      	ldr	r1, [pc, #112]	; (8001408 <SCH_Dispatch_Tasks+0xa4>)
 8001396:	011a      	lsls	r2, r3, #4
 8001398:	440a      	add	r2, r1
 800139a:	320c      	adds	r2, #12
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	3a01      	subs	r2, #1
 80013a0:	b2d1      	uxtb	r1, r2
 80013a2:	4a19      	ldr	r2, [pc, #100]	; (8001408 <SCH_Dispatch_Tasks+0xa4>)
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4413      	add	r3, r2
 80013a8:	330c      	adds	r3, #12
 80013aa:	460a      	mov	r2, r1
 80013ac:	701a      	strb	r2, [r3, #0]
	           (*SCH_tasks_G[i].pTask)();
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4a15      	ldr	r2, [pc, #84]	; (8001408 <SCH_Dispatch_Tasks+0xa4>)
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	4413      	add	r3, r2
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4798      	blx	r3
	           if (SCH_tasks_G[i].Period == 0) {
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <SCH_Dispatch_Tasks+0xa4>)
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4413      	add	r3, r2
 80013c2:	3308      	adds	r3, #8
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d103      	bne.n	80013d2 <SCH_Dispatch_Tasks+0x6e>
//	               SCH_tasks_G[i].isRun = 0;
	        	   SCH_Delete_Task(i);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 f821 	bl	8001414 <SCH_Delete_Task>
	           }
//	           break;
	       }
	         i = (i + 1) % SCH_MAX_TASKS;
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <SCH_Dispatch_Tasks+0xa8>)
 80013d8:	fb83 1302 	smull	r1, r3, r3, r2
 80013dc:	1119      	asrs	r1, r3, #4
 80013de:	17d3      	asrs	r3, r2, #31
 80013e0:	1ac9      	subs	r1, r1, r3
 80013e2:	460b      	mov	r3, r1
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	1ad1      	subs	r1, r2, r3
 80013ec:	460b      	mov	r3, r1
 80013ee:	71fb      	strb	r3, [r7, #7]
	     while (i != end) {
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <SCH_Dispatch_Tasks+0xac>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d1bb      	bne.n	8001372 <SCH_Dispatch_Tasks+0xe>
	     }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000090 	.word	0x20000090
 8001408:	200000ec 	.word	0x200000ec
 800140c:	66666667 	.word	0x66666667
 8001410:	20000091 	.word	0x20000091

08001414 <SCH_Delete_Task>:

void SCH_Delete_Task(uint8_t task_index){
 8001414:	b490      	push	{r4, r7}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	if (start == end) return;
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <SCH_Delete_Task+0xec>)
 8001420:	781a      	ldrb	r2, [r3, #0]
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <SCH_Delete_Task+0xf0>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d065      	beq.n	80014f6 <SCH_Delete_Task+0xe2>
	else{
		SCH_tasks_G[task_index].pTask = 0x0000;
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4a36      	ldr	r2, [pc, #216]	; (8001508 <SCH_Delete_Task+0xf4>)
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	4413      	add	r3, r2
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[task_index].Delay = 0;
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	4a33      	ldr	r2, [pc, #204]	; (8001508 <SCH_Delete_Task+0xf4>)
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	4413      	add	r3, r2
 800143e:	3304      	adds	r3, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[task_index].Period = 0;
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4a30      	ldr	r2, [pc, #192]	; (8001508 <SCH_Delete_Task+0xf4>)
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4413      	add	r3, r2
 800144c:	3308      	adds	r3, #8
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[task_index].RunMe = 0;
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4a2c      	ldr	r2, [pc, #176]	; (8001508 <SCH_Delete_Task+0xf4>)
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	4413      	add	r3, r2
 800145a:	330c      	adds	r3, #12
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[task_index].isRun = 0;
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4a29      	ldr	r2, [pc, #164]	; (8001508 <SCH_Delete_Task+0xf4>)
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	330d      	adds	r3, #13
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
	    uint8_t i;
	    for (i = task_index; i < end; i = (i + 1) % SCH_MAX_TASKS) {
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e029      	b.n	80014c8 <SCH_Delete_Task+0xb4>
	        uint8_t next = (i + 1) % SCH_MAX_TASKS;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <SCH_Delete_Task+0xf8>)
 800147a:	fb83 1302 	smull	r1, r3, r3, r2
 800147e:	1119      	asrs	r1, r3, #4
 8001480:	17d3      	asrs	r3, r2, #31
 8001482:	1ac9      	subs	r1, r1, r3
 8001484:	460b      	mov	r3, r1
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	1ad1      	subs	r1, r2, r3
 800148e:	460b      	mov	r3, r1
 8001490:	73bb      	strb	r3, [r7, #14]
	        SCH_tasks_G[i] = SCH_tasks_G[next];
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	491c      	ldr	r1, [pc, #112]	; (8001508 <SCH_Delete_Task+0xf4>)
 8001498:	0112      	lsls	r2, r2, #4
 800149a:	4411      	add	r1, r2
 800149c:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <SCH_Delete_Task+0xf4>)
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4413      	add	r3, r2
 80014a2:	460c      	mov	r4, r1
 80014a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    for (i = task_index; i < end; i = (i + 1) % SCH_MAX_TASKS) {
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <SCH_Delete_Task+0xf8>)
 80014b0:	fb83 1302 	smull	r1, r3, r3, r2
 80014b4:	1119      	asrs	r1, r3, #4
 80014b6:	17d3      	asrs	r3, r2, #31
 80014b8:	1ac9      	subs	r1, r1, r3
 80014ba:	460b      	mov	r3, r1
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	440b      	add	r3, r1
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	1ad1      	subs	r1, r2, r3
 80014c4:	460b      	mov	r3, r1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <SCH_Delete_Task+0xf0>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	7bfa      	ldrb	r2, [r7, #15]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d3d0      	bcc.n	8001474 <SCH_Delete_Task+0x60>
	    }
	    end = (end - 1) % SCH_MAX_TASKS;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <SCH_Delete_Task+0xf0>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	1e5a      	subs	r2, r3, #1
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <SCH_Delete_Task+0xf8>)
 80014da:	fb83 1302 	smull	r1, r3, r3, r2
 80014de:	1119      	asrs	r1, r3, #4
 80014e0:	17d3      	asrs	r3, r2, #31
 80014e2:	1ac9      	subs	r1, r1, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	1ad1      	subs	r1, r2, r3
 80014ee:	b2ca      	uxtb	r2, r1
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SCH_Delete_Task+0xf0>)
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e000      	b.n	80014f8 <SCH_Delete_Task+0xe4>
	if (start == end) return;
 80014f6:	bf00      	nop
	}
 }
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc90      	pop	{r4, r7}
 80014fe:	4770      	bx	lr
 8001500:	20000090 	.word	0x20000090
 8001504:	20000091 	.word	0x20000091
 8001508:	200000ec 	.word	0x200000ec
 800150c:	66666667 	.word	0x66666667

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <HAL_MspInit+0x5c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_MspInit+0x5c>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_MspInit+0x5c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_MspInit+0x5c>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_MspInit+0x60>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <HAL_MspInit+0x60>)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000

08001574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001584:	d113      	bne.n	80015ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_TIM_Base_MspInit+0x44>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <HAL_TIM_Base_MspInit+0x44>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_TIM_Base_MspInit+0x44>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	201c      	movs	r0, #28
 80015a4:	f000 faaf 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015a8:	201c      	movs	r0, #28
 80015aa:	f000 fac8 	bl	8001b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <NMI_Handler+0x4>

080015c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <HardFault_Handler+0x4>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <MemManage_Handler+0x4>

080015ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <UsageFault_Handler+0x4>

080015da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001602:	f000 f98d 	bl	8001920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <TIM2_IRQHandler+0x10>)
 8001612:	f001 f8e9 	bl	80027e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200000a4 	.word	0x200000a4

08001620 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <displayRED1>:
 *
 *  Created on: Oct 30, 2024
 *      Author: Admin
 */
#include "traffic_light.h"
void displayRED1(){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8001630:	2201      	movs	r2, #1
 8001632:	2102      	movs	r1, #2
 8001634:	4807      	ldr	r0, [pc, #28]	; (8001654 <displayRED1+0x28>)
 8001636:	f000 fc2e 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2104      	movs	r1, #4
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <displayRED1+0x28>)
 8001640:	f000 fc29 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2108      	movs	r1, #8
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <displayRED1+0x28>)
 800164a:	f000 fc24 	bl	8001e96 <HAL_GPIO_WritePin>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40010800 	.word	0x40010800

08001658 <displayAMBER1>:
void displayAMBER1(){
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2102      	movs	r1, #2
 8001660:	4807      	ldr	r0, [pc, #28]	; (8001680 <displayAMBER1+0x28>)
 8001662:	f000 fc18 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001666:	2201      	movs	r2, #1
 8001668:	2104      	movs	r1, #4
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <displayAMBER1+0x28>)
 800166c:	f000 fc13 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2108      	movs	r1, #8
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <displayAMBER1+0x28>)
 8001676:	f000 fc0e 	bl	8001e96 <HAL_GPIO_WritePin>
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40010800 	.word	0x40010800

08001684 <displayGREEN1>:
void displayGREEN1(){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2102      	movs	r1, #2
 800168c:	4807      	ldr	r0, [pc, #28]	; (80016ac <displayGREEN1+0x28>)
 800168e:	f000 fc02 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2104      	movs	r1, #4
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <displayGREEN1+0x28>)
 8001698:	f000 fbfd 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 800169c:	2201      	movs	r2, #1
 800169e:	2108      	movs	r1, #8
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <displayGREEN1+0x28>)
 80016a2:	f000 fbf8 	bl	8001e96 <HAL_GPIO_WritePin>
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40010800 	.word	0x40010800

080016b0 <displayRED2>:
void displayRED2(){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80016b4:	2201      	movs	r2, #1
 80016b6:	2110      	movs	r1, #16
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <displayRED2+0x28>)
 80016ba:	f000 fbec 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2120      	movs	r1, #32
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <displayRED2+0x28>)
 80016c4:	f000 fbe7 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2140      	movs	r1, #64	; 0x40
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <displayRED2+0x28>)
 80016ce:	f000 fbe2 	bl	8001e96 <HAL_GPIO_WritePin>
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40010800 	.word	0x40010800

080016dc <displayAMBER2>:
void displayAMBER2(){
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2110      	movs	r1, #16
 80016e4:	4807      	ldr	r0, [pc, #28]	; (8001704 <displayAMBER2+0x28>)
 80016e6:	f000 fbd6 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2120      	movs	r1, #32
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <displayAMBER2+0x28>)
 80016f0:	f000 fbd1 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2140      	movs	r1, #64	; 0x40
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <displayAMBER2+0x28>)
 80016fa:	f000 fbcc 	bl	8001e96 <HAL_GPIO_WritePin>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40010800 	.word	0x40010800

08001708 <displayGREEN2>:
void displayGREEN2(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2110      	movs	r1, #16
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <displayGREEN2+0x28>)
 8001712:	f000 fbc0 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2120      	movs	r1, #32
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <displayGREEN2+0x28>)
 800171c:	f000 fbbb 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001720:	2201      	movs	r2, #1
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <displayGREEN2+0x28>)
 8001726:	f000 fbb6 	bl	8001e96 <HAL_GPIO_WritePin>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40010800 	.word	0x40010800

08001734 <BlinkRED>:
void BlinkRED(){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8001738:	2110      	movs	r1, #16
 800173a:	480e      	ldr	r0, [pc, #56]	; (8001774 <BlinkRED+0x40>)
 800173c:	f000 fbc3 	bl	8001ec6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001740:	2102      	movs	r1, #2
 8001742:	480c      	ldr	r0, [pc, #48]	; (8001774 <BlinkRED+0x40>)
 8001744:	f000 fbbf 	bl	8001ec6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2104      	movs	r1, #4
 800174c:	4809      	ldr	r0, [pc, #36]	; (8001774 <BlinkRED+0x40>)
 800174e:	f000 fba2 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2108      	movs	r1, #8
 8001756:	4807      	ldr	r0, [pc, #28]	; (8001774 <BlinkRED+0x40>)
 8001758:	f000 fb9d 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2120      	movs	r1, #32
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <BlinkRED+0x40>)
 8001762:	f000 fb98 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2140      	movs	r1, #64	; 0x40
 800176a:	4802      	ldr	r0, [pc, #8]	; (8001774 <BlinkRED+0x40>)
 800176c:	f000 fb93 	bl	8001e96 <HAL_GPIO_WritePin>
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40010800 	.word	0x40010800

08001778 <BlinkAMBER>:
void BlinkAMBER(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 800177c:	2104      	movs	r1, #4
 800177e:	480e      	ldr	r0, [pc, #56]	; (80017b8 <BlinkAMBER+0x40>)
 8001780:	f000 fba1 	bl	8001ec6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001784:	2120      	movs	r1, #32
 8001786:	480c      	ldr	r0, [pc, #48]	; (80017b8 <BlinkAMBER+0x40>)
 8001788:	f000 fb9d 	bl	8001ec6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2102      	movs	r1, #2
 8001790:	4809      	ldr	r0, [pc, #36]	; (80017b8 <BlinkAMBER+0x40>)
 8001792:	f000 fb80 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2108      	movs	r1, #8
 800179a:	4807      	ldr	r0, [pc, #28]	; (80017b8 <BlinkAMBER+0x40>)
 800179c:	f000 fb7b 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2110      	movs	r1, #16
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <BlinkAMBER+0x40>)
 80017a6:	f000 fb76 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2140      	movs	r1, #64	; 0x40
 80017ae:	4802      	ldr	r0, [pc, #8]	; (80017b8 <BlinkAMBER+0x40>)
 80017b0:	f000 fb71 	bl	8001e96 <HAL_GPIO_WritePin>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40010800 	.word	0x40010800

080017bc <BlinkGREEN>:
void BlinkGREEN(){
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 80017c0:	2108      	movs	r1, #8
 80017c2:	480e      	ldr	r0, [pc, #56]	; (80017fc <BlinkGREEN+0x40>)
 80017c4:	f000 fb7f 	bl	8001ec6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80017c8:	2140      	movs	r1, #64	; 0x40
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <BlinkGREEN+0x40>)
 80017cc:	f000 fb7b 	bl	8001ec6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2104      	movs	r1, #4
 80017d4:	4809      	ldr	r0, [pc, #36]	; (80017fc <BlinkGREEN+0x40>)
 80017d6:	f000 fb5e 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2102      	movs	r1, #2
 80017de:	4807      	ldr	r0, [pc, #28]	; (80017fc <BlinkGREEN+0x40>)
 80017e0:	f000 fb59 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2110      	movs	r1, #16
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <BlinkGREEN+0x40>)
 80017ea:	f000 fb54 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2120      	movs	r1, #32
 80017f2:	4802      	ldr	r0, [pc, #8]	; (80017fc <BlinkGREEN+0x40>)
 80017f4:	f000 fb4f 	bl	8001e96 <HAL_GPIO_WritePin>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40010800 	.word	0x40010800

08001800 <OFF>:
void OFF(){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2108      	movs	r1, #8
 8001808:	480e      	ldr	r0, [pc, #56]	; (8001844 <OFF+0x44>)
 800180a:	f000 fb44 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2140      	movs	r1, #64	; 0x40
 8001812:	480c      	ldr	r0, [pc, #48]	; (8001844 <OFF+0x44>)
 8001814:	f000 fb3f 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2104      	movs	r1, #4
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <OFF+0x44>)
 800181e:	f000 fb3a 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2102      	movs	r1, #2
 8001826:	4807      	ldr	r0, [pc, #28]	; (8001844 <OFF+0x44>)
 8001828:	f000 fb35 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	2110      	movs	r1, #16
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <OFF+0x44>)
 8001832:	f000 fb30 	bl	8001e96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2120      	movs	r1, #32
 800183a:	4802      	ldr	r0, [pc, #8]	; (8001844 <OFF+0x44>)
 800183c:	f000 fb2b 	bl	8001e96 <HAL_GPIO_WritePin>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40010800 	.word	0x40010800

08001848 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001848:	f7ff feea 	bl	8001620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800184c:	480b      	ldr	r0, [pc, #44]	; (800187c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800184e:	490c      	ldr	r1, [pc, #48]	; (8001880 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001850:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001854:	e002      	b.n	800185c <LoopCopyDataInit>

08001856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185a:	3304      	adds	r3, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800185c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001860:	d3f9      	bcc.n	8001856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001864:	4c09      	ldr	r4, [pc, #36]	; (800188c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001868:	e001      	b.n	800186e <LoopFillZerobss>

0800186a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800186c:	3204      	adds	r2, #4

0800186e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001870:	d3fb      	bcc.n	800186a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001872:	f001 faf9 	bl	8002e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001876:	f7ff fb29 	bl	8000ecc <main>
  bx lr
 800187a:	4770      	bx	lr
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001884:	08002f04 	.word	0x08002f04
  ldr r2, =_sbss
 8001888:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 800188c:	20000370 	.word	0x20000370

08001890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC1_2_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_Init+0x28>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_Init+0x28>)
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f923 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018aa:	200f      	movs	r0, #15
 80018ac:	f000 f808 	bl	80018c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b0:	f7ff fe2e 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40022000 	.word	0x40022000

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x54>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x58>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f93b 	bl	8001b5a <HAL_SYSTICK_Config>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00e      	b.n	800190c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d80a      	bhi.n	800190a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f000 f903 	bl	8001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_InitTick+0x5c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000048 	.word	0x20000048
 8001918:	20000050 	.word	0x20000050
 800191c:	2000004c 	.word	0x2000004c

08001920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_IncTick+0x1c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_IncTick+0x20>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a03      	ldr	r2, [pc, #12]	; (8001940 <HAL_IncTick+0x20>)
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	20000050 	.word	0x20000050
 8001940:	2000036c 	.word	0x2000036c

08001944 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b02      	ldr	r3, [pc, #8]	; (8001954 <HAL_GetTick+0x10>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	2000036c 	.word	0x2000036c

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4906      	ldr	r1, [pc, #24]	; (80019f0 <__NVIC_EnableIRQ+0x34>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	; (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f7ff ff90 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff2d 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff42 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff90 	bl	8001a48 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5f 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff35 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa2 	bl	8001aac <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b08b      	sub	sp, #44	; 0x2c
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b86:	e148      	b.n	8001e1a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f040 8137 	bne.w	8001e14 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4aa3      	ldr	r2, [pc, #652]	; (8001e38 <HAL_GPIO_Init+0x2c4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d05e      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bb0:	4aa1      	ldr	r2, [pc, #644]	; (8001e38 <HAL_GPIO_Init+0x2c4>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d875      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bb6:	4aa1      	ldr	r2, [pc, #644]	; (8001e3c <HAL_GPIO_Init+0x2c8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d058      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bbc:	4a9f      	ldr	r2, [pc, #636]	; (8001e3c <HAL_GPIO_Init+0x2c8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d86f      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bc2:	4a9f      	ldr	r2, [pc, #636]	; (8001e40 <HAL_GPIO_Init+0x2cc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d052      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bc8:	4a9d      	ldr	r2, [pc, #628]	; (8001e40 <HAL_GPIO_Init+0x2cc>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d869      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bce:	4a9d      	ldr	r2, [pc, #628]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d04c      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bd4:	4a9b      	ldr	r2, [pc, #620]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d863      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bda:	4a9b      	ldr	r2, [pc, #620]	; (8001e48 <HAL_GPIO_Init+0x2d4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d046      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001be0:	4a99      	ldr	r2, [pc, #612]	; (8001e48 <HAL_GPIO_Init+0x2d4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d85d      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d82a      	bhi.n	8001c40 <HAL_GPIO_Init+0xcc>
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d859      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bee:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <HAL_GPIO_Init+0x80>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c6f 	.word	0x08001c6f
 8001bf8:	08001c49 	.word	0x08001c49
 8001bfc:	08001c5b 	.word	0x08001c5b
 8001c00:	08001c9d 	.word	0x08001c9d
 8001c04:	08001ca3 	.word	0x08001ca3
 8001c08:	08001ca3 	.word	0x08001ca3
 8001c0c:	08001ca3 	.word	0x08001ca3
 8001c10:	08001ca3 	.word	0x08001ca3
 8001c14:	08001ca3 	.word	0x08001ca3
 8001c18:	08001ca3 	.word	0x08001ca3
 8001c1c:	08001ca3 	.word	0x08001ca3
 8001c20:	08001ca3 	.word	0x08001ca3
 8001c24:	08001ca3 	.word	0x08001ca3
 8001c28:	08001ca3 	.word	0x08001ca3
 8001c2c:	08001ca3 	.word	0x08001ca3
 8001c30:	08001ca3 	.word	0x08001ca3
 8001c34:	08001ca3 	.word	0x08001ca3
 8001c38:	08001c51 	.word	0x08001c51
 8001c3c:	08001c65 	.word	0x08001c65
 8001c40:	4a82      	ldr	r2, [pc, #520]	; (8001e4c <HAL_GPIO_Init+0x2d8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c46:	e02c      	b.n	8001ca2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	623b      	str	r3, [r7, #32]
          break;
 8001c4e:	e029      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	3304      	adds	r3, #4
 8001c56:	623b      	str	r3, [r7, #32]
          break;
 8001c58:	e024      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	3308      	adds	r3, #8
 8001c60:	623b      	str	r3, [r7, #32]
          break;
 8001c62:	e01f      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	623b      	str	r3, [r7, #32]
          break;
 8001c6c:	e01a      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c76:	2304      	movs	r3, #4
 8001c78:	623b      	str	r3, [r7, #32]
          break;
 8001c7a:	e013      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c84:	2308      	movs	r3, #8
 8001c86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	611a      	str	r2, [r3, #16]
          break;
 8001c8e:	e009      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c90:	2308      	movs	r3, #8
 8001c92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	615a      	str	r2, [r3, #20]
          break;
 8001c9a:	e003      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
          break;
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          break;
 8001ca2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2bff      	cmp	r3, #255	; 0xff
 8001ca8:	d801      	bhi.n	8001cae <HAL_GPIO_Init+0x13a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	e001      	b.n	8001cb2 <HAL_GPIO_Init+0x13e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2bff      	cmp	r3, #255	; 0xff
 8001cb8:	d802      	bhi.n	8001cc0 <HAL_GPIO_Init+0x14c>
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x152>
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	3b08      	subs	r3, #8
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	210f      	movs	r1, #15
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	6a39      	ldr	r1, [r7, #32]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8090 	beq.w	8001e14 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf4:	4b56      	ldr	r3, [pc, #344]	; (8001e50 <HAL_GPIO_Init+0x2dc>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a55      	ldr	r2, [pc, #340]	; (8001e50 <HAL_GPIO_Init+0x2dc>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_GPIO_Init+0x2dc>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d0c:	4a51      	ldr	r2, [pc, #324]	; (8001e54 <HAL_GPIO_Init+0x2e0>)
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a49      	ldr	r2, [pc, #292]	; (8001e58 <HAL_GPIO_Init+0x2e4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d00d      	beq.n	8001d54 <HAL_GPIO_Init+0x1e0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a48      	ldr	r2, [pc, #288]	; (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d007      	beq.n	8001d50 <HAL_GPIO_Init+0x1dc>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a47      	ldr	r2, [pc, #284]	; (8001e60 <HAL_GPIO_Init+0x2ec>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_GPIO_Init+0x1d8>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e004      	b.n	8001d56 <HAL_GPIO_Init+0x1e2>
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e002      	b.n	8001d56 <HAL_GPIO_Init+0x1e2>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_GPIO_Init+0x1e2>
 8001d54:	2300      	movs	r3, #0
 8001d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d58:	f002 0203 	and.w	r2, r2, #3
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	4093      	lsls	r3, r2
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d66:	493b      	ldr	r1, [pc, #236]	; (8001e54 <HAL_GPIO_Init+0x2e0>)
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d006      	beq.n	8001d8e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d80:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	4937      	ldr	r1, [pc, #220]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d8e:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	4933      	ldr	r1, [pc, #204]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d006      	beq.n	8001db6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	492d      	ldr	r1, [pc, #180]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60cb      	str	r3, [r1, #12]
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db6:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	4929      	ldr	r1, [pc, #164]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4923      	ldr	r1, [pc, #140]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
 8001ddc:	e006      	b.n	8001dec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	491f      	ldr	r1, [pc, #124]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4919      	ldr	r1, [pc, #100]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	4915      	ldr	r1, [pc, #84]	; (8001e64 <HAL_GPIO_Init+0x2f0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	3301      	adds	r3, #1
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f47f aeaf 	bne.w	8001b88 <HAL_GPIO_Init+0x14>
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	372c      	adds	r7, #44	; 0x2c
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	10320000 	.word	0x10320000
 8001e3c:	10310000 	.word	0x10310000
 8001e40:	10220000 	.word	0x10220000
 8001e44:	10210000 	.word	0x10210000
 8001e48:	10120000 	.word	0x10120000
 8001e4c:	10110000 	.word	0x10110000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010000 	.word	0x40010000
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	40010c00 	.word	0x40010c00
 8001e60:	40011000 	.word	0x40011000
 8001e64:	40010400 	.word	0x40010400

08001e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e001      	b.n	8001e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	807b      	strh	r3, [r7, #2]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea6:	787b      	ldrb	r3, [r7, #1]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eac:	887a      	ldrh	r2, [r7, #2]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eb2:	e003      	b.n	8001ebc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	041a      	lsls	r2, r3, #16
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	611a      	str	r2, [r3, #16]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ed8:	887a      	ldrh	r2, [r7, #2]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	041a      	lsls	r2, r3, #16
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	887b      	ldrh	r3, [r7, #2]
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	611a      	str	r2, [r3, #16]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e26c      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 8087 	beq.w	8002026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f18:	4b92      	ldr	r3, [pc, #584]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d00c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f24:	4b8f      	ldr	r3, [pc, #572]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d112      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5e>
 8001f30:	4b8c      	ldr	r3, [pc, #560]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d10b      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3e:	4b89      	ldr	r3, [pc, #548]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d06c      	beq.n	8002024 <HAL_RCC_OscConfig+0x12c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d168      	bne.n	8002024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e246      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x76>
 8001f60:	4b80      	ldr	r3, [pc, #512]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a7f      	ldr	r2, [pc, #508]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e02e      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x98>
 8001f76:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a7a      	ldr	r2, [pc, #488]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b78      	ldr	r3, [pc, #480]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a77      	ldr	r2, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	e01d      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0xbc>
 8001f9a:	4b72      	ldr	r3, [pc, #456]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a71      	ldr	r2, [pc, #452]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCC_OscConfig+0xd4>
 8001fb4:	4b6b      	ldr	r3, [pc, #428]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a6a      	ldr	r2, [pc, #424]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b68      	ldr	r3, [pc, #416]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a67      	ldr	r2, [pc, #412]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d013      	beq.n	8001ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fcb6 	bl	8001944 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fdc:	f7ff fcb2 	bl	8001944 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b64      	cmp	r3, #100	; 0x64
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e1fa      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0xe4>
 8001ffa:	e014      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fca2 	bl	8001944 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002004:	f7ff fc9e 	bl	8001944 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1e6      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x10c>
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d063      	beq.n	80020fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002032:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b08      	cmp	r3, #8
 8002048:	d11c      	bne.n	8002084 <HAL_RCC_OscConfig+0x18c>
 800204a:	4b46      	ldr	r3, [pc, #280]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d116      	bne.n	8002084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002056:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_RCC_OscConfig+0x176>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e1ba      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4939      	ldr	r1, [pc, #228]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002082:	e03a      	b.n	80020fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208c:	4b36      	ldr	r3, [pc, #216]	; (8002168 <HAL_RCC_OscConfig+0x270>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7ff fc57 	bl	8001944 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209a:	f7ff fc53 	bl	8001944 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e19b      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4927      	ldr	r1, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	600b      	str	r3, [r1, #0]
 80020cc:	e015      	b.n	80020fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_RCC_OscConfig+0x270>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fc36 	bl	8001944 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020dc:	f7ff fc32 	bl	8001944 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e17a      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d03a      	beq.n	800217c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d019      	beq.n	8002142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_RCC_OscConfig+0x274>)
 8002110:	2201      	movs	r2, #1
 8002112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002114:	f7ff fc16 	bl	8001944 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211c:	f7ff fc12 	bl	8001944 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e15a      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_RCC_OscConfig+0x26c>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800213a:	2001      	movs	r0, #1
 800213c:	f000 fa9a 	bl	8002674 <RCC_Delay>
 8002140:	e01c      	b.n	800217c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_RCC_OscConfig+0x274>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7ff fbfc 	bl	8001944 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214e:	e00f      	b.n	8002170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7ff fbf8 	bl	8001944 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d908      	bls.n	8002170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e140      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	42420000 	.word	0x42420000
 800216c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002170:	4b9e      	ldr	r3, [pc, #632]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e9      	bne.n	8002150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	f000 80a6 	beq.w	80022d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218e:	4b97      	ldr	r3, [pc, #604]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10d      	bne.n	80021b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b94      	ldr	r3, [pc, #592]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a93      	ldr	r2, [pc, #588]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	61d3      	str	r3, [r2, #28]
 80021a6:	4b91      	ldr	r3, [pc, #580]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b6:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021c2:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a8a      	ldr	r2, [pc, #552]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fbb9 	bl	8001944 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7ff fbb5 	bl	8001944 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b64      	cmp	r3, #100	; 0x64
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0fd      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <HAL_RCC_OscConfig+0x4f8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d106      	bne.n	800220a <HAL_RCC_OscConfig+0x312>
 80021fc:	4b7b      	ldr	r3, [pc, #492]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a7a      	ldr	r2, [pc, #488]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6213      	str	r3, [r2, #32]
 8002208:	e02d      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0x334>
 8002212:	4b76      	ldr	r3, [pc, #472]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a75      	ldr	r2, [pc, #468]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6213      	str	r3, [r2, #32]
 800221e:	4b73      	ldr	r3, [pc, #460]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a72      	ldr	r2, [pc, #456]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6213      	str	r3, [r2, #32]
 800222a:	e01c      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d10c      	bne.n	800224e <HAL_RCC_OscConfig+0x356>
 8002234:	4b6d      	ldr	r3, [pc, #436]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a6c      	ldr	r2, [pc, #432]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800223a:	f043 0304 	orr.w	r3, r3, #4
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a69      	ldr	r2, [pc, #420]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	e00b      	b.n	8002266 <HAL_RCC_OscConfig+0x36e>
 800224e:	4b67      	ldr	r3, [pc, #412]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a66      	ldr	r2, [pc, #408]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6213      	str	r3, [r2, #32]
 800225a:	4b64      	ldr	r3, [pc, #400]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a63      	ldr	r2, [pc, #396]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002260:	f023 0304 	bic.w	r3, r3, #4
 8002264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d015      	beq.n	800229a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7ff fb69 	bl	8001944 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	e00a      	b.n	800228c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002276:	f7ff fb65 	bl	8001944 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	f241 3288 	movw	r2, #5000	; 0x1388
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e0ab      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	4b57      	ldr	r3, [pc, #348]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0ee      	beq.n	8002276 <HAL_RCC_OscConfig+0x37e>
 8002298:	e014      	b.n	80022c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229a:	f7ff fb53 	bl	8001944 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7ff fb4f 	bl	8001944 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e095      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ee      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4b48      	ldr	r3, [pc, #288]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a47      	ldr	r2, [pc, #284]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8081 	beq.w	80023e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e0:	4b42      	ldr	r3, [pc, #264]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d061      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d146      	bne.n	8002382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7ff fb23 	bl	8001944 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002302:	f7ff fb1f 	bl	8001944 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e067      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002314:	4b35      	ldr	r3, [pc, #212]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f0      	bne.n	8002302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d108      	bne.n	800233c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800232a:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	492d      	ldr	r1, [pc, #180]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800233c:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a19      	ldr	r1, [r3, #32]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	430b      	orrs	r3, r1
 800234e:	4927      	ldr	r1, [pc, #156]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 8002356:	2201      	movs	r2, #1
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff faf3 	bl	8001944 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7ff faef 	bl	8001944 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e037      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x46a>
 8002380:	e02f      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCC_OscConfig+0x4fc>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff fadc 	bl	8001944 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002390:	f7ff fad8 	bl	8001944 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e020      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x498>
 80023ae:	e018      	b.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e013      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_OscConfig+0x4f4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
 80023f4:	42420060 	.word	0x42420060

080023f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0d0      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d910      	bls.n	800243c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	4965      	ldr	r1, [pc, #404]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b63      	ldr	r3, [pc, #396]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0b8      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002454:	4b59      	ldr	r3, [pc, #356]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800245e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800246c:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002478:	4b50      	ldr	r3, [pc, #320]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	494d      	ldr	r1, [pc, #308]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d040      	beq.n	8002518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d115      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07f      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e073      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e06b      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4936      	ldr	r1, [pc, #216]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e8:	f7ff fa2c 	bl	8001944 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7ff fa28 	bl	8001944 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e053      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d210      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 0207 	bic.w	r2, r3, #7
 800252e:	4922      	ldr	r1, [pc, #136]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e032      	b.n	80025ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4916      	ldr	r1, [pc, #88]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	490e      	ldr	r1, [pc, #56]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002586:	f000 f821 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 800258a:	4602      	mov	r2, r0
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	490a      	ldr	r1, [pc, #40]	; (80025c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002598:	5ccb      	ldrb	r3, [r1, r3]
 800259a:	fa22 f303 	lsr.w	r3, r2, r3
 800259e:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1cc>)
 80025a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_ClockConfig+0x1d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f98a 	bl	80018c0 <HAL_InitTick>

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08002ed8 	.word	0x08002ed8
 80025c4:	20000048 	.word	0x20000048
 80025c8:	2000004c 	.word	0x2000004c

080025cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025e6:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <HAL_RCC_GetSysClockFreq+0x94>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d002      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0x30>
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0x36>
 80025fa:	e027      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCC_GetSysClockFreq+0x98>)
 80025fe:	613b      	str	r3, [r7, #16]
      break;
 8002600:	e027      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	0c9b      	lsrs	r3, r3, #18
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <HAL_RCC_GetSysClockFreq+0x9c>)
 800260c:	5cd3      	ldrb	r3, [r2, r3]
 800260e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800261a:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_RCC_GetSysClockFreq+0x94>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0c5b      	lsrs	r3, r3, #17
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	4a11      	ldr	r2, [pc, #68]	; (800266c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a0d      	ldr	r2, [pc, #52]	; (8002664 <HAL_RCC_GetSysClockFreq+0x98>)
 800262e:	fb02 f203 	mul.w	r2, r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	fbb2 f3f3 	udiv	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e004      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	613b      	str	r3, [r7, #16]
      break;
 800264a:	e002      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RCC_GetSysClockFreq+0x98>)
 800264e:	613b      	str	r3, [r7, #16]
      break;
 8002650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002652:	693b      	ldr	r3, [r7, #16]
}
 8002654:	4618      	mov	r0, r3
 8002656:	371c      	adds	r7, #28
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	007a1200 	.word	0x007a1200
 8002668:	08002ee8 	.word	0x08002ee8
 800266c:	08002ef8 	.word	0x08002ef8
 8002670:	003d0900 	.word	0x003d0900

08002674 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <RCC_Delay+0x34>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <RCC_Delay+0x38>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0a5b      	lsrs	r3, r3, #9
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002690:	bf00      	nop
  }
  while (Delay --);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	60fa      	str	r2, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f9      	bne.n	8002690 <RCC_Delay+0x1c>
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000048 	.word	0x20000048
 80026ac:	10624dd3 	.word	0x10624dd3

080026b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e041      	b.n	8002746 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe ff4c 	bl	8001574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3304      	adds	r3, #4
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f000 fa56 	bl	8002ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d001      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e035      	b.n	80027d4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <HAL_TIM_Base_Start_IT+0x90>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d009      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x4e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002792:	d004      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x4e>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <HAL_TIM_Base_Start_IT+0x94>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d111      	bne.n	80027c2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d010      	beq.n	80027d2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c0:	e007      	b.n	80027d2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40000400 	.word	0x40000400

080027e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d020      	beq.n	800284c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01b      	beq.n	800284c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0202 	mvn.w	r2, #2
 800281c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f998 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f98b 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f99a 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d020      	beq.n	8002898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01b      	beq.n	8002898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0204 	mvn.w	r2, #4
 8002868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2202      	movs	r2, #2
 800286e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f972 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 8002884:	e005      	b.n	8002892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f965 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f974 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d020      	beq.n	80028e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01b      	beq.n	80028e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0208 	mvn.w	r2, #8
 80028b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2204      	movs	r2, #4
 80028ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f94c 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 80028d0:	e005      	b.n	80028de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f93f 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f94e 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d020      	beq.n	8002930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01b      	beq.n	8002930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0210 	mvn.w	r2, #16
 8002900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2208      	movs	r2, #8
 8002906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f926 	bl	8002b68 <HAL_TIM_IC_CaptureCallback>
 800291c:	e005      	b.n	800292a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f919 	bl	8002b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f928 	bl	8002b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00c      	beq.n	8002954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0201 	mvn.w	r2, #1
 800294c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe fbe4 	bl	800111c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00c      	beq.n	8002978 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d007      	beq.n	8002978 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa6f 	bl	8002e56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8f8 	bl	8002b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0220 	mvn.w	r2, #32
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fa42 	bl	8002e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_TIM_ConfigClockSource+0x1c>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e0b4      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x186>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2202      	movs	r2, #2
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a1c:	d03e      	beq.n	8002a9c <HAL_TIM_ConfigClockSource+0xd4>
 8002a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a22:	f200 8087 	bhi.w	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2a:	f000 8086 	beq.w	8002b3a <HAL_TIM_ConfigClockSource+0x172>
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a32:	d87f      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a34:	2b70      	cmp	r3, #112	; 0x70
 8002a36:	d01a      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0xa6>
 8002a38:	2b70      	cmp	r3, #112	; 0x70
 8002a3a:	d87b      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b60      	cmp	r3, #96	; 0x60
 8002a3e:	d050      	beq.n	8002ae2 <HAL_TIM_ConfigClockSource+0x11a>
 8002a40:	2b60      	cmp	r3, #96	; 0x60
 8002a42:	d877      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a44:	2b50      	cmp	r3, #80	; 0x50
 8002a46:	d03c      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0xfa>
 8002a48:	2b50      	cmp	r3, #80	; 0x50
 8002a4a:	d873      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a4c:	2b40      	cmp	r3, #64	; 0x40
 8002a4e:	d058      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x13a>
 8002a50:	2b40      	cmp	r3, #64	; 0x40
 8002a52:	d86f      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a54:	2b30      	cmp	r3, #48	; 0x30
 8002a56:	d064      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a58:	2b30      	cmp	r3, #48	; 0x30
 8002a5a:	d86b      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d060      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d867      	bhi.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d05c      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d05a      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x15a>
 8002a6c:	e062      	b.n	8002b34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6899      	ldr	r1, [r3, #8]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f000 f96a 	bl	8002d56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	609a      	str	r2, [r3, #8]
      break;
 8002a9a:	e04f      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6899      	ldr	r1, [r3, #8]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f000 f953 	bl	8002d56 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689a      	ldr	r2, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002abe:	609a      	str	r2, [r3, #8]
      break;
 8002ac0:	e03c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f000 f8ca 	bl	8002c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2150      	movs	r1, #80	; 0x50
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f921 	bl	8002d22 <TIM_ITRx_SetConfig>
      break;
 8002ae0:	e02c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f000 f8e8 	bl	8002cc4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2160      	movs	r1, #96	; 0x60
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f911 	bl	8002d22 <TIM_ITRx_SetConfig>
      break;
 8002b00:	e01c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6859      	ldr	r1, [r3, #4]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f000 f8aa 	bl	8002c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2140      	movs	r1, #64	; 0x40
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f901 	bl	8002d22 <TIM_ITRx_SetConfig>
      break;
 8002b20:	e00c      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	f000 f8f8 	bl	8002d22 <TIM_ITRx_SetConfig>
      break;
 8002b32:	e003      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      break;
 8002b38:	e000      	b.n	8002b3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr
	...

08002ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <TIM_Base_SetConfig+0xc0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d007      	beq.n	8002bc8 <TIM_Base_SetConfig+0x28>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbe:	d003      	beq.n	8002bc8 <TIM_Base_SetConfig+0x28>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a28      	ldr	r2, [pc, #160]	; (8002c64 <TIM_Base_SetConfig+0xc4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d108      	bne.n	8002bda <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a20      	ldr	r2, [pc, #128]	; (8002c60 <TIM_Base_SetConfig+0xc0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <TIM_Base_SetConfig+0x52>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d003      	beq.n	8002bf2 <TIM_Base_SetConfig+0x52>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <TIM_Base_SetConfig+0xc4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d108      	bne.n	8002c04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <TIM_Base_SetConfig+0xc0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d103      	bne.n	8002c38 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f023 0201 	bic.w	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	611a      	str	r2, [r3, #16]
  }
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400

08002c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f023 0201 	bic.w	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f023 030a 	bic.w	r3, r3, #10
 8002ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	621a      	str	r2, [r3, #32]
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f023 0210 	bic.w	r2, r3, #16
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	031b      	lsls	r3, r3, #12
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	621a      	str	r2, [r3, #32]
}
 8002d18:	bf00      	nop
 8002d1a:	371c      	adds	r7, #28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f043 0307 	orr.w	r3, r3, #7
 8002d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	609a      	str	r2, [r3, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b087      	sub	sp, #28
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	021a      	lsls	r2, r3, #8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	609a      	str	r2, [r3, #8]
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e041      	b.n	8002e30 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d004      	beq.n	8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d10c      	bne.n	8002e1e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400

08002e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <__libc_init_array>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	2600      	movs	r6, #0
 8002e6c:	4d0c      	ldr	r5, [pc, #48]	; (8002ea0 <__libc_init_array+0x38>)
 8002e6e:	4c0d      	ldr	r4, [pc, #52]	; (8002ea4 <__libc_init_array+0x3c>)
 8002e70:	1b64      	subs	r4, r4, r5
 8002e72:	10a4      	asrs	r4, r4, #2
 8002e74:	42a6      	cmp	r6, r4
 8002e76:	d109      	bne.n	8002e8c <__libc_init_array+0x24>
 8002e78:	f000 f822 	bl	8002ec0 <_init>
 8002e7c:	2600      	movs	r6, #0
 8002e7e:	4d0a      	ldr	r5, [pc, #40]	; (8002ea8 <__libc_init_array+0x40>)
 8002e80:	4c0a      	ldr	r4, [pc, #40]	; (8002eac <__libc_init_array+0x44>)
 8002e82:	1b64      	subs	r4, r4, r5
 8002e84:	10a4      	asrs	r4, r4, #2
 8002e86:	42a6      	cmp	r6, r4
 8002e88:	d105      	bne.n	8002e96 <__libc_init_array+0x2e>
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e90:	4798      	blx	r3
 8002e92:	3601      	adds	r6, #1
 8002e94:	e7ee      	b.n	8002e74 <__libc_init_array+0xc>
 8002e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9a:	4798      	blx	r3
 8002e9c:	3601      	adds	r6, #1
 8002e9e:	e7f2      	b.n	8002e86 <__libc_init_array+0x1e>
 8002ea0:	08002efc 	.word	0x08002efc
 8002ea4:	08002efc 	.word	0x08002efc
 8002ea8:	08002efc 	.word	0x08002efc
 8002eac:	08002f00 	.word	0x08002f00

08002eb0 <memset>:
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4402      	add	r2, r0
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d100      	bne.n	8002eba <memset+0xa>
 8002eb8:	4770      	bx	lr
 8002eba:	f803 1b01 	strb.w	r1, [r3], #1
 8002ebe:	e7f9      	b.n	8002eb4 <memset+0x4>

08002ec0 <_init>:
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	bf00      	nop
 8002ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec6:	bc08      	pop	{r3}
 8002ec8:	469e      	mov	lr, r3
 8002eca:	4770      	bx	lr

08002ecc <_fini>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	bf00      	nop
 8002ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed2:	bc08      	pop	{r3}
 8002ed4:	469e      	mov	lr, r3
 8002ed6:	4770      	bx	lr
